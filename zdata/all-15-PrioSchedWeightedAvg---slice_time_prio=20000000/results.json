{
    "scrabble": {
        "times": [
            1260.399,
            500.915,
            513.441,
            511.129,
            531.449,
            505.043,
            587.697,
            494.347,
            488.209,
            518.536,
            498.799,
            515.591,
            519.712,
            450.274,
            521.364
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\n"
    },
    "page-rank": {
        "times": [
            18511.185,
            10044.92,
            9982.335,
            10196.538,
            10168.844,
            10107.68,
            9917.32,
            10206.346,
            10157.299,
            10545.125,
            11505.968,
            10370.768,
            10386.126,
            10083.439,
            11605.007
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n"
    },
    "future-genetic": {
        "times": [
            2942.451,
            2172.303,
            2199.587,
            2132.978,
            2161.581,
            2188.488,
            2205.79,
            2170.488,
            2182.347,
            2172.139,
            2085.475,
            2070.233,
            2145.005,
            2002.951,
            2062.103
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n"
    },
    "akka-uct": {
        "times": [
            16944.781,
            12876.264,
            12945.423,
            13315.395,
            12958.639,
            12531.292,
            12723.312,
            12457.003,
            12765.843,
            12106.428,
            12746.729,
            13629.068,
            12445.012,
            12815.52,
            12987.348
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\n"
    },
    "movie-lens": {
        "times": [
            21299.546,
            15844.484,
            15111.527,
            13813.125,
            14164.558,
            13109.307,
            14030.934,
            12669.133,
            12899.586,
            13821.615,
            13064.4,
            12353.615,
            12872.139,
            13134.158,
            12632.403
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n"
    },
    "scala-doku": {
        "times": [
            3303.606,
            2444.992,
            2335.554,
            2347.801,
            2356.14,
            2279.369,
            2277.575,
            2212.531,
            2183.129,
            2290.124,
            2216.711,
            2720.941,
            2510.755,
            2310.478,
            2306.278
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\n"
    },
    "chi-square": {
        "times": [
            4341.801,
            1154.303,
            1490.082,
            1044.499,
            1033.359,
            964.696,
            998.268,
            970.329,
            877.27,
            870.213,
            909.703,
            908.796,
            864.614,
            911.735,
            917.26
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n"
    },
    "fj-kmeans": {
        "times": [
            5526.68,
            5380.021,
            5220.163,
            5684.148,
            5884.879,
            5421.984,
            5438.575,
            5342.875,
            5492.622,
            5334.4,
            5082.397,
            5206.306,
            5269.53,
            6212.675,
            5269.957
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n"
    },
    "rx-scrabble": {
        "times": [
            677.92,
            264.981,
            211.91,
            214.154,
            238.985,
            159.716,
            190.796,
            165.574,
            179.012,
            124.65,
            137.128,
            131.751,
            116.306,
            150.38,
            143.318
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n"
    },
    "db-shootout": {
        "times": [
            7884.697,
            8071.68,
            7644.943,
            7393.037,
            8495.247,
            8164.957,
            8068.827,
            7660.084,
            7326.67,
            7898.791,
            7448.52,
            7663.274,
            7838.497,
            7489.091,
            7622.498
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\n"
    },
    "finagle-http": {
        "times": [
            19045.905,
            15928.493,
            12188.296,
            9225.186,
            7298.156,
            5480.716,
            4692.887,
            4137.273,
            3911.501,
            3664.081,
            3458.658,
            3322.966,
            3432.301,
            3341.451,
            3524.757
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n"
    },
    "reactors": {
        "times": [
            15205.783,
            12722.488,
            12163.502,
            12123.68,
            13076.337,
            12274.826,
            12266.514,
            11962.809,
            12105.464,
            12349.913,
            12211.099,
            12192.669,
            12311.546,
            12109.985,
            12168.415
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\n"
    },
    "dec-tree": {
        "times": [
            8970.648,
            2423.847,
            1482.868,
            1505.609,
            1414.794,
            1423.54,
            1349.964,
            1283.631,
            1335.868,
            1318.886,
            1320.882,
            1344.416,
            1273.51,
            1350.527,
            1279.412
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n"
    },
    "scala-stm-bench7": {
        "times": [
            2278.984,
            1596.236,
            1389.583,
            1339.513,
            1381.498,
            1284.63,
            1435.284,
            1372.804,
            1341.262,
            1377.84,
            1303.193,
            1277.872,
            1361.338,
            1311.445,
            1307.286
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 103.844 ms, heap usage 451.690 MB -> 141.962 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 581\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 37\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 581\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 26\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 117.65 op/s (117.65 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2278.984 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.808 ms, heap usage 454.348 MB -> 142.239 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 395\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 23\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 581\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 23\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 26\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 359.55 op/s (359.55 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1596.236 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 109.672 ms, heap usage 514.861 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 401\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 581\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 8\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 23\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 26\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 530.97 op/s (530.97 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1389.583 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 119.100 ms, heap usage 512.593 MB -> 142.238 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 581\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 8\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 23\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 26\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 13\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 853.33 op/s (853.33 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1339.513 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 117.518 ms, heap usage 512.712 MB -> 142.241 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 399\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 33\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 581\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 23\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 33\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 13\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 932.40 op/s (932.40 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1381.498 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 103.167 ms, heap usage 506.564 MB -> 142.247 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 581\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 8\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 23\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 33\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 16\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1284.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.739 ms, heap usage 511.441 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 45\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 581\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 23\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 45\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1115.54 op/s (1115.54 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1435.284 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 108.507 ms, heap usage 506.802 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 581\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 23\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 45\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 20\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1592.04 op/s (1592.04 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1372.804 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 146.277 ms, heap usage 513.523 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 348\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 581\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 23\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 45\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 20\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2016.81 op/s (2016.81 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1341.262 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 105.937 ms, heap usage 512.723 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 581\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 23\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 45\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2127.66 op/s (2127.66 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1377.840 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 108.898 ms, heap usage 515.497 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 581\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 23\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 45\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 20\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2334.22 op/s (2334.22 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1303.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 108.214 ms, heap usage 514.819 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 581\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 23\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 45\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 20\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2637.36 op/s (2637.36 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1277.872 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 130.303 ms, heap usage 514.528 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 386\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 581\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 24\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 23\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 45\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 20\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2447.06 op/s (2447.06 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1361.338 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 99.874 ms, heap usage 512.799 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 581\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 23\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 45\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 20\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2842.64 op/s (2842.64 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1311.445 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 98.597 ms, heap usage 511.302 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 581\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 24\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 23\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 45\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 20\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2777.78 op/s (2777.78 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1307.286 ms) ======\n"
    },
    "naive-bayes": {
        "times": [
            29396.914,
            15806.656,
            16689.626,
            15184.89,
            17024.116,
            16239.118,
            15684.396,
            15157.344,
            15093.99,
            14692.524,
            15049.681,
            14419.131,
            14766.403,
            14960.512,
            14580.682
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 103.844 ms, heap usage 451.690 MB -> 141.962 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 581\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 37\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 581\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 26\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 117.65 op/s (117.65 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2278.984 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.808 ms, heap usage 454.348 MB -> 142.239 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 395\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 23\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 581\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 23\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 26\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 359.55 op/s (359.55 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1596.236 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 109.672 ms, heap usage 514.861 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 401\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 581\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 8\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 23\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 26\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 530.97 op/s (530.97 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1389.583 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 119.100 ms, heap usage 512.593 MB -> 142.238 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 581\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 8\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 23\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 26\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 13\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 853.33 op/s (853.33 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1339.513 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 117.518 ms, heap usage 512.712 MB -> 142.241 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 399\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 33\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 581\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 23\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 33\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 13\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 932.40 op/s (932.40 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1381.498 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 103.167 ms, heap usage 506.564 MB -> 142.247 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 581\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 8\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 23\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 33\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 16\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1284.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.739 ms, heap usage 511.441 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 45\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 581\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 23\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 45\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1115.54 op/s (1115.54 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1435.284 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 108.507 ms, heap usage 506.802 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 581\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 23\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 45\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 20\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1592.04 op/s (1592.04 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1372.804 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 146.277 ms, heap usage 513.523 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 348\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 581\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 23\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 45\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 20\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2016.81 op/s (2016.81 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1341.262 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 105.937 ms, heap usage 512.723 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 581\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 23\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 45\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2127.66 op/s (2127.66 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1377.840 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 108.898 ms, heap usage 515.497 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 581\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 23\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 45\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 20\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2334.22 op/s (2334.22 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1303.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 108.214 ms, heap usage 514.819 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 581\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 23\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 45\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 20\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2637.36 op/s (2637.36 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1277.872 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 130.303 ms, heap usage 514.528 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 386\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 581\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 24\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 23\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 45\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 20\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2447.06 op/s (2447.06 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1361.338 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 99.874 ms, heap usage 512.799 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 581\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 23\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 45\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 20\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2842.64 op/s (2842.64 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1311.445 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 98.597 ms, heap usage 511.302 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 581\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 24\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 23\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 45\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 20\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2777.78 op/s (2777.78 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1307.286 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.491 ms, heap usage 442.826 MB -> 153.611 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (29396.914 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 126.958 ms, heap usage 763.230 MB -> 429.402 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15806.656 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 156.833 ms, heap usage 749.098 MB -> 428.255 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (16689.626 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.722 ms, heap usage 530.467 MB -> 428.258 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15184.890 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.764 ms, heap usage 447.158 MB -> 428.404 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17024.116 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 129.019 ms, heap usage 530.334 MB -> 428.442 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (16239.118 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.864 ms, heap usage 529.725 MB -> 426.786 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15684.396 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 120.205 ms, heap usage 746.464 MB -> 426.874 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (15157.344 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 132.632 ms, heap usage 766.925 MB -> 424.978 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (15093.990 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 149.800 ms, heap usage 546.952 MB -> 424.129 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14692.524 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 98.350 ms, heap usage 526.302 MB -> 423.923 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15049.681 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.453 ms, heap usage 809.017 MB -> 422.007 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14419.131 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 110.342 ms, heap usage 541.402 MB -> 422.060 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14766.403 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 98.285 ms, heap usage 524.015 MB -> 422.192 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14960.512 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.042 ms, heap usage 493.227 MB -> 422.759 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14580.682 ms) ======\n"
    },
    "als": {
        "times": [
            17233.118,
            9655.327,
            8348.382,
            8032.212,
            8664.91,
            7869.012,
            7594.641,
            7771.682,
            9732.4,
            7710.698,
            7805.299,
            7568.42,
            7564.793,
            7778.535,
            7705.896
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 103.844 ms, heap usage 451.690 MB -> 141.962 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 581\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 37\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 581\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 26\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 117.65 op/s (117.65 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2278.984 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.808 ms, heap usage 454.348 MB -> 142.239 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 395\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 23\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 581\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 23\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 26\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 359.55 op/s (359.55 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1596.236 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 109.672 ms, heap usage 514.861 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 401\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 581\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 8\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 23\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 26\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 530.97 op/s (530.97 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1389.583 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 119.100 ms, heap usage 512.593 MB -> 142.238 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 581\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 8\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 23\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 26\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 13\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 853.33 op/s (853.33 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1339.513 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 117.518 ms, heap usage 512.712 MB -> 142.241 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 399\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 33\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 581\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 23\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 33\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 13\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 932.40 op/s (932.40 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1381.498 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 103.167 ms, heap usage 506.564 MB -> 142.247 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 581\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 8\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 23\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 33\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 16\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1284.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.739 ms, heap usage 511.441 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 45\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 581\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 23\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 45\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1115.54 op/s (1115.54 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1435.284 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 108.507 ms, heap usage 506.802 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 581\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 23\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 45\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 20\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1592.04 op/s (1592.04 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1372.804 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 146.277 ms, heap usage 513.523 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 348\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 581\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 23\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 45\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 20\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2016.81 op/s (2016.81 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1341.262 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 105.937 ms, heap usage 512.723 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 581\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 23\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 45\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2127.66 op/s (2127.66 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1377.840 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 108.898 ms, heap usage 515.497 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 581\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 23\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 45\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 20\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2334.22 op/s (2334.22 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1303.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 108.214 ms, heap usage 514.819 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 581\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 23\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 45\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 20\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2637.36 op/s (2637.36 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1277.872 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 130.303 ms, heap usage 514.528 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 386\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 581\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 24\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 23\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 45\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 20\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2447.06 op/s (2447.06 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1361.338 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 99.874 ms, heap usage 512.799 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 581\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 23\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 45\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 20\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2842.64 op/s (2842.64 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1311.445 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 98.597 ms, heap usage 511.302 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 581\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 24\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 23\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 45\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 20\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2777.78 op/s (2777.78 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1307.286 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.491 ms, heap usage 442.826 MB -> 153.611 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (29396.914 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 126.958 ms, heap usage 763.230 MB -> 429.402 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15806.656 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 156.833 ms, heap usage 749.098 MB -> 428.255 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (16689.626 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.722 ms, heap usage 530.467 MB -> 428.258 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15184.890 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.764 ms, heap usage 447.158 MB -> 428.404 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17024.116 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 129.019 ms, heap usage 530.334 MB -> 428.442 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (16239.118 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.864 ms, heap usage 529.725 MB -> 426.786 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15684.396 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 120.205 ms, heap usage 746.464 MB -> 426.874 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (15157.344 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 132.632 ms, heap usage 766.925 MB -> 424.978 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (15093.990 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 149.800 ms, heap usage 546.952 MB -> 424.129 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14692.524 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 98.350 ms, heap usage 526.302 MB -> 423.923 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15049.681 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.453 ms, heap usage 809.017 MB -> 422.007 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14419.131 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 110.342 ms, heap usage 541.402 MB -> 422.060 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14766.403 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 98.285 ms, heap usage 524.015 MB -> 422.192 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14960.512 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.042 ms, heap usage 493.227 MB -> 422.759 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14580.682 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 116.890 ms, heap usage 668.742 MB -> 168.123 MB.\n====== als (apache-spark) [default], iteration 0 completed (17233.118 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 201.755 ms, heap usage 320.390 MB -> 192.820 MB.\n====== als (apache-spark) [default], iteration 1 completed (9655.327 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 161.373 ms, heap usage 397.212 MB -> 194.098 MB.\n====== als (apache-spark) [default], iteration 2 completed (8348.382 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.220 ms, heap usage 493.290 MB -> 194.521 MB.\n====== als (apache-spark) [default], iteration 3 completed (8032.212 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.446 ms, heap usage 655.272 MB -> 195.404 MB.\n====== als (apache-spark) [default], iteration 4 completed (8664.910 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 137.889 ms, heap usage 842.615 MB -> 196.019 MB.\n====== als (apache-spark) [default], iteration 5 completed (7869.012 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 173.766 ms, heap usage 580.847 MB -> 196.397 MB.\n====== als (apache-spark) [default], iteration 6 completed (7594.641 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 168.191 ms, heap usage 630.628 MB -> 196.968 MB.\n====== als (apache-spark) [default], iteration 7 completed (7771.682 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 151.094 ms, heap usage 319.744 MB -> 197.121 MB.\n====== als (apache-spark) [default], iteration 8 completed (9732.400 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 154.055 ms, heap usage 612.315 MB -> 197.930 MB.\n====== als (apache-spark) [default], iteration 9 completed (7710.698 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.092 ms, heap usage 616.744 MB -> 198.332 MB.\n====== als (apache-spark) [default], iteration 10 completed (7805.299 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 172.070 ms, heap usage 732.573 MB -> 198.578 MB.\n====== als (apache-spark) [default], iteration 11 completed (7568.420 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.651 ms, heap usage 491.695 MB -> 198.654 MB.\n====== als (apache-spark) [default], iteration 12 completed (7564.793 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 161.139 ms, heap usage 587.096 MB -> 199.047 MB.\n====== als (apache-spark) [default], iteration 13 completed (7778.535 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 151.439 ms, heap usage 571.978 MB -> 199.457 MB.\n====== als (apache-spark) [default], iteration 14 completed (7705.896 ms) ======\n"
    },
    "par-mnemonics": {
        "times": [
            4191.998,
            3867.614,
            3943.321,
            4467.963,
            4104.106,
            3693.66,
            3821.608,
            3727.169,
            3687.443,
            3478.543,
            3639.285,
            3621.927,
            3529.952,
            3635.964,
            4057.087
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 103.844 ms, heap usage 451.690 MB -> 141.962 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 581\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 37\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 581\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 26\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 117.65 op/s (117.65 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2278.984 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.808 ms, heap usage 454.348 MB -> 142.239 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 395\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 23\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 581\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 23\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 26\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 359.55 op/s (359.55 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1596.236 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 109.672 ms, heap usage 514.861 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 401\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 581\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 8\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 23\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 26\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 530.97 op/s (530.97 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1389.583 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 119.100 ms, heap usage 512.593 MB -> 142.238 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 581\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 8\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 23\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 26\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 13\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 853.33 op/s (853.33 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1339.513 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 117.518 ms, heap usage 512.712 MB -> 142.241 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 399\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 33\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 581\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 23\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 33\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 13\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 932.40 op/s (932.40 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1381.498 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 103.167 ms, heap usage 506.564 MB -> 142.247 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 581\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 8\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 23\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 33\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 16\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1284.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.739 ms, heap usage 511.441 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 45\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 581\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 23\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 45\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1115.54 op/s (1115.54 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1435.284 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 108.507 ms, heap usage 506.802 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 581\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 23\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 45\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 20\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1592.04 op/s (1592.04 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1372.804 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 146.277 ms, heap usage 513.523 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 348\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 581\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 23\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 45\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 20\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2016.81 op/s (2016.81 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1341.262 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 105.937 ms, heap usage 512.723 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 581\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 23\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 45\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2127.66 op/s (2127.66 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1377.840 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 108.898 ms, heap usage 515.497 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 581\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 23\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 45\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 20\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2334.22 op/s (2334.22 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1303.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 108.214 ms, heap usage 514.819 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 581\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 23\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 45\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 20\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2637.36 op/s (2637.36 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1277.872 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 130.303 ms, heap usage 514.528 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 386\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 581\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 24\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 23\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 45\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 20\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2447.06 op/s (2447.06 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1361.338 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 99.874 ms, heap usage 512.799 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 581\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 23\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 45\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 20\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2842.64 op/s (2842.64 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1311.445 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 98.597 ms, heap usage 511.302 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 581\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 24\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 23\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 45\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 20\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2777.78 op/s (2777.78 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1307.286 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.491 ms, heap usage 442.826 MB -> 153.611 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (29396.914 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 126.958 ms, heap usage 763.230 MB -> 429.402 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15806.656 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 156.833 ms, heap usage 749.098 MB -> 428.255 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (16689.626 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.722 ms, heap usage 530.467 MB -> 428.258 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15184.890 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.764 ms, heap usage 447.158 MB -> 428.404 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17024.116 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 129.019 ms, heap usage 530.334 MB -> 428.442 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (16239.118 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.864 ms, heap usage 529.725 MB -> 426.786 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15684.396 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 120.205 ms, heap usage 746.464 MB -> 426.874 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (15157.344 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 132.632 ms, heap usage 766.925 MB -> 424.978 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (15093.990 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 149.800 ms, heap usage 546.952 MB -> 424.129 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14692.524 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 98.350 ms, heap usage 526.302 MB -> 423.923 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15049.681 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.453 ms, heap usage 809.017 MB -> 422.007 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14419.131 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 110.342 ms, heap usage 541.402 MB -> 422.060 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14766.403 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 98.285 ms, heap usage 524.015 MB -> 422.192 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14960.512 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.042 ms, heap usage 493.227 MB -> 422.759 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14580.682 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 116.890 ms, heap usage 668.742 MB -> 168.123 MB.\n====== als (apache-spark) [default], iteration 0 completed (17233.118 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 201.755 ms, heap usage 320.390 MB -> 192.820 MB.\n====== als (apache-spark) [default], iteration 1 completed (9655.327 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 161.373 ms, heap usage 397.212 MB -> 194.098 MB.\n====== als (apache-spark) [default], iteration 2 completed (8348.382 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.220 ms, heap usage 493.290 MB -> 194.521 MB.\n====== als (apache-spark) [default], iteration 3 completed (8032.212 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.446 ms, heap usage 655.272 MB -> 195.404 MB.\n====== als (apache-spark) [default], iteration 4 completed (8664.910 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 137.889 ms, heap usage 842.615 MB -> 196.019 MB.\n====== als (apache-spark) [default], iteration 5 completed (7869.012 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 173.766 ms, heap usage 580.847 MB -> 196.397 MB.\n====== als (apache-spark) [default], iteration 6 completed (7594.641 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 168.191 ms, heap usage 630.628 MB -> 196.968 MB.\n====== als (apache-spark) [default], iteration 7 completed (7771.682 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 151.094 ms, heap usage 319.744 MB -> 197.121 MB.\n====== als (apache-spark) [default], iteration 8 completed (9732.400 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 154.055 ms, heap usage 612.315 MB -> 197.930 MB.\n====== als (apache-spark) [default], iteration 9 completed (7710.698 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.092 ms, heap usage 616.744 MB -> 198.332 MB.\n====== als (apache-spark) [default], iteration 10 completed (7805.299 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 172.070 ms, heap usage 732.573 MB -> 198.578 MB.\n====== als (apache-spark) [default], iteration 11 completed (7568.420 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.651 ms, heap usage 491.695 MB -> 198.654 MB.\n====== als (apache-spark) [default], iteration 12 completed (7564.793 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 161.139 ms, heap usage 587.096 MB -> 199.047 MB.\n====== als (apache-spark) [default], iteration 13 completed (7778.535 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 151.439 ms, heap usage 571.978 MB -> 199.457 MB.\n====== als (apache-spark) [default], iteration 14 completed (7705.896 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.967 ms, heap usage 688.226 MB -> 179.960 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4191.998 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 153.556 ms, heap usage 507.180 MB -> 179.712 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3867.614 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 127.176 ms, heap usage 467.692 MB -> 179.729 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3943.321 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 128.874 ms, heap usage 310.696 MB -> 179.731 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4467.963 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 131.248 ms, heap usage 310.539 MB -> 179.736 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4104.106 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 121.975 ms, heap usage 303.228 MB -> 179.732 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3693.660 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 119.288 ms, heap usage 312.232 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3821.608 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 116.971 ms, heap usage 309.421 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3727.169 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 133.292 ms, heap usage 318.987 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3687.443 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 129.084 ms, heap usage 316.425 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3478.543 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.872 ms, heap usage 316.233 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3639.285 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 140.124 ms, heap usage 327.236 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (3621.927 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 143.343 ms, heap usage 552.993 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3529.952 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 137.286 ms, heap usage 315.237 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3635.964 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 131.715 ms, heap usage 313.732 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4057.087 ms) ======\n"
    },
    "scala-kmeans": {
        "times": [
            366.314,
            198.961,
            192.095,
            190.358,
            185.876,
            179.579,
            195.535,
            185.037,
            189.249,
            175.203,
            186.356,
            173.116,
            189.576,
            176.158,
            176.014
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 103.844 ms, heap usage 451.690 MB -> 141.962 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 581\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 37\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 581\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 26\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 117.65 op/s (117.65 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2278.984 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.808 ms, heap usage 454.348 MB -> 142.239 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 395\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 23\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 581\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 23\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 26\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 359.55 op/s (359.55 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1596.236 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 109.672 ms, heap usage 514.861 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 401\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 581\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 8\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 23\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 26\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 530.97 op/s (530.97 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1389.583 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 119.100 ms, heap usage 512.593 MB -> 142.238 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 581\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 8\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 23\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 26\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 13\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 853.33 op/s (853.33 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1339.513 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 117.518 ms, heap usage 512.712 MB -> 142.241 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 399\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 33\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 581\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 23\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 33\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 13\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 932.40 op/s (932.40 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1381.498 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 103.167 ms, heap usage 506.564 MB -> 142.247 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 581\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 8\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 23\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 33\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 16\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1284.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.739 ms, heap usage 511.441 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 45\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 581\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 23\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 45\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1115.54 op/s (1115.54 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1435.284 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 108.507 ms, heap usage 506.802 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 581\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 23\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 45\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 20\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1592.04 op/s (1592.04 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1372.804 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 146.277 ms, heap usage 513.523 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 348\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 581\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 23\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 45\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 20\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2016.81 op/s (2016.81 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1341.262 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 105.937 ms, heap usage 512.723 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 581\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 23\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 45\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2127.66 op/s (2127.66 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1377.840 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 108.898 ms, heap usage 515.497 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 581\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 23\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 45\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 20\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2334.22 op/s (2334.22 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1303.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 108.214 ms, heap usage 514.819 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 581\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 23\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 45\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 20\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2637.36 op/s (2637.36 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1277.872 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 130.303 ms, heap usage 514.528 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 386\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 581\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 24\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 23\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 45\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 20\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2447.06 op/s (2447.06 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1361.338 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 99.874 ms, heap usage 512.799 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 581\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 23\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 45\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 20\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2842.64 op/s (2842.64 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1311.445 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 98.597 ms, heap usage 511.302 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 581\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 24\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 23\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 45\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 20\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2777.78 op/s (2777.78 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1307.286 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.491 ms, heap usage 442.826 MB -> 153.611 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (29396.914 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 126.958 ms, heap usage 763.230 MB -> 429.402 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15806.656 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 156.833 ms, heap usage 749.098 MB -> 428.255 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (16689.626 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.722 ms, heap usage 530.467 MB -> 428.258 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15184.890 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.764 ms, heap usage 447.158 MB -> 428.404 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17024.116 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 129.019 ms, heap usage 530.334 MB -> 428.442 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (16239.118 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.864 ms, heap usage 529.725 MB -> 426.786 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15684.396 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 120.205 ms, heap usage 746.464 MB -> 426.874 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (15157.344 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 132.632 ms, heap usage 766.925 MB -> 424.978 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (15093.990 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 149.800 ms, heap usage 546.952 MB -> 424.129 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14692.524 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 98.350 ms, heap usage 526.302 MB -> 423.923 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15049.681 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.453 ms, heap usage 809.017 MB -> 422.007 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14419.131 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 110.342 ms, heap usage 541.402 MB -> 422.060 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14766.403 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 98.285 ms, heap usage 524.015 MB -> 422.192 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14960.512 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.042 ms, heap usage 493.227 MB -> 422.759 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14580.682 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 116.890 ms, heap usage 668.742 MB -> 168.123 MB.\n====== als (apache-spark) [default], iteration 0 completed (17233.118 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 201.755 ms, heap usage 320.390 MB -> 192.820 MB.\n====== als (apache-spark) [default], iteration 1 completed (9655.327 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 161.373 ms, heap usage 397.212 MB -> 194.098 MB.\n====== als (apache-spark) [default], iteration 2 completed (8348.382 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.220 ms, heap usage 493.290 MB -> 194.521 MB.\n====== als (apache-spark) [default], iteration 3 completed (8032.212 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.446 ms, heap usage 655.272 MB -> 195.404 MB.\n====== als (apache-spark) [default], iteration 4 completed (8664.910 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 137.889 ms, heap usage 842.615 MB -> 196.019 MB.\n====== als (apache-spark) [default], iteration 5 completed (7869.012 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 173.766 ms, heap usage 580.847 MB -> 196.397 MB.\n====== als (apache-spark) [default], iteration 6 completed (7594.641 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 168.191 ms, heap usage 630.628 MB -> 196.968 MB.\n====== als (apache-spark) [default], iteration 7 completed (7771.682 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 151.094 ms, heap usage 319.744 MB -> 197.121 MB.\n====== als (apache-spark) [default], iteration 8 completed (9732.400 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 154.055 ms, heap usage 612.315 MB -> 197.930 MB.\n====== als (apache-spark) [default], iteration 9 completed (7710.698 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.092 ms, heap usage 616.744 MB -> 198.332 MB.\n====== als (apache-spark) [default], iteration 10 completed (7805.299 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 172.070 ms, heap usage 732.573 MB -> 198.578 MB.\n====== als (apache-spark) [default], iteration 11 completed (7568.420 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.651 ms, heap usage 491.695 MB -> 198.654 MB.\n====== als (apache-spark) [default], iteration 12 completed (7564.793 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 161.139 ms, heap usage 587.096 MB -> 199.047 MB.\n====== als (apache-spark) [default], iteration 13 completed (7778.535 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 151.439 ms, heap usage 571.978 MB -> 199.457 MB.\n====== als (apache-spark) [default], iteration 14 completed (7705.896 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.967 ms, heap usage 688.226 MB -> 179.960 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4191.998 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 153.556 ms, heap usage 507.180 MB -> 179.712 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3867.614 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 127.176 ms, heap usage 467.692 MB -> 179.729 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3943.321 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 128.874 ms, heap usage 310.696 MB -> 179.731 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4467.963 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 131.248 ms, heap usage 310.539 MB -> 179.736 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4104.106 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 121.975 ms, heap usage 303.228 MB -> 179.732 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3693.660 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 119.288 ms, heap usage 312.232 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3821.608 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 116.971 ms, heap usage 309.421 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3727.169 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 133.292 ms, heap usage 318.987 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3687.443 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 129.084 ms, heap usage 316.425 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3478.543 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.872 ms, heap usage 316.233 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3639.285 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 140.124 ms, heap usage 327.236 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (3621.927 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 143.343 ms, heap usage 552.993 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3529.952 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 137.286 ms, heap usage 315.237 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3635.964 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 131.715 ms, heap usage 313.732 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4057.087 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 217.961 ms, heap usage 464.671 MB -> 202.004 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (366.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 141.620 ms, heap usage 230.004 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.961 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 144.526 ms, heap usage 232.036 MB -> 202.035 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.095 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.344 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (190.358 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 143.413 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (185.876 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.223 ms, heap usage 232.036 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (179.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 150.538 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (195.535 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 143.638 ms, heap usage 232.036 MB -> 202.041 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (185.037 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 132.103 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (189.249 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 139.268 ms, heap usage 232.039 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (175.203 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 136.623 ms, heap usage 232.036 MB -> 202.044 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (186.356 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 124.872 ms, heap usage 232.037 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (173.116 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 135.691 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (189.576 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 144.767 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (176.158 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 154.155 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (176.014 ms) ======\n"
    },
    "philosophers": {
        "times": [
            2724.338,
            1039.245,
            970.787,
            1065.352,
            967.255,
            1006.163,
            989.039,
            1033.122,
            981.513,
            980.154,
            920.695,
            975.504,
            934.605,
            989.053,
            1001.2
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 103.844 ms, heap usage 451.690 MB -> 141.962 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 581\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 37\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 581\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 26\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 117.65 op/s (117.65 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2278.984 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.808 ms, heap usage 454.348 MB -> 142.239 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 395\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 23\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 581\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 23\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 26\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 359.55 op/s (359.55 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1596.236 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 109.672 ms, heap usage 514.861 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 401\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 581\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 8\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 23\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 26\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 530.97 op/s (530.97 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1389.583 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 119.100 ms, heap usage 512.593 MB -> 142.238 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 581\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 8\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 23\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 26\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 13\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 853.33 op/s (853.33 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1339.513 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 117.518 ms, heap usage 512.712 MB -> 142.241 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 399\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 33\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 581\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 23\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 33\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 13\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 932.40 op/s (932.40 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1381.498 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 103.167 ms, heap usage 506.564 MB -> 142.247 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 581\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 8\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 23\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 33\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 16\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1284.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.739 ms, heap usage 511.441 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 45\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 581\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 23\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 45\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1115.54 op/s (1115.54 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1435.284 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 108.507 ms, heap usage 506.802 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 581\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 23\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 45\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 20\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1592.04 op/s (1592.04 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1372.804 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 146.277 ms, heap usage 513.523 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 348\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 581\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 23\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 45\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 20\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2016.81 op/s (2016.81 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1341.262 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 105.937 ms, heap usage 512.723 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 581\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 23\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 45\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2127.66 op/s (2127.66 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1377.840 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 108.898 ms, heap usage 515.497 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 581\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 23\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 45\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 20\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2334.22 op/s (2334.22 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1303.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 108.214 ms, heap usage 514.819 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 581\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 23\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 45\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 20\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2637.36 op/s (2637.36 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1277.872 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 130.303 ms, heap usage 514.528 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 386\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 581\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 24\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 23\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 45\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 20\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2447.06 op/s (2447.06 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1361.338 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 99.874 ms, heap usage 512.799 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 581\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 23\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 45\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 20\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2842.64 op/s (2842.64 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1311.445 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 98.597 ms, heap usage 511.302 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 581\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 24\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 23\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 45\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 20\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2777.78 op/s (2777.78 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1307.286 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.491 ms, heap usage 442.826 MB -> 153.611 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (29396.914 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 126.958 ms, heap usage 763.230 MB -> 429.402 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15806.656 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 156.833 ms, heap usage 749.098 MB -> 428.255 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (16689.626 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.722 ms, heap usage 530.467 MB -> 428.258 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15184.890 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.764 ms, heap usage 447.158 MB -> 428.404 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17024.116 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 129.019 ms, heap usage 530.334 MB -> 428.442 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (16239.118 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.864 ms, heap usage 529.725 MB -> 426.786 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15684.396 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 120.205 ms, heap usage 746.464 MB -> 426.874 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (15157.344 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 132.632 ms, heap usage 766.925 MB -> 424.978 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (15093.990 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 149.800 ms, heap usage 546.952 MB -> 424.129 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14692.524 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 98.350 ms, heap usage 526.302 MB -> 423.923 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15049.681 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.453 ms, heap usage 809.017 MB -> 422.007 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14419.131 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 110.342 ms, heap usage 541.402 MB -> 422.060 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14766.403 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 98.285 ms, heap usage 524.015 MB -> 422.192 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14960.512 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.042 ms, heap usage 493.227 MB -> 422.759 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14580.682 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 116.890 ms, heap usage 668.742 MB -> 168.123 MB.\n====== als (apache-spark) [default], iteration 0 completed (17233.118 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 201.755 ms, heap usage 320.390 MB -> 192.820 MB.\n====== als (apache-spark) [default], iteration 1 completed (9655.327 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 161.373 ms, heap usage 397.212 MB -> 194.098 MB.\n====== als (apache-spark) [default], iteration 2 completed (8348.382 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.220 ms, heap usage 493.290 MB -> 194.521 MB.\n====== als (apache-spark) [default], iteration 3 completed (8032.212 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.446 ms, heap usage 655.272 MB -> 195.404 MB.\n====== als (apache-spark) [default], iteration 4 completed (8664.910 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 137.889 ms, heap usage 842.615 MB -> 196.019 MB.\n====== als (apache-spark) [default], iteration 5 completed (7869.012 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 173.766 ms, heap usage 580.847 MB -> 196.397 MB.\n====== als (apache-spark) [default], iteration 6 completed (7594.641 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 168.191 ms, heap usage 630.628 MB -> 196.968 MB.\n====== als (apache-spark) [default], iteration 7 completed (7771.682 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 151.094 ms, heap usage 319.744 MB -> 197.121 MB.\n====== als (apache-spark) [default], iteration 8 completed (9732.400 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 154.055 ms, heap usage 612.315 MB -> 197.930 MB.\n====== als (apache-spark) [default], iteration 9 completed (7710.698 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.092 ms, heap usage 616.744 MB -> 198.332 MB.\n====== als (apache-spark) [default], iteration 10 completed (7805.299 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 172.070 ms, heap usage 732.573 MB -> 198.578 MB.\n====== als (apache-spark) [default], iteration 11 completed (7568.420 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.651 ms, heap usage 491.695 MB -> 198.654 MB.\n====== als (apache-spark) [default], iteration 12 completed (7564.793 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 161.139 ms, heap usage 587.096 MB -> 199.047 MB.\n====== als (apache-spark) [default], iteration 13 completed (7778.535 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 151.439 ms, heap usage 571.978 MB -> 199.457 MB.\n====== als (apache-spark) [default], iteration 14 completed (7705.896 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.967 ms, heap usage 688.226 MB -> 179.960 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4191.998 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 153.556 ms, heap usage 507.180 MB -> 179.712 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3867.614 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 127.176 ms, heap usage 467.692 MB -> 179.729 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3943.321 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 128.874 ms, heap usage 310.696 MB -> 179.731 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4467.963 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 131.248 ms, heap usage 310.539 MB -> 179.736 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4104.106 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 121.975 ms, heap usage 303.228 MB -> 179.732 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3693.660 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 119.288 ms, heap usage 312.232 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3821.608 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 116.971 ms, heap usage 309.421 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3727.169 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 133.292 ms, heap usage 318.987 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3687.443 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 129.084 ms, heap usage 316.425 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3478.543 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.872 ms, heap usage 316.233 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3639.285 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 140.124 ms, heap usage 327.236 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (3621.927 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 143.343 ms, heap usage 552.993 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3529.952 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 137.286 ms, heap usage 315.237 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3635.964 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 131.715 ms, heap usage 313.732 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4057.087 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 217.961 ms, heap usage 464.671 MB -> 202.004 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (366.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 141.620 ms, heap usage 230.004 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.961 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 144.526 ms, heap usage 232.036 MB -> 202.035 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.095 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.344 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (190.358 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 143.413 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (185.876 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.223 ms, heap usage 232.036 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (179.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 150.538 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (195.535 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 143.638 ms, heap usage 232.036 MB -> 202.041 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (185.037 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 132.103 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (189.249 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 139.268 ms, heap usage 232.039 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (175.203 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 136.623 ms, heap usage 232.036 MB -> 202.044 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (186.356 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 124.872 ms, heap usage 232.037 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (173.116 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 135.691 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (189.576 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 144.767 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (176.158 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 154.155 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (176.014 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 162.379 ms, heap usage 233.537 MB -> 181.039 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2724.338 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 154.362 ms, heap usage 524.539 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1039.245 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 124.294 ms, heap usage 534.094 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (970.787 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.638 ms, heap usage 208.533 MB -> 180.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1065.352 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 151.499 ms, heap usage 191.837 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (967.255 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 154.652 ms, heap usage 219.805 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1006.163 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 131.420 ms, heap usage 221.251 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (989.039 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 155.083 ms, heap usage 232.186 MB -> 180.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1033.122 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 138.152 ms, heap usage 205.667 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (981.513 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 146.227 ms, heap usage 237.679 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (980.154 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 130.981 ms, heap usage 217.140 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (920.695 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 128.215 ms, heap usage 194.604 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (975.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 147.430 ms, heap usage 188.574 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (934.605 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 140.620 ms, heap usage 545.138 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (989.053 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 146.207 ms, heap usage 218.129 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1001.200 ms) ======\n"
    },
    "log-regression": {
        "times": [
            8615.911,
            1686.688,
            1551.303,
            1477.912,
            1394.018,
            1228.114,
            1221.746,
            1203.443,
            1142.689,
            1139.412,
            1158.228,
            1096.54,
            1118.666,
            1098.427,
            1136.886
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 103.844 ms, heap usage 451.690 MB -> 141.962 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 581\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 37\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 581\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 26\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 117.65 op/s (117.65 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2278.984 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.808 ms, heap usage 454.348 MB -> 142.239 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 395\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 23\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 581\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 23\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 26\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 359.55 op/s (359.55 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1596.236 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 109.672 ms, heap usage 514.861 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 401\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 581\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 8\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 23\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 26\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 530.97 op/s (530.97 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1389.583 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 119.100 ms, heap usage 512.593 MB -> 142.238 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 581\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 8\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 23\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 26\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 13\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 853.33 op/s (853.33 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1339.513 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 117.518 ms, heap usage 512.712 MB -> 142.241 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 399\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 33\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 581\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 23\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 33\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 13\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 932.40 op/s (932.40 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1381.498 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 103.167 ms, heap usage 506.564 MB -> 142.247 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 581\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 8\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 23\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 33\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 16\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1284.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.739 ms, heap usage 511.441 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 45\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 581\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 23\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 45\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1115.54 op/s (1115.54 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1435.284 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 108.507 ms, heap usage 506.802 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 581\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 23\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 45\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 20\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1592.04 op/s (1592.04 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1372.804 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 146.277 ms, heap usage 513.523 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 348\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 581\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 23\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 45\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 20\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2016.81 op/s (2016.81 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1341.262 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 105.937 ms, heap usage 512.723 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 581\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 23\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 45\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2127.66 op/s (2127.66 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1377.840 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 108.898 ms, heap usage 515.497 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 581\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 23\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 45\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 20\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2334.22 op/s (2334.22 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1303.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 108.214 ms, heap usage 514.819 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 581\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 23\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 45\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 20\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2637.36 op/s (2637.36 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1277.872 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 130.303 ms, heap usage 514.528 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 386\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 581\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 24\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 23\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 45\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 20\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2447.06 op/s (2447.06 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1361.338 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 99.874 ms, heap usage 512.799 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 581\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 23\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 45\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 20\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2842.64 op/s (2842.64 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1311.445 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 98.597 ms, heap usage 511.302 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 581\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 24\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 23\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 45\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 20\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2777.78 op/s (2777.78 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1307.286 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.491 ms, heap usage 442.826 MB -> 153.611 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (29396.914 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 126.958 ms, heap usage 763.230 MB -> 429.402 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15806.656 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 156.833 ms, heap usage 749.098 MB -> 428.255 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (16689.626 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.722 ms, heap usage 530.467 MB -> 428.258 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15184.890 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.764 ms, heap usage 447.158 MB -> 428.404 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17024.116 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 129.019 ms, heap usage 530.334 MB -> 428.442 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (16239.118 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.864 ms, heap usage 529.725 MB -> 426.786 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15684.396 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 120.205 ms, heap usage 746.464 MB -> 426.874 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (15157.344 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 132.632 ms, heap usage 766.925 MB -> 424.978 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (15093.990 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 149.800 ms, heap usage 546.952 MB -> 424.129 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14692.524 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 98.350 ms, heap usage 526.302 MB -> 423.923 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15049.681 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.453 ms, heap usage 809.017 MB -> 422.007 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14419.131 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 110.342 ms, heap usage 541.402 MB -> 422.060 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14766.403 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 98.285 ms, heap usage 524.015 MB -> 422.192 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14960.512 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.042 ms, heap usage 493.227 MB -> 422.759 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14580.682 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 116.890 ms, heap usage 668.742 MB -> 168.123 MB.\n====== als (apache-spark) [default], iteration 0 completed (17233.118 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 201.755 ms, heap usage 320.390 MB -> 192.820 MB.\n====== als (apache-spark) [default], iteration 1 completed (9655.327 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 161.373 ms, heap usage 397.212 MB -> 194.098 MB.\n====== als (apache-spark) [default], iteration 2 completed (8348.382 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.220 ms, heap usage 493.290 MB -> 194.521 MB.\n====== als (apache-spark) [default], iteration 3 completed (8032.212 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.446 ms, heap usage 655.272 MB -> 195.404 MB.\n====== als (apache-spark) [default], iteration 4 completed (8664.910 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 137.889 ms, heap usage 842.615 MB -> 196.019 MB.\n====== als (apache-spark) [default], iteration 5 completed (7869.012 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 173.766 ms, heap usage 580.847 MB -> 196.397 MB.\n====== als (apache-spark) [default], iteration 6 completed (7594.641 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 168.191 ms, heap usage 630.628 MB -> 196.968 MB.\n====== als (apache-spark) [default], iteration 7 completed (7771.682 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 151.094 ms, heap usage 319.744 MB -> 197.121 MB.\n====== als (apache-spark) [default], iteration 8 completed (9732.400 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 154.055 ms, heap usage 612.315 MB -> 197.930 MB.\n====== als (apache-spark) [default], iteration 9 completed (7710.698 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.092 ms, heap usage 616.744 MB -> 198.332 MB.\n====== als (apache-spark) [default], iteration 10 completed (7805.299 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 172.070 ms, heap usage 732.573 MB -> 198.578 MB.\n====== als (apache-spark) [default], iteration 11 completed (7568.420 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.651 ms, heap usage 491.695 MB -> 198.654 MB.\n====== als (apache-spark) [default], iteration 12 completed (7564.793 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 161.139 ms, heap usage 587.096 MB -> 199.047 MB.\n====== als (apache-spark) [default], iteration 13 completed (7778.535 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 151.439 ms, heap usage 571.978 MB -> 199.457 MB.\n====== als (apache-spark) [default], iteration 14 completed (7705.896 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.967 ms, heap usage 688.226 MB -> 179.960 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4191.998 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 153.556 ms, heap usage 507.180 MB -> 179.712 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3867.614 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 127.176 ms, heap usage 467.692 MB -> 179.729 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3943.321 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 128.874 ms, heap usage 310.696 MB -> 179.731 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4467.963 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 131.248 ms, heap usage 310.539 MB -> 179.736 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4104.106 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 121.975 ms, heap usage 303.228 MB -> 179.732 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3693.660 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 119.288 ms, heap usage 312.232 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3821.608 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 116.971 ms, heap usage 309.421 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3727.169 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 133.292 ms, heap usage 318.987 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3687.443 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 129.084 ms, heap usage 316.425 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3478.543 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.872 ms, heap usage 316.233 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3639.285 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 140.124 ms, heap usage 327.236 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (3621.927 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 143.343 ms, heap usage 552.993 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3529.952 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 137.286 ms, heap usage 315.237 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3635.964 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 131.715 ms, heap usage 313.732 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4057.087 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 217.961 ms, heap usage 464.671 MB -> 202.004 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (366.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 141.620 ms, heap usage 230.004 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.961 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 144.526 ms, heap usage 232.036 MB -> 202.035 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.095 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.344 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (190.358 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 143.413 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (185.876 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.223 ms, heap usage 232.036 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (179.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 150.538 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (195.535 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 143.638 ms, heap usage 232.036 MB -> 202.041 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (185.037 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 132.103 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (189.249 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 139.268 ms, heap usage 232.039 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (175.203 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 136.623 ms, heap usage 232.036 MB -> 202.044 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (186.356 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 124.872 ms, heap usage 232.037 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (173.116 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 135.691 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (189.576 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 144.767 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (176.158 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 154.155 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (176.014 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 162.379 ms, heap usage 233.537 MB -> 181.039 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2724.338 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 154.362 ms, heap usage 524.539 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1039.245 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 124.294 ms, heap usage 534.094 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (970.787 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.638 ms, heap usage 208.533 MB -> 180.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1065.352 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 151.499 ms, heap usage 191.837 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (967.255 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 154.652 ms, heap usage 219.805 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1006.163 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 131.420 ms, heap usage 221.251 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (989.039 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 155.083 ms, heap usage 232.186 MB -> 180.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1033.122 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 138.152 ms, heap usage 205.667 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (981.513 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 146.227 ms, heap usage 237.679 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (980.154 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 130.981 ms, heap usage 217.140 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (920.695 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 128.215 ms, heap usage 194.604 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (975.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 147.430 ms, heap usage 188.574 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (934.605 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 140.620 ms, heap usage 545.138 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (989.053 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 146.207 ms, heap usage 218.129 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1001.200 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 146.182 ms, heap usage 500.631 MB -> 193.032 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8615.911 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 250.685 ms, heap usage 747.752 MB -> 275.851 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1686.688 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 143.378 ms, heap usage 692.319 MB -> 276.602 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1551.303 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 157.250 ms, heap usage 739.655 MB -> 277.188 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1477.912 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.925 ms, heap usage 707.294 MB -> 277.467 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1394.018 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 141.727 ms, heap usage 691.148 MB -> 277.691 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1228.114 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 134.531 ms, heap usage 509.820 MB -> 277.341 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1221.746 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 167.236 ms, heap usage 662.660 MB -> 278.090 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1203.443 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 157.334 ms, heap usage 638.773 MB -> 278.168 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1142.689 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 165.588 ms, heap usage 677.486 MB -> 278.579 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1139.412 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.080 ms, heap usage 611.982 MB -> 278.517 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1158.228 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 152.916 ms, heap usage 688.329 MB -> 278.847 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1096.540 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 161.129 ms, heap usage 558.537 MB -> 278.617 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1118.666 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 163.560 ms, heap usage 660.623 MB -> 279.187 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1098.427 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 142.601 ms, heap usage 650.865 MB -> 279.348 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1136.886 ms) ======\n"
    },
    "gauss-mix": {
        "times": [
            16460.184,
            11850.035,
            11799.779,
            12066.079,
            11094.842,
            11792.336,
            10840.068,
            11686.644,
            10575.17,
            10684.449,
            10500.407,
            11585.488,
            10182.419,
            10693.935,
            10494.784
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 103.844 ms, heap usage 451.690 MB -> 141.962 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 581\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 37\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 581\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 26\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 117.65 op/s (117.65 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2278.984 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.808 ms, heap usage 454.348 MB -> 142.239 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 395\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 23\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 581\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 23\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 26\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 359.55 op/s (359.55 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1596.236 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 109.672 ms, heap usage 514.861 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 401\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 581\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 8\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 23\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 26\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 530.97 op/s (530.97 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1389.583 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 119.100 ms, heap usage 512.593 MB -> 142.238 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 581\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 8\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 23\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 26\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 13\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 853.33 op/s (853.33 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1339.513 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 117.518 ms, heap usage 512.712 MB -> 142.241 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 399\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 33\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 581\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 23\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 33\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 13\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 932.40 op/s (932.40 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1381.498 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 103.167 ms, heap usage 506.564 MB -> 142.247 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 581\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 8\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 23\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 33\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 16\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1284.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.739 ms, heap usage 511.441 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 45\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 581\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 23\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 45\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1115.54 op/s (1115.54 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1435.284 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 108.507 ms, heap usage 506.802 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 581\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 23\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 45\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 20\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1592.04 op/s (1592.04 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1372.804 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 146.277 ms, heap usage 513.523 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 348\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 581\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 23\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 45\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 20\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2016.81 op/s (2016.81 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1341.262 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 105.937 ms, heap usage 512.723 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 581\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 23\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 45\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2127.66 op/s (2127.66 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1377.840 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 108.898 ms, heap usage 515.497 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 581\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 23\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 45\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 20\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2334.22 op/s (2334.22 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1303.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 108.214 ms, heap usage 514.819 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 581\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 23\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 45\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 20\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2637.36 op/s (2637.36 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1277.872 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 130.303 ms, heap usage 514.528 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 386\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 581\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 24\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 23\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 45\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 20\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2447.06 op/s (2447.06 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1361.338 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 99.874 ms, heap usage 512.799 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 581\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 23\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 45\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 20\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2842.64 op/s (2842.64 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1311.445 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 98.597 ms, heap usage 511.302 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 581\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 24\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 23\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 45\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 20\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2777.78 op/s (2777.78 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1307.286 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.491 ms, heap usage 442.826 MB -> 153.611 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (29396.914 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 126.958 ms, heap usage 763.230 MB -> 429.402 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15806.656 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 156.833 ms, heap usage 749.098 MB -> 428.255 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (16689.626 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.722 ms, heap usage 530.467 MB -> 428.258 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15184.890 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.764 ms, heap usage 447.158 MB -> 428.404 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17024.116 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 129.019 ms, heap usage 530.334 MB -> 428.442 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (16239.118 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.864 ms, heap usage 529.725 MB -> 426.786 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15684.396 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 120.205 ms, heap usage 746.464 MB -> 426.874 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (15157.344 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 132.632 ms, heap usage 766.925 MB -> 424.978 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (15093.990 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 149.800 ms, heap usage 546.952 MB -> 424.129 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14692.524 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 98.350 ms, heap usage 526.302 MB -> 423.923 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15049.681 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.453 ms, heap usage 809.017 MB -> 422.007 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14419.131 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 110.342 ms, heap usage 541.402 MB -> 422.060 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14766.403 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 98.285 ms, heap usage 524.015 MB -> 422.192 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14960.512 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.042 ms, heap usage 493.227 MB -> 422.759 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14580.682 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 116.890 ms, heap usage 668.742 MB -> 168.123 MB.\n====== als (apache-spark) [default], iteration 0 completed (17233.118 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 201.755 ms, heap usage 320.390 MB -> 192.820 MB.\n====== als (apache-spark) [default], iteration 1 completed (9655.327 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 161.373 ms, heap usage 397.212 MB -> 194.098 MB.\n====== als (apache-spark) [default], iteration 2 completed (8348.382 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.220 ms, heap usage 493.290 MB -> 194.521 MB.\n====== als (apache-spark) [default], iteration 3 completed (8032.212 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.446 ms, heap usage 655.272 MB -> 195.404 MB.\n====== als (apache-spark) [default], iteration 4 completed (8664.910 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 137.889 ms, heap usage 842.615 MB -> 196.019 MB.\n====== als (apache-spark) [default], iteration 5 completed (7869.012 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 173.766 ms, heap usage 580.847 MB -> 196.397 MB.\n====== als (apache-spark) [default], iteration 6 completed (7594.641 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 168.191 ms, heap usage 630.628 MB -> 196.968 MB.\n====== als (apache-spark) [default], iteration 7 completed (7771.682 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 151.094 ms, heap usage 319.744 MB -> 197.121 MB.\n====== als (apache-spark) [default], iteration 8 completed (9732.400 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 154.055 ms, heap usage 612.315 MB -> 197.930 MB.\n====== als (apache-spark) [default], iteration 9 completed (7710.698 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.092 ms, heap usage 616.744 MB -> 198.332 MB.\n====== als (apache-spark) [default], iteration 10 completed (7805.299 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 172.070 ms, heap usage 732.573 MB -> 198.578 MB.\n====== als (apache-spark) [default], iteration 11 completed (7568.420 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.651 ms, heap usage 491.695 MB -> 198.654 MB.\n====== als (apache-spark) [default], iteration 12 completed (7564.793 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 161.139 ms, heap usage 587.096 MB -> 199.047 MB.\n====== als (apache-spark) [default], iteration 13 completed (7778.535 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 151.439 ms, heap usage 571.978 MB -> 199.457 MB.\n====== als (apache-spark) [default], iteration 14 completed (7705.896 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.967 ms, heap usage 688.226 MB -> 179.960 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4191.998 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 153.556 ms, heap usage 507.180 MB -> 179.712 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3867.614 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 127.176 ms, heap usage 467.692 MB -> 179.729 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3943.321 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 128.874 ms, heap usage 310.696 MB -> 179.731 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4467.963 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 131.248 ms, heap usage 310.539 MB -> 179.736 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4104.106 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 121.975 ms, heap usage 303.228 MB -> 179.732 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3693.660 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 119.288 ms, heap usage 312.232 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3821.608 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 116.971 ms, heap usage 309.421 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3727.169 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 133.292 ms, heap usage 318.987 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3687.443 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 129.084 ms, heap usage 316.425 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3478.543 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.872 ms, heap usage 316.233 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3639.285 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 140.124 ms, heap usage 327.236 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (3621.927 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 143.343 ms, heap usage 552.993 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3529.952 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 137.286 ms, heap usage 315.237 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3635.964 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 131.715 ms, heap usage 313.732 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4057.087 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 217.961 ms, heap usage 464.671 MB -> 202.004 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (366.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 141.620 ms, heap usage 230.004 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.961 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 144.526 ms, heap usage 232.036 MB -> 202.035 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.095 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.344 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (190.358 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 143.413 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (185.876 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.223 ms, heap usage 232.036 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (179.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 150.538 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (195.535 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 143.638 ms, heap usage 232.036 MB -> 202.041 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (185.037 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 132.103 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (189.249 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 139.268 ms, heap usage 232.039 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (175.203 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 136.623 ms, heap usage 232.036 MB -> 202.044 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (186.356 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 124.872 ms, heap usage 232.037 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (173.116 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 135.691 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (189.576 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 144.767 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (176.158 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 154.155 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (176.014 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 162.379 ms, heap usage 233.537 MB -> 181.039 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2724.338 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 154.362 ms, heap usage 524.539 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1039.245 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 124.294 ms, heap usage 534.094 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (970.787 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.638 ms, heap usage 208.533 MB -> 180.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1065.352 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 151.499 ms, heap usage 191.837 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (967.255 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 154.652 ms, heap usage 219.805 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1006.163 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 131.420 ms, heap usage 221.251 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (989.039 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 155.083 ms, heap usage 232.186 MB -> 180.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1033.122 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 138.152 ms, heap usage 205.667 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (981.513 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 146.227 ms, heap usage 237.679 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (980.154 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 130.981 ms, heap usage 217.140 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (920.695 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 128.215 ms, heap usage 194.604 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (975.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 147.430 ms, heap usage 188.574 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (934.605 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 140.620 ms, heap usage 545.138 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (989.053 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 146.207 ms, heap usage 218.129 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1001.200 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 146.182 ms, heap usage 500.631 MB -> 193.032 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8615.911 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 250.685 ms, heap usage 747.752 MB -> 275.851 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1686.688 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 143.378 ms, heap usage 692.319 MB -> 276.602 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1551.303 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 157.250 ms, heap usage 739.655 MB -> 277.188 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1477.912 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.925 ms, heap usage 707.294 MB -> 277.467 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1394.018 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 141.727 ms, heap usage 691.148 MB -> 277.691 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1228.114 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 134.531 ms, heap usage 509.820 MB -> 277.341 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1221.746 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 167.236 ms, heap usage 662.660 MB -> 278.090 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1203.443 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 157.334 ms, heap usage 638.773 MB -> 278.168 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1142.689 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 165.588 ms, heap usage 677.486 MB -> 278.579 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1139.412 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.080 ms, heap usage 611.982 MB -> 278.517 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1158.228 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 152.916 ms, heap usage 688.329 MB -> 278.847 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1096.540 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 161.129 ms, heap usage 558.537 MB -> 278.617 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1118.666 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 163.560 ms, heap usage 660.623 MB -> 279.187 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1098.427 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 142.601 ms, heap usage 650.865 MB -> 279.348 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1136.886 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 162.673 ms, heap usage 720.633 MB -> 213.283 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (16460.184 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 184.462 ms, heap usage 669.718 MB -> 220.046 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11850.035 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.201 ms, heap usage 466.273 MB -> 221.635 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (11799.779 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 239.971 ms, heap usage 617.594 MB -> 223.439 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (12066.079 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 149.365 ms, heap usage 572.366 MB -> 224.647 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (11094.842 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 162.777 ms, heap usage 282.385 MB -> 223.920 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (11792.336 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 197.326 ms, heap usage 809.827 MB -> 224.636 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10840.068 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 185.190 ms, heap usage 465.109 MB -> 224.250 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (11686.644 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 156.654 ms, heap usage 557.687 MB -> 224.714 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10575.170 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 192.109 ms, heap usage 789.094 MB -> 224.513 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10684.449 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 192.540 ms, heap usage 476.510 MB -> 224.198 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10500.407 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 171.903 ms, heap usage 443.887 MB -> 224.508 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (11585.488 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 170.488 ms, heap usage 287.562 MB -> 224.181 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10182.419 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 176.994 ms, heap usage 614.308 MB -> 224.451 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10693.935 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 165.189 ms, heap usage 628.068 MB -> 224.510 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10494.784 ms) ======\n"
    },
    "mnemonics": {
        "times": [
            4580.295,
            4244.819,
            4748.84,
            5228.698,
            4870.159,
            4605.8,
            4612.867,
            4700.55,
            4375.818,
            4779.025,
            4606.693,
            4534.249,
            4534.162,
            4573.796,
            4157.53
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 103.844 ms, heap usage 451.690 MB -> 141.962 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 581\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 37\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 581\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 26\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 117.65 op/s (117.65 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2278.984 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.808 ms, heap usage 454.348 MB -> 142.239 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 395\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 23\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 581\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 23\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 26\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 359.55 op/s (359.55 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1596.236 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 109.672 ms, heap usage 514.861 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 401\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 581\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 8\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 23\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 26\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 530.97 op/s (530.97 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1389.583 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 119.100 ms, heap usage 512.593 MB -> 142.238 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 581\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 8\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 23\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 26\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 13\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 853.33 op/s (853.33 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1339.513 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 117.518 ms, heap usage 512.712 MB -> 142.241 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 399\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 33\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 581\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 23\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 33\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 13\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 932.40 op/s (932.40 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1381.498 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 103.167 ms, heap usage 506.564 MB -> 142.247 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 581\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 8\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 23\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 33\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 16\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1284.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.739 ms, heap usage 511.441 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 45\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 581\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 23\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 45\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1115.54 op/s (1115.54 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1435.284 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 108.507 ms, heap usage 506.802 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 581\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 23\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 45\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 20\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1592.04 op/s (1592.04 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1372.804 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 146.277 ms, heap usage 513.523 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 348\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 581\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 23\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 45\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 20\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2016.81 op/s (2016.81 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1341.262 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 105.937 ms, heap usage 512.723 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 581\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 23\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 45\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2127.66 op/s (2127.66 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1377.840 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 108.898 ms, heap usage 515.497 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 581\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 23\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 45\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 20\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2334.22 op/s (2334.22 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1303.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 108.214 ms, heap usage 514.819 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 581\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 23\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 45\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 20\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2637.36 op/s (2637.36 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1277.872 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 130.303 ms, heap usage 514.528 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 386\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 581\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 24\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 23\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 45\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 20\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2447.06 op/s (2447.06 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1361.338 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 99.874 ms, heap usage 512.799 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 581\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 23\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 45\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 20\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2842.64 op/s (2842.64 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1311.445 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 98.597 ms, heap usage 511.302 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 581\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 24\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 23\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 45\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 20\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2777.78 op/s (2777.78 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1307.286 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.491 ms, heap usage 442.826 MB -> 153.611 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (29396.914 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 126.958 ms, heap usage 763.230 MB -> 429.402 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15806.656 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 156.833 ms, heap usage 749.098 MB -> 428.255 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (16689.626 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.722 ms, heap usage 530.467 MB -> 428.258 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15184.890 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.764 ms, heap usage 447.158 MB -> 428.404 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17024.116 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 129.019 ms, heap usage 530.334 MB -> 428.442 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (16239.118 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.864 ms, heap usage 529.725 MB -> 426.786 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15684.396 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 120.205 ms, heap usage 746.464 MB -> 426.874 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (15157.344 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 132.632 ms, heap usage 766.925 MB -> 424.978 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (15093.990 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 149.800 ms, heap usage 546.952 MB -> 424.129 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14692.524 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 98.350 ms, heap usage 526.302 MB -> 423.923 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15049.681 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.453 ms, heap usage 809.017 MB -> 422.007 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14419.131 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 110.342 ms, heap usage 541.402 MB -> 422.060 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14766.403 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 98.285 ms, heap usage 524.015 MB -> 422.192 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14960.512 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.042 ms, heap usage 493.227 MB -> 422.759 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14580.682 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 116.890 ms, heap usage 668.742 MB -> 168.123 MB.\n====== als (apache-spark) [default], iteration 0 completed (17233.118 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 201.755 ms, heap usage 320.390 MB -> 192.820 MB.\n====== als (apache-spark) [default], iteration 1 completed (9655.327 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 161.373 ms, heap usage 397.212 MB -> 194.098 MB.\n====== als (apache-spark) [default], iteration 2 completed (8348.382 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.220 ms, heap usage 493.290 MB -> 194.521 MB.\n====== als (apache-spark) [default], iteration 3 completed (8032.212 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.446 ms, heap usage 655.272 MB -> 195.404 MB.\n====== als (apache-spark) [default], iteration 4 completed (8664.910 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 137.889 ms, heap usage 842.615 MB -> 196.019 MB.\n====== als (apache-spark) [default], iteration 5 completed (7869.012 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 173.766 ms, heap usage 580.847 MB -> 196.397 MB.\n====== als (apache-spark) [default], iteration 6 completed (7594.641 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 168.191 ms, heap usage 630.628 MB -> 196.968 MB.\n====== als (apache-spark) [default], iteration 7 completed (7771.682 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 151.094 ms, heap usage 319.744 MB -> 197.121 MB.\n====== als (apache-spark) [default], iteration 8 completed (9732.400 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 154.055 ms, heap usage 612.315 MB -> 197.930 MB.\n====== als (apache-spark) [default], iteration 9 completed (7710.698 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.092 ms, heap usage 616.744 MB -> 198.332 MB.\n====== als (apache-spark) [default], iteration 10 completed (7805.299 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 172.070 ms, heap usage 732.573 MB -> 198.578 MB.\n====== als (apache-spark) [default], iteration 11 completed (7568.420 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.651 ms, heap usage 491.695 MB -> 198.654 MB.\n====== als (apache-spark) [default], iteration 12 completed (7564.793 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 161.139 ms, heap usage 587.096 MB -> 199.047 MB.\n====== als (apache-spark) [default], iteration 13 completed (7778.535 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 151.439 ms, heap usage 571.978 MB -> 199.457 MB.\n====== als (apache-spark) [default], iteration 14 completed (7705.896 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.967 ms, heap usage 688.226 MB -> 179.960 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4191.998 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 153.556 ms, heap usage 507.180 MB -> 179.712 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3867.614 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 127.176 ms, heap usage 467.692 MB -> 179.729 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3943.321 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 128.874 ms, heap usage 310.696 MB -> 179.731 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4467.963 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 131.248 ms, heap usage 310.539 MB -> 179.736 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4104.106 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 121.975 ms, heap usage 303.228 MB -> 179.732 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3693.660 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 119.288 ms, heap usage 312.232 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3821.608 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 116.971 ms, heap usage 309.421 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3727.169 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 133.292 ms, heap usage 318.987 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3687.443 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 129.084 ms, heap usage 316.425 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3478.543 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.872 ms, heap usage 316.233 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3639.285 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 140.124 ms, heap usage 327.236 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (3621.927 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 143.343 ms, heap usage 552.993 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3529.952 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 137.286 ms, heap usage 315.237 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3635.964 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 131.715 ms, heap usage 313.732 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4057.087 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 217.961 ms, heap usage 464.671 MB -> 202.004 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (366.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 141.620 ms, heap usage 230.004 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.961 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 144.526 ms, heap usage 232.036 MB -> 202.035 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.095 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.344 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (190.358 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 143.413 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (185.876 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.223 ms, heap usage 232.036 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (179.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 150.538 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (195.535 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 143.638 ms, heap usage 232.036 MB -> 202.041 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (185.037 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 132.103 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (189.249 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 139.268 ms, heap usage 232.039 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (175.203 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 136.623 ms, heap usage 232.036 MB -> 202.044 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (186.356 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 124.872 ms, heap usage 232.037 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (173.116 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 135.691 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (189.576 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 144.767 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (176.158 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 154.155 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (176.014 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 162.379 ms, heap usage 233.537 MB -> 181.039 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2724.338 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 154.362 ms, heap usage 524.539 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1039.245 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 124.294 ms, heap usage 534.094 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (970.787 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.638 ms, heap usage 208.533 MB -> 180.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1065.352 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 151.499 ms, heap usage 191.837 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (967.255 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 154.652 ms, heap usage 219.805 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1006.163 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 131.420 ms, heap usage 221.251 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (989.039 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 155.083 ms, heap usage 232.186 MB -> 180.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1033.122 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 138.152 ms, heap usage 205.667 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (981.513 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 146.227 ms, heap usage 237.679 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (980.154 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 130.981 ms, heap usage 217.140 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (920.695 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 128.215 ms, heap usage 194.604 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (975.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 147.430 ms, heap usage 188.574 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (934.605 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 140.620 ms, heap usage 545.138 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (989.053 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 146.207 ms, heap usage 218.129 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1001.200 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 146.182 ms, heap usage 500.631 MB -> 193.032 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8615.911 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 250.685 ms, heap usage 747.752 MB -> 275.851 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1686.688 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 143.378 ms, heap usage 692.319 MB -> 276.602 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1551.303 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 157.250 ms, heap usage 739.655 MB -> 277.188 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1477.912 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.925 ms, heap usage 707.294 MB -> 277.467 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1394.018 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 141.727 ms, heap usage 691.148 MB -> 277.691 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1228.114 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 134.531 ms, heap usage 509.820 MB -> 277.341 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1221.746 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 167.236 ms, heap usage 662.660 MB -> 278.090 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1203.443 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 157.334 ms, heap usage 638.773 MB -> 278.168 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1142.689 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 165.588 ms, heap usage 677.486 MB -> 278.579 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1139.412 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.080 ms, heap usage 611.982 MB -> 278.517 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1158.228 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 152.916 ms, heap usage 688.329 MB -> 278.847 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1096.540 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 161.129 ms, heap usage 558.537 MB -> 278.617 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1118.666 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 163.560 ms, heap usage 660.623 MB -> 279.187 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1098.427 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 142.601 ms, heap usage 650.865 MB -> 279.348 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1136.886 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 162.673 ms, heap usage 720.633 MB -> 213.283 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (16460.184 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 184.462 ms, heap usage 669.718 MB -> 220.046 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11850.035 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.201 ms, heap usage 466.273 MB -> 221.635 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (11799.779 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 239.971 ms, heap usage 617.594 MB -> 223.439 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (12066.079 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 149.365 ms, heap usage 572.366 MB -> 224.647 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (11094.842 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 162.777 ms, heap usage 282.385 MB -> 223.920 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (11792.336 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 197.326 ms, heap usage 809.827 MB -> 224.636 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10840.068 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 185.190 ms, heap usage 465.109 MB -> 224.250 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (11686.644 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 156.654 ms, heap usage 557.687 MB -> 224.714 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10575.170 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 192.109 ms, heap usage 789.094 MB -> 224.513 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10684.449 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 192.540 ms, heap usage 476.510 MB -> 224.198 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10500.407 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 171.903 ms, heap usage 443.887 MB -> 224.508 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (11585.488 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 170.488 ms, heap usage 287.562 MB -> 224.181 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10182.419 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 176.994 ms, heap usage 614.308 MB -> 224.451 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10693.935 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 165.189 ms, heap usage 628.068 MB -> 224.510 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10494.784 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 156.615 ms, heap usage 710.090 MB -> 215.818 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4580.295 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 156.577 ms, heap usage 351.504 MB -> 215.670 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4244.819 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.829 ms, heap usage 349.030 MB -> 215.665 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4748.840 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 150.914 ms, heap usage 346.853 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 3 completed (5228.698 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 151.013 ms, heap usage 345.353 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4870.159 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 159.756 ms, heap usage 350.680 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4605.800 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 236.645 ms, heap usage 351.175 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4612.867 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 167.327 ms, heap usage 351.181 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4700.550 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 181.928 ms, heap usage 351.177 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4375.818 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 150.998 ms, heap usage 348.102 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4779.025 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 160.433 ms, heap usage 345.854 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4606.693 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 164.419 ms, heap usage 345.102 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4534.249 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 160.286 ms, heap usage 344.605 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4534.162 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 172.103 ms, heap usage 345.602 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4573.796 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 161.121 ms, heap usage 344.606 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4157.530 ms) ======\n"
    },
    "dotty": {
        "times": [
            12028.325,
            5322.744,
            4290.477,
            3617.915,
            3331.858,
            2828.753,
            2644.613,
            2479.575,
            2344.216,
            2220.832,
            2061.537,
            1995.957,
            1862.615,
            1899.631,
            1687.317
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 103.844 ms, heap usage 451.690 MB -> 141.962 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 581\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 37\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 581\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 26\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 117.65 op/s (117.65 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2278.984 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.808 ms, heap usage 454.348 MB -> 142.239 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 395\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 23\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 581\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 23\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 26\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 359.55 op/s (359.55 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1596.236 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 109.672 ms, heap usage 514.861 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 401\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 581\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 8\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 23\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 26\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 530.97 op/s (530.97 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1389.583 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 119.100 ms, heap usage 512.593 MB -> 142.238 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 581\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 8\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 23\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 26\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 13\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 853.33 op/s (853.33 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1339.513 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 117.518 ms, heap usage 512.712 MB -> 142.241 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 399\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 33\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 581\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 23\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 33\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 13\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 932.40 op/s (932.40 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1381.498 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 103.167 ms, heap usage 506.564 MB -> 142.247 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 581\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 8\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 23\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 33\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 16\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1284.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.739 ms, heap usage 511.441 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 45\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 581\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 23\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 45\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1115.54 op/s (1115.54 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1435.284 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 108.507 ms, heap usage 506.802 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 581\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 23\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 45\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 20\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1592.04 op/s (1592.04 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1372.804 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 146.277 ms, heap usage 513.523 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 348\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 581\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 23\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 45\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 20\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2016.81 op/s (2016.81 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1341.262 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 105.937 ms, heap usage 512.723 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 581\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 23\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 45\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2127.66 op/s (2127.66 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1377.840 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 108.898 ms, heap usage 515.497 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 581\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 23\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 45\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 20\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2334.22 op/s (2334.22 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1303.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 108.214 ms, heap usage 514.819 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 581\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 23\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 45\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 20\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2637.36 op/s (2637.36 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1277.872 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 130.303 ms, heap usage 514.528 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 386\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 581\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 24\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 23\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 45\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 20\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2447.06 op/s (2447.06 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1361.338 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 99.874 ms, heap usage 512.799 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 581\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 23\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 45\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 20\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2842.64 op/s (2842.64 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1311.445 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 98.597 ms, heap usage 511.302 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 581\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 24\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 23\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 45\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 20\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2777.78 op/s (2777.78 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1307.286 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.491 ms, heap usage 442.826 MB -> 153.611 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (29396.914 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 126.958 ms, heap usage 763.230 MB -> 429.402 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15806.656 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 156.833 ms, heap usage 749.098 MB -> 428.255 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (16689.626 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.722 ms, heap usage 530.467 MB -> 428.258 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15184.890 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.764 ms, heap usage 447.158 MB -> 428.404 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17024.116 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 129.019 ms, heap usage 530.334 MB -> 428.442 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (16239.118 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.864 ms, heap usage 529.725 MB -> 426.786 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15684.396 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 120.205 ms, heap usage 746.464 MB -> 426.874 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (15157.344 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 132.632 ms, heap usage 766.925 MB -> 424.978 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (15093.990 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 149.800 ms, heap usage 546.952 MB -> 424.129 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14692.524 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 98.350 ms, heap usage 526.302 MB -> 423.923 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15049.681 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.453 ms, heap usage 809.017 MB -> 422.007 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14419.131 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 110.342 ms, heap usage 541.402 MB -> 422.060 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14766.403 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 98.285 ms, heap usage 524.015 MB -> 422.192 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14960.512 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.042 ms, heap usage 493.227 MB -> 422.759 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14580.682 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 116.890 ms, heap usage 668.742 MB -> 168.123 MB.\n====== als (apache-spark) [default], iteration 0 completed (17233.118 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 201.755 ms, heap usage 320.390 MB -> 192.820 MB.\n====== als (apache-spark) [default], iteration 1 completed (9655.327 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 161.373 ms, heap usage 397.212 MB -> 194.098 MB.\n====== als (apache-spark) [default], iteration 2 completed (8348.382 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.220 ms, heap usage 493.290 MB -> 194.521 MB.\n====== als (apache-spark) [default], iteration 3 completed (8032.212 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.446 ms, heap usage 655.272 MB -> 195.404 MB.\n====== als (apache-spark) [default], iteration 4 completed (8664.910 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 137.889 ms, heap usage 842.615 MB -> 196.019 MB.\n====== als (apache-spark) [default], iteration 5 completed (7869.012 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 173.766 ms, heap usage 580.847 MB -> 196.397 MB.\n====== als (apache-spark) [default], iteration 6 completed (7594.641 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 168.191 ms, heap usage 630.628 MB -> 196.968 MB.\n====== als (apache-spark) [default], iteration 7 completed (7771.682 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 151.094 ms, heap usage 319.744 MB -> 197.121 MB.\n====== als (apache-spark) [default], iteration 8 completed (9732.400 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 154.055 ms, heap usage 612.315 MB -> 197.930 MB.\n====== als (apache-spark) [default], iteration 9 completed (7710.698 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.092 ms, heap usage 616.744 MB -> 198.332 MB.\n====== als (apache-spark) [default], iteration 10 completed (7805.299 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 172.070 ms, heap usage 732.573 MB -> 198.578 MB.\n====== als (apache-spark) [default], iteration 11 completed (7568.420 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.651 ms, heap usage 491.695 MB -> 198.654 MB.\n====== als (apache-spark) [default], iteration 12 completed (7564.793 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 161.139 ms, heap usage 587.096 MB -> 199.047 MB.\n====== als (apache-spark) [default], iteration 13 completed (7778.535 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 151.439 ms, heap usage 571.978 MB -> 199.457 MB.\n====== als (apache-spark) [default], iteration 14 completed (7705.896 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.967 ms, heap usage 688.226 MB -> 179.960 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4191.998 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 153.556 ms, heap usage 507.180 MB -> 179.712 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3867.614 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 127.176 ms, heap usage 467.692 MB -> 179.729 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3943.321 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 128.874 ms, heap usage 310.696 MB -> 179.731 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4467.963 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 131.248 ms, heap usage 310.539 MB -> 179.736 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4104.106 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 121.975 ms, heap usage 303.228 MB -> 179.732 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3693.660 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 119.288 ms, heap usage 312.232 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3821.608 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 116.971 ms, heap usage 309.421 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3727.169 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 133.292 ms, heap usage 318.987 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3687.443 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 129.084 ms, heap usage 316.425 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3478.543 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.872 ms, heap usage 316.233 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3639.285 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 140.124 ms, heap usage 327.236 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (3621.927 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 143.343 ms, heap usage 552.993 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3529.952 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 137.286 ms, heap usage 315.237 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3635.964 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 131.715 ms, heap usage 313.732 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4057.087 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 217.961 ms, heap usage 464.671 MB -> 202.004 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (366.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 141.620 ms, heap usage 230.004 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.961 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 144.526 ms, heap usage 232.036 MB -> 202.035 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.095 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.344 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (190.358 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 143.413 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (185.876 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.223 ms, heap usage 232.036 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (179.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 150.538 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (195.535 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 143.638 ms, heap usage 232.036 MB -> 202.041 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (185.037 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 132.103 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (189.249 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 139.268 ms, heap usage 232.039 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (175.203 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 136.623 ms, heap usage 232.036 MB -> 202.044 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (186.356 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 124.872 ms, heap usage 232.037 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (173.116 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 135.691 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (189.576 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 144.767 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (176.158 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 154.155 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (176.014 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 162.379 ms, heap usage 233.537 MB -> 181.039 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2724.338 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 154.362 ms, heap usage 524.539 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1039.245 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 124.294 ms, heap usage 534.094 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (970.787 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.638 ms, heap usage 208.533 MB -> 180.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1065.352 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 151.499 ms, heap usage 191.837 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (967.255 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 154.652 ms, heap usage 219.805 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1006.163 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 131.420 ms, heap usage 221.251 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (989.039 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 155.083 ms, heap usage 232.186 MB -> 180.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1033.122 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 138.152 ms, heap usage 205.667 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (981.513 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 146.227 ms, heap usage 237.679 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (980.154 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 130.981 ms, heap usage 217.140 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (920.695 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 128.215 ms, heap usage 194.604 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (975.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 147.430 ms, heap usage 188.574 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (934.605 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 140.620 ms, heap usage 545.138 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (989.053 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 146.207 ms, heap usage 218.129 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1001.200 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 146.182 ms, heap usage 500.631 MB -> 193.032 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8615.911 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 250.685 ms, heap usage 747.752 MB -> 275.851 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1686.688 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 143.378 ms, heap usage 692.319 MB -> 276.602 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1551.303 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 157.250 ms, heap usage 739.655 MB -> 277.188 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1477.912 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.925 ms, heap usage 707.294 MB -> 277.467 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1394.018 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 141.727 ms, heap usage 691.148 MB -> 277.691 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1228.114 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 134.531 ms, heap usage 509.820 MB -> 277.341 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1221.746 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 167.236 ms, heap usage 662.660 MB -> 278.090 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1203.443 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 157.334 ms, heap usage 638.773 MB -> 278.168 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1142.689 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 165.588 ms, heap usage 677.486 MB -> 278.579 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1139.412 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.080 ms, heap usage 611.982 MB -> 278.517 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1158.228 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 152.916 ms, heap usage 688.329 MB -> 278.847 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1096.540 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 161.129 ms, heap usage 558.537 MB -> 278.617 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1118.666 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 163.560 ms, heap usage 660.623 MB -> 279.187 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1098.427 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 142.601 ms, heap usage 650.865 MB -> 279.348 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1136.886 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 162.673 ms, heap usage 720.633 MB -> 213.283 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (16460.184 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 184.462 ms, heap usage 669.718 MB -> 220.046 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11850.035 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.201 ms, heap usage 466.273 MB -> 221.635 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (11799.779 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 239.971 ms, heap usage 617.594 MB -> 223.439 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (12066.079 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 149.365 ms, heap usage 572.366 MB -> 224.647 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (11094.842 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 162.777 ms, heap usage 282.385 MB -> 223.920 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (11792.336 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 197.326 ms, heap usage 809.827 MB -> 224.636 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10840.068 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 185.190 ms, heap usage 465.109 MB -> 224.250 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (11686.644 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 156.654 ms, heap usage 557.687 MB -> 224.714 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10575.170 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 192.109 ms, heap usage 789.094 MB -> 224.513 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10684.449 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 192.540 ms, heap usage 476.510 MB -> 224.198 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10500.407 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 171.903 ms, heap usage 443.887 MB -> 224.508 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (11585.488 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 170.488 ms, heap usage 287.562 MB -> 224.181 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10182.419 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 176.994 ms, heap usage 614.308 MB -> 224.451 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10693.935 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 165.189 ms, heap usage 628.068 MB -> 224.510 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10494.784 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 156.615 ms, heap usage 710.090 MB -> 215.818 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4580.295 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 156.577 ms, heap usage 351.504 MB -> 215.670 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4244.819 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.829 ms, heap usage 349.030 MB -> 215.665 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4748.840 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 150.914 ms, heap usage 346.853 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 3 completed (5228.698 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 151.013 ms, heap usage 345.353 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4870.159 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 159.756 ms, heap usage 350.680 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4605.800 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 236.645 ms, heap usage 351.175 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4612.867 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 167.327 ms, heap usage 351.181 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4700.550 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 181.928 ms, heap usage 351.177 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4375.818 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 150.998 ms, heap usage 348.102 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4779.025 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 160.433 ms, heap usage 345.854 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4606.693 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 164.419 ms, heap usage 345.102 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4534.249 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 160.286 ms, heap usage 344.605 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4534.162 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 172.103 ms, heap usage 345.602 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4573.796 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 161.121 ms, heap usage 344.606 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4157.530 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 211.078 ms, heap usage 369.602 MB -> 218.265 MB.\n====== dotty (scala) [default], iteration 0 completed (12028.325 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 225.045 ms, heap usage 428.265 MB -> 234.960 MB.\n====== dotty (scala) [default], iteration 1 completed (5322.744 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 182.906 ms, heap usage 472.481 MB -> 234.930 MB.\n====== dotty (scala) [default], iteration 2 completed (4290.477 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 169.253 ms, heap usage 468.687 MB -> 234.942 MB.\n====== dotty (scala) [default], iteration 3 completed (3617.915 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 159.307 ms, heap usage 465.496 MB -> 234.954 MB.\n====== dotty (scala) [default], iteration 4 completed (3331.858 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 166.101 ms, heap usage 462.904 MB -> 234.954 MB.\n====== dotty (scala) [default], iteration 5 completed (2828.753 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 169.985 ms, heap usage 461.483 MB -> 234.967 MB.\n====== dotty (scala) [default], iteration 6 completed (2644.613 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 181.736 ms, heap usage 459.965 MB -> 234.982 MB.\n====== dotty (scala) [default], iteration 7 completed (2479.575 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 174.734 ms, heap usage 458.492 MB -> 234.980 MB.\n====== dotty (scala) [default], iteration 8 completed (2344.216 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 173.627 ms, heap usage 456.998 MB -> 234.991 MB.\n====== dotty (scala) [default], iteration 9 completed (2220.832 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 173.655 ms, heap usage 455.996 MB -> 234.999 MB.\n====== dotty (scala) [default], iteration 10 completed (2061.537 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 177.079 ms, heap usage 454.989 MB -> 234.998 MB.\n====== dotty (scala) [default], iteration 11 completed (1995.957 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 201.577 ms, heap usage 454.016 MB -> 234.999 MB.\n====== dotty (scala) [default], iteration 12 completed (1862.615 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.839 ms, heap usage 452.517 MB -> 235.015 MB.\n====== dotty (scala) [default], iteration 13 completed (1899.631 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 180.248 ms, heap usage 452.020 MB -> 235.029 MB.\n====== dotty (scala) [default], iteration 14 completed (1687.317 ms) ======\n"
    },
    "finagle-chirper": {
        "times": [
            14735.378,
            7197.528,
            4094.327,
            4189.868,
            3599.842,
            3235.206,
            3154.482,
            3189.227,
            3076.809,
            3199.226,
            2980.133,
            3271.963,
            2969.496,
            3128.971,
            2887.96
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 56.313 ms, heap usage 105.033 MB -> 75.992 MB.\n====== scrabble (functional) [default], iteration 0 completed (1260.399 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.128 ms, heap usage 170.209 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 1 completed (500.915 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 62.542 ms, heap usage 111.068 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 2 completed (513.441 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 59.666 ms, heap usage 298.281 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 3 completed (511.129 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 69.615 ms, heap usage 136.594 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 4 completed (531.449 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.761 ms, heap usage 355.080 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 5 completed (505.043 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 84.493 ms, heap usage 171.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 6 completed (587.697 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 88.744 ms, heap usage 377.839 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 7 completed (494.347 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 64.734 ms, heap usage 113.876 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 8 completed (488.209 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 59.410 ms, heap usage 301.439 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 9 completed (518.536 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 59.672 ms, heap usage 125.806 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 10 completed (498.799 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.266 ms, heap usage 314.134 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 11 completed (515.591 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 78.059 ms, heap usage 380.541 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 12 completed (519.712 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 66.071 ms, heap usage 119.748 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 13 completed (450.274 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 61.465 ms, heap usage 299.740 MB -> 76.078 MB.\n====== scrabble (functional) [default], iteration 14 completed (521.364 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 22.966 ms, heap usage 669.000 MB -> 29.799 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18511.185 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 132.997 ms, heap usage 412.256 MB -> 149.257 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10044.920 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 118.357 ms, heap usage 675.556 MB -> 149.430 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9982.335 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 121.931 ms, heap usage 458.872 MB -> 149.562 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10196.538 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 117.984 ms, heap usage 623.404 MB -> 149.674 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (10168.844 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 115.227 ms, heap usage 556.538 MB -> 149.785 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10107.680 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 125.031 ms, heap usage 643.073 MB -> 149.629 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (9917.320 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 118.415 ms, heap usage 566.049 MB -> 149.164 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10206.346 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.793 ms, heap usage 654.398 MB -> 149.277 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10157.299 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.361 ms, heap usage 502.239 MB -> 149.387 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10545.125 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 147.728 ms, heap usage 582.825 MB -> 149.502 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11505.968 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 125.306 ms, heap usage 616.546 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10370.768 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 117.943 ms, heap usage 435.878 MB -> 147.210 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10386.126 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 122.793 ms, heap usage 566.895 MB -> 148.285 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10083.439 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 116.222 ms, heap usage 436.695 MB -> 147.399 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11605.007 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 37.939 ms, heap usage 582.546 MB -> 30.981 MB.\n====== future-genetic (functional) [default], iteration 0 completed (2942.451 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 29.768 ms, heap usage 72.227 MB -> 31.789 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2172.303 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.687 ms, heap usage 64.644 MB -> 31.788 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2199.587 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 35.150 ms, heap usage 79.167 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2132.978 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.563 ms, heap usage 65.074 MB -> 31.806 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2161.581 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 30.450 ms, heap usage 108.320 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2188.488 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 34.641 ms, heap usage 52.479 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2205.790 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 35.463 ms, heap usage 51.889 MB -> 31.807 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2170.488 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.118 ms, heap usage 48.883 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2182.347 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.640 ms, heap usage 91.875 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2172.139 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 36.350 ms, heap usage 88.353 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2085.475 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 28.713 ms, heap usage 42.406 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2070.233 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 26.254 ms, heap usage 147.920 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 12 completed (2145.005 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.446 ms, heap usage 129.774 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2002.951 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 28.908 ms, heap usage 112.319 MB -> 31.808 MB.\n====== future-genetic (functional) [default], iteration 14 completed (2062.103 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.529 ms, heap usage 98.045 MB -> 32.607 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (16944.781 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 254.782 ms, heap usage 504.729 MB -> 125.377 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (12876.264 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 173.188 ms, heap usage 420.889 MB -> 121.258 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (12945.423 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 267.447 ms, heap usage 388.218 MB -> 127.864 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13315.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 188.624 ms, heap usage 568.855 MB -> 95.975 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (12958.639 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 208.400 ms, heap usage 559.428 MB -> 107.571 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12531.292 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 241.712 ms, heap usage 459.916 MB -> 117.944 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (12723.312 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 100.755 ms, heap usage 432.372 MB -> 76.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12457.003 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 266.293 ms, heap usage 585.872 MB -> 127.076 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (12765.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 216.070 ms, heap usage 509.681 MB -> 117.256 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12106.428 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 199.071 ms, heap usage 444.563 MB -> 111.247 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (12746.729 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 193.578 ms, heap usage 470.871 MB -> 139.382 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13629.068 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 202.039 ms, heap usage 688.607 MB -> 99.685 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (12445.012 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 254.513 ms, heap usage 634.263 MB -> 123.537 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (12815.520 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.619 ms, heap usage 583.585 MB -> 74.849 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (12987.348 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 92.411 ms, heap usage 173.261 MB -> 87.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (21299.546 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.124 ms, heap usage 230.713 MB -> 97.547 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15844.484 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 98.617 ms, heap usage 187.819 MB -> 99.606 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (15111.527 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 84.511 ms, heap usage 286.898 MB -> 102.676 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13813.125 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 79.754 ms, heap usage 483.526 MB -> 100.955 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (14164.558 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 87.691 ms, heap usage 467.941 MB -> 100.887 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (13109.307 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 88.120 ms, heap usage 232.575 MB -> 102.097 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (14030.934 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 89.896 ms, heap usage 391.986 MB -> 101.060 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (12669.133 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 80.123 ms, heap usage 175.401 MB -> 101.066 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (12899.586 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.300 ms, heap usage 149.610 MB -> 100.930 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13821.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 80.615 ms, heap usage 462.066 MB -> 101.366 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13064.400 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.143 ms, heap usage 459.156 MB -> 101.125 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12353.615 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 91.512 ms, heap usage 208.414 MB -> 102.211 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12872.139 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 94.742 ms, heap usage 386.714 MB -> 101.362 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13134.158 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 102.488 ms, heap usage 582.674 MB -> 104.623 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12632.403 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 66.181 ms, heap usage 521.720 MB -> 59.752 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3303.606 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 64.047 ms, heap usage 142.069 MB -> 59.598 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2444.992 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 62.922 ms, heap usage 122.098 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2335.554 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 56.565 ms, heap usage 123.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2347.801 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 59.400 ms, heap usage 125.099 MB -> 59.599 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2356.140 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 61.824 ms, heap usage 124.099 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2279.369 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 53.565 ms, heap usage 125.100 MB -> 59.600 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2277.575 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 55.325 ms, heap usage 124.600 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2212.531 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 51.457 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2183.129 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 61.494 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2290.124 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 52.365 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2216.711 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 44.710 ms, heap usage 123.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2720.941 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.250 ms, heap usage 124.601 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2510.755 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 49.261 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2310.478 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 50.356 ms, heap usage 124.101 MB -> 59.601 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2306.278 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 68.195 ms, heap usage 242.707 MB -> 65.024 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4341.801 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 142.254 ms, heap usage 421.503 MB -> 211.175 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1154.303 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.376 ms, heap usage 237.883 MB -> 211.240 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1490.082 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 148.988 ms, heap usage 486.479 MB -> 211.290 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (1044.499 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 131.571 ms, heap usage 338.631 MB -> 211.338 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1033.359 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 124.645 ms, heap usage 588.447 MB -> 211.386 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (964.696 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 131.811 ms, heap usage 400.699 MB -> 211.433 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (998.268 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 122.426 ms, heap usage 366.157 MB -> 211.487 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (970.329 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 188.749 ms, heap usage 215.009 MB -> 211.519 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (877.270 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 142.621 ms, heap usage 217.926 MB -> 211.566 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (870.213 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.029 ms, heap usage 645.269 MB -> 211.643 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (909.703 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 129.936 ms, heap usage 355.237 MB -> 211.714 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (908.796 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.073 ms, heap usage 362.829 MB -> 211.768 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (864.614 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 166.824 ms, heap usage 361.388 MB -> 211.807 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (911.735 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 124.208 ms, heap usage 362.410 MB -> 211.838 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (917.260 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 145.386 ms, heap usage 566.102 MB -> 148.857 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5526.680 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 113.801 ms, heap usage 184.135 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5380.021 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 115.407 ms, heap usage 447.106 MB -> 148.044 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5220.163 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 137.509 ms, heap usage 300.369 MB -> 148.066 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5684.148 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 157.313 ms, heap usage 251.925 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5884.879 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 112.303 ms, heap usage 196.512 MB -> 148.068 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5421.984 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 132.367 ms, heap usage 467.998 MB -> 147.425 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5438.575 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 113.375 ms, heap usage 279.752 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5342.875 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 123.455 ms, heap usage 493.269 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5492.622 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 126.597 ms, heap usage 201.285 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5334.400 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 147.254 ms, heap usage 389.295 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5082.397 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 134.662 ms, heap usage 442.817 MB -> 147.467 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5206.306 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 128.271 ms, heap usage 279.137 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5269.530 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 112.851 ms, heap usage 280.569 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (6212.675 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 120.949 ms, heap usage 483.454 MB -> 147.466 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5269.957 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 103.656 ms, heap usage 368.501 MB -> 98.741 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (677.920 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 118.982 ms, heap usage 252.239 MB -> 99.106 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (264.981 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 83.342 ms, heap usage 240.651 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (211.910 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 75.012 ms, heap usage 241.604 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (214.154 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 70.747 ms, heap usage 241.104 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (238.985 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 79.737 ms, heap usage 242.582 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (159.716 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 82.875 ms, heap usage 242.740 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (190.796 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 83.420 ms, heap usage 242.907 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (165.574 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 75.340 ms, heap usage 243.055 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (179.012 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 72.462 ms, heap usage 242.422 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (124.650 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.434 ms, heap usage 242.448 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (137.128 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 71.777 ms, heap usage 242.941 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (131.751 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 77.587 ms, heap usage 242.458 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (116.306 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 77.726 ms, heap usage 242.442 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (150.380 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 116.034 ms, heap usage 242.496 MB -> 99.104 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (143.318 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 65.824 ms, heap usage 115.238 MB -> 101.563 MB.\n====== db-shootout (database) [default], iteration 0 completed (7884.697 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 60.027 ms, heap usage 146.539 MB -> 111.003 MB.\n====== db-shootout (database) [default], iteration 1 completed (8071.680 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 61.178 ms, heap usage 484.003 MB -> 110.508 MB.\n====== db-shootout (database) [default], iteration 2 completed (7644.943 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.908 ms, heap usage 331.228 MB -> 111.854 MB.\n====== db-shootout (database) [default], iteration 3 completed (7393.037 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 105.057 ms, heap usage 239.951 MB -> 113.634 MB.\n====== db-shootout (database) [default], iteration 4 completed (8495.247 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 62.432 ms, heap usage 282.029 MB -> 110.211 MB.\n====== db-shootout (database) [default], iteration 5 completed (8164.957 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 73.435 ms, heap usage 424.361 MB -> 113.188 MB.\n====== db-shootout (database) [default], iteration 6 completed (8068.827 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 63.496 ms, heap usage 167.028 MB -> 113.206 MB.\n====== db-shootout (database) [default], iteration 7 completed (7660.084 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 74.816 ms, heap usage 685.720 MB -> 113.371 MB.\n====== db-shootout (database) [default], iteration 8 completed (7326.670 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 61.324 ms, heap usage 164.388 MB -> 109.793 MB.\n====== db-shootout (database) [default], iteration 9 completed (7898.791 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 59.963 ms, heap usage 167.049 MB -> 112.639 MB.\n====== db-shootout (database) [default], iteration 10 completed (7448.520 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 118.275 ms, heap usage 171.743 MB -> 113.175 MB.\n====== db-shootout (database) [default], iteration 11 completed (7663.274 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 151.592 ms, heap usage 231.344 MB -> 113.345 MB.\n====== db-shootout (database) [default], iteration 12 completed (7838.497 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 330.595 ms, heap usage 282.494 MB -> 111.344 MB.\n====== db-shootout (database) [default], iteration 13 completed (7489.091 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 75.366 ms, heap usage 299.872 MB -> 113.342 MB.\n====== db-shootout (database) [default], iteration 14 completed (7622.498 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :44079 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 74.854 ms, heap usage 312.782 MB -> 112.318 MB.\n====== finagle-http (web) [default], iteration 0 completed (19045.905 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 89.690 ms, heap usage 163.156 MB -> 115.963 MB.\n====== finagle-http (web) [default], iteration 1 completed (15928.493 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 113.908 ms, heap usage 243.334 MB -> 116.105 MB.\n====== finagle-http (web) [default], iteration 2 completed (12188.296 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 93.169 ms, heap usage 218.228 MB -> 116.052 MB.\n====== finagle-http (web) [default], iteration 3 completed (9225.186 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 138.270 ms, heap usage 212.415 MB -> 116.186 MB.\n====== finagle-http (web) [default], iteration 4 completed (7298.156 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 94.597 ms, heap usage 192.777 MB -> 116.197 MB.\n====== finagle-http (web) [default], iteration 5 completed (5480.716 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.218 ms, heap usage 174.783 MB -> 116.200 MB.\n====== finagle-http (web) [default], iteration 6 completed (4692.887 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 109.071 ms, heap usage 163.356 MB -> 117.605 MB.\n====== finagle-http (web) [default], iteration 7 completed (4137.273 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 93.175 ms, heap usage 148.277 MB -> 116.209 MB.\n====== finagle-http (web) [default], iteration 8 completed (3911.501 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 81.123 ms, heap usage 149.020 MB -> 116.216 MB.\n====== finagle-http (web) [default], iteration 9 completed (3664.081 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 83.023 ms, heap usage 142.220 MB -> 116.270 MB.\n====== finagle-http (web) [default], iteration 10 completed (3458.658 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.531 ms, heap usage 142.350 MB -> 116.227 MB.\n====== finagle-http (web) [default], iteration 11 completed (3322.966 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 89.715 ms, heap usage 141.521 MB -> 116.275 MB.\n====== finagle-http (web) [default], iteration 12 completed (3432.301 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 86.810 ms, heap usage 142.093 MB -> 116.279 MB.\n====== finagle-http (web) [default], iteration 13 completed (3341.451 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 85.411 ms, heap usage 143.385 MB -> 116.283 MB.\n====== finagle-http (web) [default], iteration 14 completed (3524.757 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 73.542 ms, heap usage 156.460 MB -> 117.293 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15205.783 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 83.457 ms, heap usage 641.761 MB -> 112.964 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12722.488 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 76.522 ms, heap usage 741.452 MB -> 112.967 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12163.502 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 82.327 ms, heap usage 663.329 MB -> 113.722 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12123.680 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 85.331 ms, heap usage 641.733 MB -> 113.723 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (13076.337 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 88.946 ms, heap usage 644.280 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12274.826 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 74.445 ms, heap usage 637.148 MB -> 113.701 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12266.514 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 88.007 ms, heap usage 635.568 MB -> 113.705 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11962.809 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 68.753 ms, heap usage 628.958 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12105.464 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 71.704 ms, heap usage 626.730 MB -> 113.702 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (12349.913 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 86.629 ms, heap usage 648.187 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (12211.099 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 70.187 ms, heap usage 634.331 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (12192.669 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.647 ms, heap usage 637.393 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12311.546 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 85.667 ms, heap usage 644.181 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12109.985 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 80.242 ms, heap usage 638.273 MB -> 113.703 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12168.415 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 80.959 ms, heap usage 222.134 MB -> 126.681 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8970.648 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 197.381 ms, heap usage 264.366 MB -> 158.947 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2423.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 117.248 ms, heap usage 473.925 MB -> 160.515 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1482.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 107.777 ms, heap usage 484.187 MB -> 187.506 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1505.609 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 91.451 ms, heap usage 462.116 MB -> 160.283 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1414.794 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 97.724 ms, heap usage 463.432 MB -> 160.502 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1423.540 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 93.347 ms, heap usage 471.006 MB -> 160.694 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1349.964 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 87.759 ms, heap usage 481.946 MB -> 160.972 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1283.631 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 101.427 ms, heap usage 433.661 MB -> 161.084 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1335.868 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 106.293 ms, heap usage 450.241 MB -> 161.211 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1318.886 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 175.719 ms, heap usage 431.169 MB -> 161.354 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1320.882 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.703 ms, heap usage 572.727 MB -> 161.633 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1344.416 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 90.134 ms, heap usage 474.119 MB -> 161.466 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1273.510 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 110.107 ms, heap usage 465.013 MB -> 161.731 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1350.527 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 95.099 ms, heap usage 440.955 MB -> 161.726 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1279.412 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 103.844 ms, heap usage 451.690 MB -> 141.962 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 581\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 37\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 581\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 8\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 26\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 117.65 op/s (117.65 op/s including failed)\nElapsed time: 0.68 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2278.984 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.808 ms, heap usage 454.348 MB -> 142.239 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 395\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 26\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 23\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 581\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 8\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 23\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 26\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 359.55 op/s (359.55 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1596.236 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 109.672 ms, heap usage 514.861 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 401\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 581\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 8\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 23\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 26\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 530.97 op/s (530.97 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1389.583 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 119.100 ms, heap usage 512.593 MB -> 142.238 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 367\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 581\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 8\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 23\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 26\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 13\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 853.33 op/s (853.33 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1339.513 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 117.518 ms, heap usage 512.712 MB -> 142.241 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 399\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 33\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 581\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 23\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 33\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 13\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 932.40 op/s (932.40 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1381.498 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 103.167 ms, heap usage 506.564 MB -> 142.247 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 581\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 8\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 23\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 33\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 16\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1259.84 op/s (1259.84 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1284.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.739 ms, heap usage 511.441 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 45\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 581\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 15\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 23\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 45\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1115.54 op/s (1115.54 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1435.284 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 108.507 ms, heap usage 506.802 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 581\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 15\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 23\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 45\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 20\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1592.04 op/s (1592.04 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1372.804 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 146.277 ms, heap usage 513.523 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 348\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 581\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 15\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 23\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 45\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 20\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2016.81 op/s (2016.81 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1341.262 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 105.937 ms, heap usage 512.723 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 581\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 15\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 23\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 45\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 20\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2127.66 op/s (2127.66 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1377.840 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 108.898 ms, heap usage 515.497 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 359\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 581\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 15\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 23\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 45\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 20\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2334.22 op/s (2334.22 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1303.193 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 108.214 ms, heap usage 514.819 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 354\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 24\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 581\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 24\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 23\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 45\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 20\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2637.36 op/s (2637.36 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1277.872 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 130.303 ms, heap usage 514.528 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 386\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 581\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 24\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 23\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 45\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 20\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2447.06 op/s (2447.06 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1361.338 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 99.874 ms, heap usage 512.799 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 581\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 24\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 23\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 45\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 20\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2842.64 op/s (2842.64 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1311.445 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 98.597 ms, heap usage 511.302 MB -> 142.240 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 581\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 24\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 23\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 45\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 20\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2777.78 op/s (2777.78 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1307.286 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.491 ms, heap usage 442.826 MB -> 153.611 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (29396.914 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 126.958 ms, heap usage 763.230 MB -> 429.402 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (15806.656 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 156.833 ms, heap usage 749.098 MB -> 428.255 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (16689.626 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 146.722 ms, heap usage 530.467 MB -> 428.258 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15184.890 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 126.764 ms, heap usage 447.158 MB -> 428.404 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17024.116 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 129.019 ms, heap usage 530.334 MB -> 428.442 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (16239.118 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.864 ms, heap usage 529.725 MB -> 426.786 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (15684.396 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 120.205 ms, heap usage 746.464 MB -> 426.874 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (15157.344 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 132.632 ms, heap usage 766.925 MB -> 424.978 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (15093.990 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 149.800 ms, heap usage 546.952 MB -> 424.129 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (14692.524 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 98.350 ms, heap usage 526.302 MB -> 423.923 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15049.681 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.453 ms, heap usage 809.017 MB -> 422.007 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14419.131 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 110.342 ms, heap usage 541.402 MB -> 422.060 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14766.403 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 98.285 ms, heap usage 524.015 MB -> 422.192 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14960.512 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.042 ms, heap usage 493.227 MB -> 422.759 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14580.682 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 116.890 ms, heap usage 668.742 MB -> 168.123 MB.\n====== als (apache-spark) [default], iteration 0 completed (17233.118 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 201.755 ms, heap usage 320.390 MB -> 192.820 MB.\n====== als (apache-spark) [default], iteration 1 completed (9655.327 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 161.373 ms, heap usage 397.212 MB -> 194.098 MB.\n====== als (apache-spark) [default], iteration 2 completed (8348.382 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.220 ms, heap usage 493.290 MB -> 194.521 MB.\n====== als (apache-spark) [default], iteration 3 completed (8032.212 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 173.446 ms, heap usage 655.272 MB -> 195.404 MB.\n====== als (apache-spark) [default], iteration 4 completed (8664.910 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 137.889 ms, heap usage 842.615 MB -> 196.019 MB.\n====== als (apache-spark) [default], iteration 5 completed (7869.012 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 173.766 ms, heap usage 580.847 MB -> 196.397 MB.\n====== als (apache-spark) [default], iteration 6 completed (7594.641 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 168.191 ms, heap usage 630.628 MB -> 196.968 MB.\n====== als (apache-spark) [default], iteration 7 completed (7771.682 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 151.094 ms, heap usage 319.744 MB -> 197.121 MB.\n====== als (apache-spark) [default], iteration 8 completed (9732.400 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 154.055 ms, heap usage 612.315 MB -> 197.930 MB.\n====== als (apache-spark) [default], iteration 9 completed (7710.698 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.092 ms, heap usage 616.744 MB -> 198.332 MB.\n====== als (apache-spark) [default], iteration 10 completed (7805.299 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 172.070 ms, heap usage 732.573 MB -> 198.578 MB.\n====== als (apache-spark) [default], iteration 11 completed (7568.420 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.651 ms, heap usage 491.695 MB -> 198.654 MB.\n====== als (apache-spark) [default], iteration 12 completed (7564.793 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 161.139 ms, heap usage 587.096 MB -> 199.047 MB.\n====== als (apache-spark) [default], iteration 13 completed (7778.535 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 151.439 ms, heap usage 571.978 MB -> 199.457 MB.\n====== als (apache-spark) [default], iteration 14 completed (7705.896 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.967 ms, heap usage 688.226 MB -> 179.960 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4191.998 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 153.556 ms, heap usage 507.180 MB -> 179.712 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3867.614 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 127.176 ms, heap usage 467.692 MB -> 179.729 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (3943.321 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 128.874 ms, heap usage 310.696 MB -> 179.731 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4467.963 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 131.248 ms, heap usage 310.539 MB -> 179.736 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (4104.106 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 121.975 ms, heap usage 303.228 MB -> 179.732 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3693.660 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 119.288 ms, heap usage 312.232 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3821.608 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 116.971 ms, heap usage 309.421 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3727.169 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 133.292 ms, heap usage 318.987 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3687.443 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 129.084 ms, heap usage 316.425 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3478.543 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 127.872 ms, heap usage 316.233 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3639.285 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 140.124 ms, heap usage 327.236 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (3621.927 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 143.343 ms, heap usage 552.993 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3529.952 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 137.286 ms, heap usage 315.237 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3635.964 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 131.715 ms, heap usage 313.732 MB -> 179.735 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (4057.087 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 217.961 ms, heap usage 464.671 MB -> 202.004 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (366.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 141.620 ms, heap usage 230.004 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.961 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 144.526 ms, heap usage 232.036 MB -> 202.035 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (192.095 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 133.344 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (190.358 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 143.413 ms, heap usage 232.038 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (185.876 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.223 ms, heap usage 232.036 MB -> 202.038 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (179.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 150.538 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (195.535 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 143.638 ms, heap usage 232.036 MB -> 202.041 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (185.037 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 132.103 ms, heap usage 232.036 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (189.249 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 139.268 ms, heap usage 232.039 MB -> 202.036 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (175.203 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 136.623 ms, heap usage 232.036 MB -> 202.044 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (186.356 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 124.872 ms, heap usage 232.037 MB -> 202.039 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (173.116 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 135.691 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (189.576 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 144.767 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (176.158 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 154.155 ms, heap usage 232.037 MB -> 202.037 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (176.014 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 162.379 ms, heap usage 233.537 MB -> 181.039 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2724.338 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 154.362 ms, heap usage 524.539 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1039.245 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 124.294 ms, heap usage 534.094 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (970.787 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.638 ms, heap usage 208.533 MB -> 180.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1065.352 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 151.499 ms, heap usage 191.837 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (967.255 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 154.652 ms, heap usage 219.805 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1006.163 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 131.420 ms, heap usage 221.251 MB -> 180.960 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (989.039 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 155.083 ms, heap usage 232.186 MB -> 180.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1033.122 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 138.152 ms, heap usage 205.667 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (981.513 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 146.227 ms, heap usage 237.679 MB -> 180.963 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (980.154 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 130.981 ms, heap usage 217.140 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (920.695 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 128.215 ms, heap usage 194.604 MB -> 180.961 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (975.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 147.430 ms, heap usage 188.574 MB -> 180.962 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (934.605 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 140.620 ms, heap usage 545.138 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (989.053 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 146.207 ms, heap usage 218.129 MB -> 180.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1001.200 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 146.182 ms, heap usage 500.631 MB -> 193.032 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8615.911 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 250.685 ms, heap usage 747.752 MB -> 275.851 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1686.688 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 143.378 ms, heap usage 692.319 MB -> 276.602 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1551.303 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 157.250 ms, heap usage 739.655 MB -> 277.188 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1477.912 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.925 ms, heap usage 707.294 MB -> 277.467 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1394.018 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 141.727 ms, heap usage 691.148 MB -> 277.691 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1228.114 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 134.531 ms, heap usage 509.820 MB -> 277.341 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1221.746 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 167.236 ms, heap usage 662.660 MB -> 278.090 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1203.443 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 157.334 ms, heap usage 638.773 MB -> 278.168 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1142.689 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 165.588 ms, heap usage 677.486 MB -> 278.579 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1139.412 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.080 ms, heap usage 611.982 MB -> 278.517 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1158.228 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 152.916 ms, heap usage 688.329 MB -> 278.847 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1096.540 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 161.129 ms, heap usage 558.537 MB -> 278.617 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1118.666 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 163.560 ms, heap usage 660.623 MB -> 279.187 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1098.427 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 142.601 ms, heap usage 650.865 MB -> 279.348 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1136.886 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 162.673 ms, heap usage 720.633 MB -> 213.283 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (16460.184 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 184.462 ms, heap usage 669.718 MB -> 220.046 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11850.035 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.201 ms, heap usage 466.273 MB -> 221.635 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (11799.779 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 239.971 ms, heap usage 617.594 MB -> 223.439 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (12066.079 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 149.365 ms, heap usage 572.366 MB -> 224.647 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (11094.842 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 162.777 ms, heap usage 282.385 MB -> 223.920 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (11792.336 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 197.326 ms, heap usage 809.827 MB -> 224.636 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10840.068 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 185.190 ms, heap usage 465.109 MB -> 224.250 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (11686.644 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 156.654 ms, heap usage 557.687 MB -> 224.714 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10575.170 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 192.109 ms, heap usage 789.094 MB -> 224.513 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10684.449 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 192.540 ms, heap usage 476.510 MB -> 224.198 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10500.407 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 171.903 ms, heap usage 443.887 MB -> 224.508 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (11585.488 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 170.488 ms, heap usage 287.562 MB -> 224.181 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10182.419 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 176.994 ms, heap usage 614.308 MB -> 224.451 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10693.935 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 165.189 ms, heap usage 628.068 MB -> 224.510 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10494.784 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 156.615 ms, heap usage 710.090 MB -> 215.818 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4580.295 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 156.577 ms, heap usage 351.504 MB -> 215.670 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4244.819 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 153.829 ms, heap usage 349.030 MB -> 215.665 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4748.840 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 150.914 ms, heap usage 346.853 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 3 completed (5228.698 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 151.013 ms, heap usage 345.353 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4870.159 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 159.756 ms, heap usage 350.680 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4605.800 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 236.645 ms, heap usage 351.175 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4612.867 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 167.327 ms, heap usage 351.181 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4700.550 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 181.928 ms, heap usage 351.177 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4375.818 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 150.998 ms, heap usage 348.102 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4779.025 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 160.433 ms, heap usage 345.854 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4606.693 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 164.419 ms, heap usage 345.102 MB -> 215.661 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4534.249 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 160.286 ms, heap usage 344.605 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4534.162 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 172.103 ms, heap usage 345.602 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4573.796 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 161.121 ms, heap usage 344.606 MB -> 215.663 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4157.530 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 211.078 ms, heap usage 369.602 MB -> 218.265 MB.\n====== dotty (scala) [default], iteration 0 completed (12028.325 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 225.045 ms, heap usage 428.265 MB -> 234.960 MB.\n====== dotty (scala) [default], iteration 1 completed (5322.744 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 182.906 ms, heap usage 472.481 MB -> 234.930 MB.\n====== dotty (scala) [default], iteration 2 completed (4290.477 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 169.253 ms, heap usage 468.687 MB -> 234.942 MB.\n====== dotty (scala) [default], iteration 3 completed (3617.915 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 159.307 ms, heap usage 465.496 MB -> 234.954 MB.\n====== dotty (scala) [default], iteration 4 completed (3331.858 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 166.101 ms, heap usage 462.904 MB -> 234.954 MB.\n====== dotty (scala) [default], iteration 5 completed (2828.753 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 169.985 ms, heap usage 461.483 MB -> 234.967 MB.\n====== dotty (scala) [default], iteration 6 completed (2644.613 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 181.736 ms, heap usage 459.965 MB -> 234.982 MB.\n====== dotty (scala) [default], iteration 7 completed (2479.575 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 174.734 ms, heap usage 458.492 MB -> 234.980 MB.\n====== dotty (scala) [default], iteration 8 completed (2344.216 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 173.627 ms, heap usage 456.998 MB -> 234.991 MB.\n====== dotty (scala) [default], iteration 9 completed (2220.832 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 173.655 ms, heap usage 455.996 MB -> 234.999 MB.\n====== dotty (scala) [default], iteration 10 completed (2061.537 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 177.079 ms, heap usage 454.989 MB -> 234.998 MB.\n====== dotty (scala) [default], iteration 11 completed (1995.957 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 201.577 ms, heap usage 454.016 MB -> 234.999 MB.\n====== dotty (scala) [default], iteration 12 completed (1862.615 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.839 ms, heap usage 452.517 MB -> 235.015 MB.\n====== dotty (scala) [default], iteration 13 completed (1899.631 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 180.248 ms, heap usage 452.020 MB -> 235.029 MB.\n====== dotty (scala) [default], iteration 14 completed (1687.317 ms) ======\nMaster port: 35997\nCache ports: 38375, 43115, 46141, 41479\n====== finagle-chirper (web) [default], iteration 0 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 251.657 ms, heap usage 328.908 MB -> 228.068 MB.\n====== finagle-chirper (web) [default], iteration 0 completed (14735.378 ms) ======\n====== finagle-chirper (web) [default], iteration 1 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 204.893 ms, heap usage 410.674 MB -> 229.946 MB.\n====== finagle-chirper (web) [default], iteration 1 completed (7197.528 ms) ======\n====== finagle-chirper (web) [default], iteration 2 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 149.621 ms, heap usage 285.176 MB -> 230.066 MB.\n====== finagle-chirper (web) [default], iteration 2 completed (4094.327 ms) ======\n====== finagle-chirper (web) [default], iteration 3 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 192.650 ms, heap usage 589.295 MB -> 230.399 MB.\n====== finagle-chirper (web) [default], iteration 3 completed (4189.868 ms) ======\n====== finagle-chirper (web) [default], iteration 4 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 189.123 ms, heap usage 555.565 MB -> 230.413 MB.\n====== finagle-chirper (web) [default], iteration 4 completed (3599.842 ms) ======\n====== finagle-chirper (web) [default], iteration 5 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 215.495 ms, heap usage 501.421 MB -> 230.379 MB.\n====== finagle-chirper (web) [default], iteration 5 completed (3235.206 ms) ======\n====== finagle-chirper (web) [default], iteration 6 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 154.023 ms, heap usage 490.603 MB -> 230.379 MB.\n====== finagle-chirper (web) [default], iteration 6 completed (3154.482 ms) ======\n====== finagle-chirper (web) [default], iteration 7 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 165.129 ms, heap usage 489.961 MB -> 229.270 MB.\n====== finagle-chirper (web) [default], iteration 7 completed (3189.227 ms) ======\n====== finagle-chirper (web) [default], iteration 8 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 203.822 ms, heap usage 453.948 MB -> 229.221 MB.\n====== finagle-chirper (web) [default], iteration 8 completed (3076.809 ms) ======\n====== finagle-chirper (web) [default], iteration 9 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 181.769 ms, heap usage 413.577 MB -> 228.871 MB.\n====== finagle-chirper (web) [default], iteration 9 completed (3199.226 ms) ======\n====== finagle-chirper (web) [default], iteration 10 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 217.620 ms, heap usage 374.585 MB -> 227.873 MB.\n====== finagle-chirper (web) [default], iteration 10 completed (2980.133 ms) ======\n====== finagle-chirper (web) [default], iteration 11 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 192.896 ms, heap usage 387.069 MB -> 227.854 MB.\n====== finagle-chirper (web) [default], iteration 11 completed (3271.963 ms) ======\n====== finagle-chirper (web) [default], iteration 12 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 191.548 ms, heap usage 383.451 MB -> 227.864 MB.\n====== finagle-chirper (web) [default], iteration 12 completed (2969.496 ms) ======\n====== finagle-chirper (web) [default], iteration 13 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 147.904 ms, heap usage 366.617 MB -> 227.873 MB.\n====== finagle-chirper (web) [default], iteration 13 completed (3128.971 ms) ======\n====== finagle-chirper (web) [default], iteration 14 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 194.034 ms, heap usage 380.271 MB -> 227.760 MB.\n====== finagle-chirper (web) [default], iteration 14 completed (2887.960 ms) ======\n"
    },
    "times": [
        238527.161,
        152295.544,
        141508.151,
        136368.039,
        136401.448,
        128573.985,
        126942.738,
        124239.02,
        124445.379,
        123452.807,
        122897.976,
        122950.561,
        120999.078,
        122609.091,
        122232.762
    ]
}