{
    "scrabble": {
        "times": [
            899.981,
            498.337,
            442.885,
            438.886,
            472.559,
            503.827,
            457.446,
            499.128,
            445.366,
            457.837,
            420.014,
            457.714,
            478.87,
            421.878,
            462.26
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\n"
    },
    "page-rank": {
        "times": [
            16347.216,
            10040.119,
            9302.174,
            9373.191,
            9634.175,
            9215.846,
            10117.223,
            10044.165,
            9354.037,
            9231.966,
            9408.407,
            11446.415,
            10395.985,
            10171.583,
            10151.7
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n"
    },
    "future-genetic": {
        "times": [
            3882.286,
            2792.248,
            2312.138,
            2141.341,
            2092.204,
            2241.588,
            2337.697,
            2347.445,
            2339.157,
            2204.852,
            2119.32,
            2027.613,
            1988.579,
            1933.523,
            1937.962
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n"
    },
    "akka-uct": {
        "times": [
            17659.699,
            16220.799,
            14008.772,
            13797.933,
            16329.382,
            12876.719,
            14392.108,
            12864.81,
            14454.395,
            12579.178,
            13851.272,
            15074.599,
            13921.546,
            14624.85,
            14738.198
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\n"
    },
    "movie-lens": {
        "times": [
            20816.859,
            15573.154,
            13369.243,
            13164.379,
            13206.777,
            12764.537,
            13908.07,
            16987.347,
            13724.212,
            12472.998,
            13241.048,
            12122.304,
            12332.289,
            12632.25,
            12220.801
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n"
    },
    "scala-doku": {
        "times": [
            3525.191,
            2806.16,
            2488.994,
            2280.421,
            2321.62,
            2220.106,
            2226.588,
            2296.314,
            2186.496,
            2291.544,
            2210.781,
            2310.518,
            2168.266,
            2174.401,
            2295.554
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\n"
    },
    "chi-square": {
        "times": [
            3540.151,
            1269.07,
            862.69,
            866.642,
            817.272,
            991.786,
            939.294,
            867.382,
            917.037,
            800.974,
            813.862,
            871.375,
            741.861,
            895.765,
            770.188
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n"
    },
    "fj-kmeans": {
        "times": [
            6074.708,
            6670.731,
            5473.979,
            5620.904,
            5506.799,
            6210.052,
            5720.032,
            5868.848,
            5345.323,
            5946.847,
            6122.42,
            5660.654,
            6489.927,
            5930.652,
            5951.339
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n"
    },
    "rx-scrabble": {
        "times": [
            706.858,
            313.1,
            336.652,
            213.963,
            194.3,
            179.296,
            179.757,
            181.42,
            171.547,
            171.237,
            158.684,
            162.243,
            156.064,
            191.825,
            145.206
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n"
    },
    "db-shootout": {
        "times": [
            8313.241,
            7948.742,
            8400.426,
            8110.306,
            6172.21,
            6483.046,
            7517.193,
            7809.097,
            7666.64,
            8233.111,
            8232.336,
            7355.504,
            7537.162,
            7289.845,
            7289.296
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\n"
    },
    "finagle-http": {
        "times": [
            10459.566,
            6629.023,
            3741.552,
            3277.347,
            3530.52,
            3534.453,
            3920.022,
            5105.618,
            3805.646,
            3568.703,
            3932.545,
            4332.744,
            3654.879,
            3660.31,
            3553.252
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n"
    },
    "reactors": {
        "times": [
            16490.575,
            13002.033,
            12876.561,
            15379.906,
            12092.067,
            12399.379,
            12711.379,
            13876.012,
            12783.285,
            11713.636,
            11434.495,
            11604.009,
            12360.293,
            11745.478,
            12094.827
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\n"
    },
    "dec-tree": {
        "times": [
            8337.217,
            2065.085,
            1589.954,
            1334.057,
            1415.705,
            1293.435,
            1314.302,
            1288.444,
            1310.338,
            1298.899,
            1308.732,
            1245.277,
            1212.961,
            1294.804,
            1178.888
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n"
    },
    "scala-stm-bench7": {
        "times": [
            2355.159,
            1501.636,
            1297.18,
            1293.062,
            1249.346,
            1334.584,
            1244.723,
            1258.504,
            1229.638,
            1283.63,
            1274.013,
            1294.841,
            1316.677,
            1288.538,
            1240.901
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 99.884 ms, heap usage 474.845 MB -> 140.704 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 654\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 30\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 654\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 8\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 30\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 107.38 op/s (107.38 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2355.159 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.272 ms, heap usage 417.715 MB -> 140.976 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 391\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 654\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 8\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 30\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 369.52 op/s (369.52 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1501.636 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 117.471 ms, heap usage 417.934 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 389\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 18\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 654\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 30\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 9\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 579.71 op/s (579.71 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1297.180 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 94.779 ms, heap usage 413.534 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 378\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 654\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 21\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 30\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 9\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 816.33 op/s (816.33 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1293.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 92.075 ms, heap usage 426.056 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 357\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 654\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 21\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 30\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1063.83 op/s (1063.83 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1249.346 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 95.581 ms, heap usage 418.892 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 352\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 654\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 20\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 21\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 30\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 9\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1176.47 op/s (1176.47 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1334.584 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.105 ms, heap usage 426.473 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 654\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 20\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 21\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 30\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 9\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1581.92 op/s (1581.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1244.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 94.646 ms, heap usage 426.542 MB -> 140.982 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 654\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 20\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 21\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 30\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 9\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1693.12 op/s (1693.12 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1258.504 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 97.325 ms, heap usage 419.550 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 654\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 20\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 21\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 30\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 9\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2068.97 op/s (2068.97 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1229.638 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 100.612 ms, heap usage 425.530 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 347\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 654\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 21\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 30\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 9\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2088.77 op/s (2088.77 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1283.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 100.475 ms, heap usage 428.028 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 342\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 654\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 20\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 21\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 30\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 9\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2291.67 op/s (2291.67 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1274.013 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 106.093 ms, heap usage 425.544 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 654\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 20\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 30\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2594.59 op/s (2594.59 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1294.841 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.962 ms, heap usage 428.042 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 356\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 654\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 20\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 21\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 30\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2833.79 op/s (2833.79 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1316.677 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 108.786 ms, heap usage 426.541 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 376\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 654\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 21\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 30\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2909.09 op/s (2909.09 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1288.538 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 100.887 ms, heap usage 429.540 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 654\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 21\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 30\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3174.60 op/s (3174.60 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1240.901 ms) ======\n"
    },
    "naive-bayes": {
        "times": [
            27277.508,
            16106.533,
            15066.216,
            15762.538,
            17374.38,
            14962.007,
            14658.143,
            14603.949,
            17942.586,
            18483.089,
            15761.761,
            14476.658,
            14696.004,
            14477.067,
            15365.089
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 99.884 ms, heap usage 474.845 MB -> 140.704 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 654\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 30\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 654\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 8\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 30\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 107.38 op/s (107.38 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2355.159 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.272 ms, heap usage 417.715 MB -> 140.976 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 391\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 654\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 8\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 30\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 369.52 op/s (369.52 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1501.636 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 117.471 ms, heap usage 417.934 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 389\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 18\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 654\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 30\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 9\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 579.71 op/s (579.71 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1297.180 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 94.779 ms, heap usage 413.534 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 378\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 654\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 21\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 30\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 9\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 816.33 op/s (816.33 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1293.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 92.075 ms, heap usage 426.056 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 357\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 654\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 21\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 30\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1063.83 op/s (1063.83 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1249.346 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 95.581 ms, heap usage 418.892 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 352\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 654\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 20\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 21\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 30\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 9\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1176.47 op/s (1176.47 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1334.584 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.105 ms, heap usage 426.473 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 654\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 20\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 21\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 30\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 9\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1581.92 op/s (1581.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1244.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 94.646 ms, heap usage 426.542 MB -> 140.982 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 654\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 20\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 21\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 30\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 9\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1693.12 op/s (1693.12 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1258.504 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 97.325 ms, heap usage 419.550 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 654\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 20\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 21\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 30\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 9\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2068.97 op/s (2068.97 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1229.638 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 100.612 ms, heap usage 425.530 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 347\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 654\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 21\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 30\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 9\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2088.77 op/s (2088.77 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1283.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 100.475 ms, heap usage 428.028 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 342\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 654\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 20\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 21\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 30\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 9\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2291.67 op/s (2291.67 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1274.013 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 106.093 ms, heap usage 425.544 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 654\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 20\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 30\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2594.59 op/s (2594.59 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1294.841 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.962 ms, heap usage 428.042 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 356\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 654\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 20\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 21\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 30\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2833.79 op/s (2833.79 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1316.677 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 108.786 ms, heap usage 426.541 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 376\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 654\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 21\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 30\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2909.09 op/s (2909.09 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1288.538 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 100.887 ms, heap usage 429.540 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 654\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 21\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 30\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3174.60 op/s (3174.60 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1240.901 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 103.007 ms, heap usage 237.327 MB -> 152.006 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27277.508 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 174.880 ms, heap usage 545.533 MB -> 428.211 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16106.533 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.468 ms, heap usage 499.806 MB -> 428.386 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15066.216 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 123.746 ms, heap usage 645.445 MB -> 428.468 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15762.538 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 177.869 ms, heap usage 447.164 MB -> 428.570 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17374.380 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 187.540 ms, heap usage 645.473 MB -> 428.690 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14962.007 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 136.469 ms, heap usage 704.869 MB -> 426.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14658.143 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 123.724 ms, heap usage 453.562 MB -> 425.638 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14603.949 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 124.075 ms, heap usage 633.189 MB -> 424.709 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (17942.586 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 175.048 ms, heap usage 451.220 MB -> 423.186 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (18483.089 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 137.864 ms, heap usage 441.911 MB -> 421.969 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15761.761 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 107.539 ms, heap usage 589.907 MB -> 421.950 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14476.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.595 ms, heap usage 523.230 MB -> 421.122 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14696.004 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 108.753 ms, heap usage 432.395 MB -> 421.237 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14477.067 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.999 ms, heap usage 741.845 MB -> 421.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15365.089 ms) ======\n"
    },
    "als": {
        "times": [
            16242.914,
            9488.938,
            7670.718,
            7697.079,
            7445.65,
            7342.85,
            7187.678,
            7143.539,
            7226.563,
            7008.907,
            7115.51,
            7146.267,
            7095.201,
            6971.348,
            6979.854
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 99.884 ms, heap usage 474.845 MB -> 140.704 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 654\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 30\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 654\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 8\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 30\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 107.38 op/s (107.38 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2355.159 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.272 ms, heap usage 417.715 MB -> 140.976 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 391\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 654\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 8\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 30\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 369.52 op/s (369.52 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1501.636 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 117.471 ms, heap usage 417.934 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 389\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 18\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 654\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 30\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 9\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 579.71 op/s (579.71 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1297.180 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 94.779 ms, heap usage 413.534 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 378\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 654\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 21\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 30\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 9\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 816.33 op/s (816.33 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1293.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 92.075 ms, heap usage 426.056 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 357\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 654\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 21\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 30\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1063.83 op/s (1063.83 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1249.346 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 95.581 ms, heap usage 418.892 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 352\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 654\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 20\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 21\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 30\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 9\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1176.47 op/s (1176.47 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1334.584 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.105 ms, heap usage 426.473 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 654\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 20\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 21\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 30\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 9\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1581.92 op/s (1581.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1244.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 94.646 ms, heap usage 426.542 MB -> 140.982 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 654\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 20\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 21\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 30\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 9\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1693.12 op/s (1693.12 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1258.504 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 97.325 ms, heap usage 419.550 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 654\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 20\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 21\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 30\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 9\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2068.97 op/s (2068.97 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1229.638 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 100.612 ms, heap usage 425.530 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 347\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 654\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 21\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 30\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 9\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2088.77 op/s (2088.77 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1283.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 100.475 ms, heap usage 428.028 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 342\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 654\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 20\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 21\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 30\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 9\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2291.67 op/s (2291.67 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1274.013 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 106.093 ms, heap usage 425.544 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 654\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 20\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 30\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2594.59 op/s (2594.59 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1294.841 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.962 ms, heap usage 428.042 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 356\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 654\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 20\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 21\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 30\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2833.79 op/s (2833.79 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1316.677 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 108.786 ms, heap usage 426.541 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 376\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 654\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 21\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 30\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2909.09 op/s (2909.09 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1288.538 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 100.887 ms, heap usage 429.540 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 654\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 21\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 30\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3174.60 op/s (3174.60 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1240.901 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 103.007 ms, heap usage 237.327 MB -> 152.006 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27277.508 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 174.880 ms, heap usage 545.533 MB -> 428.211 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16106.533 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.468 ms, heap usage 499.806 MB -> 428.386 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15066.216 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 123.746 ms, heap usage 645.445 MB -> 428.468 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15762.538 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 177.869 ms, heap usage 447.164 MB -> 428.570 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17374.380 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 187.540 ms, heap usage 645.473 MB -> 428.690 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14962.007 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 136.469 ms, heap usage 704.869 MB -> 426.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14658.143 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 123.724 ms, heap usage 453.562 MB -> 425.638 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14603.949 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 124.075 ms, heap usage 633.189 MB -> 424.709 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (17942.586 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 175.048 ms, heap usage 451.220 MB -> 423.186 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (18483.089 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 137.864 ms, heap usage 441.911 MB -> 421.969 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15761.761 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 107.539 ms, heap usage 589.907 MB -> 421.950 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14476.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.595 ms, heap usage 523.230 MB -> 421.122 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14696.004 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 108.753 ms, heap usage 432.395 MB -> 421.237 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14477.067 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.999 ms, heap usage 741.845 MB -> 421.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15365.089 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 120.136 ms, heap usage 670.511 MB -> 166.602 MB.\n====== als (apache-spark) [default], iteration 0 completed (16242.914 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.165 ms, heap usage 563.460 MB -> 192.289 MB.\n====== als (apache-spark) [default], iteration 1 completed (9488.938 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.945 ms, heap usage 786.704 MB -> 193.804 MB.\n====== als (apache-spark) [default], iteration 2 completed (7670.718 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 144.180 ms, heap usage 329.914 MB -> 193.476 MB.\n====== als (apache-spark) [default], iteration 3 completed (7697.079 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 133.014 ms, heap usage 815.424 MB -> 194.800 MB.\n====== als (apache-spark) [default], iteration 4 completed (7445.650 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 136.872 ms, heap usage 556.733 MB -> 195.002 MB.\n====== als (apache-spark) [default], iteration 5 completed (7342.850 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.596 ms, heap usage 554.239 MB -> 195.611 MB.\n====== als (apache-spark) [default], iteration 6 completed (7187.678 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 138.631 ms, heap usage 676.961 MB -> 196.254 MB.\n====== als (apache-spark) [default], iteration 7 completed (7143.539 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.248 ms, heap usage 681.638 MB -> 196.657 MB.\n====== als (apache-spark) [default], iteration 8 completed (7226.563 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 453.564 MB -> 196.941 MB.\n====== als (apache-spark) [default], iteration 9 completed (7008.907 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.464 ms, heap usage 474.138 MB -> 197.221 MB.\n====== als (apache-spark) [default], iteration 10 completed (7115.510 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.085 ms, heap usage 690.309 MB -> 197.715 MB.\n====== als (apache-spark) [default], iteration 11 completed (7146.267 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.763 ms, heap usage 572.673 MB -> 197.894 MB.\n====== als (apache-spark) [default], iteration 12 completed (7095.201 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 135.930 ms, heap usage 584.678 MB -> 198.119 MB.\n====== als (apache-spark) [default], iteration 13 completed (6971.348 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 137.644 ms, heap usage 581.828 MB -> 198.355 MB.\n====== als (apache-spark) [default], iteration 14 completed (6979.854 ms) ======\n"
    },
    "par-mnemonics": {
        "times": [
            4006.612,
            3921.837,
            4105.145,
            3944.252,
            3840.652,
            3691.038,
            3746.948,
            3600.261,
            3979.465,
            4377.627,
            4339.527,
            4807.433,
            3705.283,
            3551.739,
            3593.933
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 99.884 ms, heap usage 474.845 MB -> 140.704 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 654\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 30\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 654\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 8\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 30\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 107.38 op/s (107.38 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2355.159 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.272 ms, heap usage 417.715 MB -> 140.976 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 391\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 654\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 8\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 30\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 369.52 op/s (369.52 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1501.636 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 117.471 ms, heap usage 417.934 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 389\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 18\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 654\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 30\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 9\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 579.71 op/s (579.71 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1297.180 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 94.779 ms, heap usage 413.534 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 378\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 654\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 21\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 30\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 9\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 816.33 op/s (816.33 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1293.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 92.075 ms, heap usage 426.056 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 357\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 654\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 21\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 30\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1063.83 op/s (1063.83 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1249.346 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 95.581 ms, heap usage 418.892 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 352\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 654\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 20\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 21\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 30\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 9\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1176.47 op/s (1176.47 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1334.584 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.105 ms, heap usage 426.473 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 654\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 20\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 21\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 30\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 9\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1581.92 op/s (1581.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1244.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 94.646 ms, heap usage 426.542 MB -> 140.982 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 654\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 20\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 21\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 30\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 9\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1693.12 op/s (1693.12 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1258.504 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 97.325 ms, heap usage 419.550 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 654\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 20\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 21\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 30\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 9\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2068.97 op/s (2068.97 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1229.638 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 100.612 ms, heap usage 425.530 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 347\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 654\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 21\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 30\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 9\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2088.77 op/s (2088.77 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1283.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 100.475 ms, heap usage 428.028 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 342\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 654\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 20\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 21\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 30\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 9\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2291.67 op/s (2291.67 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1274.013 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 106.093 ms, heap usage 425.544 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 654\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 20\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 30\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2594.59 op/s (2594.59 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1294.841 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.962 ms, heap usage 428.042 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 356\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 654\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 20\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 21\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 30\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2833.79 op/s (2833.79 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1316.677 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 108.786 ms, heap usage 426.541 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 376\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 654\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 21\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 30\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2909.09 op/s (2909.09 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1288.538 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 100.887 ms, heap usage 429.540 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 654\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 21\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 30\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3174.60 op/s (3174.60 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1240.901 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 103.007 ms, heap usage 237.327 MB -> 152.006 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27277.508 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 174.880 ms, heap usage 545.533 MB -> 428.211 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16106.533 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.468 ms, heap usage 499.806 MB -> 428.386 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15066.216 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 123.746 ms, heap usage 645.445 MB -> 428.468 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15762.538 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 177.869 ms, heap usage 447.164 MB -> 428.570 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17374.380 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 187.540 ms, heap usage 645.473 MB -> 428.690 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14962.007 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 136.469 ms, heap usage 704.869 MB -> 426.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14658.143 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 123.724 ms, heap usage 453.562 MB -> 425.638 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14603.949 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 124.075 ms, heap usage 633.189 MB -> 424.709 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (17942.586 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 175.048 ms, heap usage 451.220 MB -> 423.186 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (18483.089 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 137.864 ms, heap usage 441.911 MB -> 421.969 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15761.761 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 107.539 ms, heap usage 589.907 MB -> 421.950 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14476.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.595 ms, heap usage 523.230 MB -> 421.122 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14696.004 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 108.753 ms, heap usage 432.395 MB -> 421.237 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14477.067 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.999 ms, heap usage 741.845 MB -> 421.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15365.089 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 120.136 ms, heap usage 670.511 MB -> 166.602 MB.\n====== als (apache-spark) [default], iteration 0 completed (16242.914 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.165 ms, heap usage 563.460 MB -> 192.289 MB.\n====== als (apache-spark) [default], iteration 1 completed (9488.938 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.945 ms, heap usage 786.704 MB -> 193.804 MB.\n====== als (apache-spark) [default], iteration 2 completed (7670.718 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 144.180 ms, heap usage 329.914 MB -> 193.476 MB.\n====== als (apache-spark) [default], iteration 3 completed (7697.079 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 133.014 ms, heap usage 815.424 MB -> 194.800 MB.\n====== als (apache-spark) [default], iteration 4 completed (7445.650 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 136.872 ms, heap usage 556.733 MB -> 195.002 MB.\n====== als (apache-spark) [default], iteration 5 completed (7342.850 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.596 ms, heap usage 554.239 MB -> 195.611 MB.\n====== als (apache-spark) [default], iteration 6 completed (7187.678 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 138.631 ms, heap usage 676.961 MB -> 196.254 MB.\n====== als (apache-spark) [default], iteration 7 completed (7143.539 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.248 ms, heap usage 681.638 MB -> 196.657 MB.\n====== als (apache-spark) [default], iteration 8 completed (7226.563 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 453.564 MB -> 196.941 MB.\n====== als (apache-spark) [default], iteration 9 completed (7008.907 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.464 ms, heap usage 474.138 MB -> 197.221 MB.\n====== als (apache-spark) [default], iteration 10 completed (7115.510 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.085 ms, heap usage 690.309 MB -> 197.715 MB.\n====== als (apache-spark) [default], iteration 11 completed (7146.267 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.763 ms, heap usage 572.673 MB -> 197.894 MB.\n====== als (apache-spark) [default], iteration 12 completed (7095.201 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 135.930 ms, heap usage 584.678 MB -> 198.119 MB.\n====== als (apache-spark) [default], iteration 13 completed (6971.348 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 137.644 ms, heap usage 581.828 MB -> 198.355 MB.\n====== als (apache-spark) [default], iteration 14 completed (6979.854 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.282 ms, heap usage 504.108 MB -> 179.036 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4006.612 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 120.417 ms, heap usage 354.983 MB -> 178.720 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3921.837 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.220 ms, heap usage 319.461 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4105.145 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 129.920 ms, heap usage 393.442 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3944.252 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 144.130 ms, heap usage 309.880 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3840.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 133.424 ms, heap usage 383.881 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3691.038 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.450 ms, heap usage 313.318 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3746.948 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 126.174 ms, heap usage 338.191 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3600.261 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 119.146 ms, heap usage 314.008 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3979.465 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 131.119 ms, heap usage 365.249 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4377.627 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 129.949 ms, heap usage 444.999 MB -> 178.755 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4339.527 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 167.269 ms, heap usage 317.160 MB -> 178.748 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4807.433 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 134.076 ms, heap usage 335.253 MB -> 178.754 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3705.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 122.296 ms, heap usage 312.750 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3551.739 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 123.035 ms, heap usage 308.309 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3593.933 ms) ======\n"
    },
    "scala-kmeans": {
        "times": [
            319.263,
            207.658,
            191.275,
            187.781,
            176.857,
            183.388,
            173.602,
            181.314,
            180.977,
            186.855,
            185.105,
            182.08,
            178.744,
            188.142,
            180.955
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 99.884 ms, heap usage 474.845 MB -> 140.704 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 654\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 30\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 654\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 8\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 30\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 107.38 op/s (107.38 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2355.159 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.272 ms, heap usage 417.715 MB -> 140.976 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 391\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 654\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 8\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 30\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 369.52 op/s (369.52 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1501.636 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 117.471 ms, heap usage 417.934 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 389\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 18\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 654\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 30\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 9\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 579.71 op/s (579.71 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1297.180 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 94.779 ms, heap usage 413.534 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 378\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 654\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 21\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 30\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 9\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 816.33 op/s (816.33 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1293.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 92.075 ms, heap usage 426.056 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 357\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 654\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 21\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 30\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1063.83 op/s (1063.83 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1249.346 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 95.581 ms, heap usage 418.892 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 352\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 654\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 20\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 21\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 30\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 9\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1176.47 op/s (1176.47 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1334.584 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.105 ms, heap usage 426.473 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 654\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 20\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 21\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 30\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 9\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1581.92 op/s (1581.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1244.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 94.646 ms, heap usage 426.542 MB -> 140.982 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 654\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 20\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 21\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 30\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 9\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1693.12 op/s (1693.12 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1258.504 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 97.325 ms, heap usage 419.550 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 654\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 20\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 21\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 30\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 9\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2068.97 op/s (2068.97 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1229.638 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 100.612 ms, heap usage 425.530 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 347\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 654\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 21\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 30\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 9\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2088.77 op/s (2088.77 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1283.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 100.475 ms, heap usage 428.028 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 342\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 654\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 20\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 21\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 30\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 9\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2291.67 op/s (2291.67 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1274.013 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 106.093 ms, heap usage 425.544 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 654\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 20\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 30\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2594.59 op/s (2594.59 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1294.841 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.962 ms, heap usage 428.042 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 356\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 654\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 20\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 21\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 30\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2833.79 op/s (2833.79 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1316.677 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 108.786 ms, heap usage 426.541 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 376\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 654\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 21\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 30\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2909.09 op/s (2909.09 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1288.538 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 100.887 ms, heap usage 429.540 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 654\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 21\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 30\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3174.60 op/s (3174.60 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1240.901 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 103.007 ms, heap usage 237.327 MB -> 152.006 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27277.508 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 174.880 ms, heap usage 545.533 MB -> 428.211 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16106.533 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.468 ms, heap usage 499.806 MB -> 428.386 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15066.216 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 123.746 ms, heap usage 645.445 MB -> 428.468 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15762.538 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 177.869 ms, heap usage 447.164 MB -> 428.570 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17374.380 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 187.540 ms, heap usage 645.473 MB -> 428.690 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14962.007 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 136.469 ms, heap usage 704.869 MB -> 426.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14658.143 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 123.724 ms, heap usage 453.562 MB -> 425.638 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14603.949 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 124.075 ms, heap usage 633.189 MB -> 424.709 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (17942.586 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 175.048 ms, heap usage 451.220 MB -> 423.186 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (18483.089 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 137.864 ms, heap usage 441.911 MB -> 421.969 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15761.761 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 107.539 ms, heap usage 589.907 MB -> 421.950 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14476.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.595 ms, heap usage 523.230 MB -> 421.122 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14696.004 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 108.753 ms, heap usage 432.395 MB -> 421.237 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14477.067 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.999 ms, heap usage 741.845 MB -> 421.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15365.089 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 120.136 ms, heap usage 670.511 MB -> 166.602 MB.\n====== als (apache-spark) [default], iteration 0 completed (16242.914 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.165 ms, heap usage 563.460 MB -> 192.289 MB.\n====== als (apache-spark) [default], iteration 1 completed (9488.938 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.945 ms, heap usage 786.704 MB -> 193.804 MB.\n====== als (apache-spark) [default], iteration 2 completed (7670.718 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 144.180 ms, heap usage 329.914 MB -> 193.476 MB.\n====== als (apache-spark) [default], iteration 3 completed (7697.079 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 133.014 ms, heap usage 815.424 MB -> 194.800 MB.\n====== als (apache-spark) [default], iteration 4 completed (7445.650 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 136.872 ms, heap usage 556.733 MB -> 195.002 MB.\n====== als (apache-spark) [default], iteration 5 completed (7342.850 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.596 ms, heap usage 554.239 MB -> 195.611 MB.\n====== als (apache-spark) [default], iteration 6 completed (7187.678 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 138.631 ms, heap usage 676.961 MB -> 196.254 MB.\n====== als (apache-spark) [default], iteration 7 completed (7143.539 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.248 ms, heap usage 681.638 MB -> 196.657 MB.\n====== als (apache-spark) [default], iteration 8 completed (7226.563 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 453.564 MB -> 196.941 MB.\n====== als (apache-spark) [default], iteration 9 completed (7008.907 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.464 ms, heap usage 474.138 MB -> 197.221 MB.\n====== als (apache-spark) [default], iteration 10 completed (7115.510 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.085 ms, heap usage 690.309 MB -> 197.715 MB.\n====== als (apache-spark) [default], iteration 11 completed (7146.267 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.763 ms, heap usage 572.673 MB -> 197.894 MB.\n====== als (apache-spark) [default], iteration 12 completed (7095.201 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 135.930 ms, heap usage 584.678 MB -> 198.119 MB.\n====== als (apache-spark) [default], iteration 13 completed (6971.348 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 137.644 ms, heap usage 581.828 MB -> 198.355 MB.\n====== als (apache-spark) [default], iteration 14 completed (6979.854 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.282 ms, heap usage 504.108 MB -> 179.036 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4006.612 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 120.417 ms, heap usage 354.983 MB -> 178.720 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3921.837 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.220 ms, heap usage 319.461 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4105.145 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 129.920 ms, heap usage 393.442 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3944.252 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 144.130 ms, heap usage 309.880 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3840.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 133.424 ms, heap usage 383.881 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3691.038 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.450 ms, heap usage 313.318 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3746.948 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 126.174 ms, heap usage 338.191 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3600.261 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 119.146 ms, heap usage 314.008 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3979.465 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 131.119 ms, heap usage 365.249 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4377.627 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 129.949 ms, heap usage 444.999 MB -> 178.755 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4339.527 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 167.269 ms, heap usage 317.160 MB -> 178.748 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4807.433 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 134.076 ms, heap usage 335.253 MB -> 178.754 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3705.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 122.296 ms, heap usage 312.750 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3551.739 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 123.035 ms, heap usage 308.309 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3593.933 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.446 ms, heap usage 351.750 MB -> 201.009 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (319.263 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 148.297 ms, heap usage 229.009 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (207.658 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 127.040 ms, heap usage 231.051 MB -> 201.041 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (191.275 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 129.835 ms, heap usage 231.041 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (187.781 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 130.614 ms, heap usage 231.044 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (176.857 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 149.018 ms, heap usage 231.041 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (183.388 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.478 ms, heap usage 231.541 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (173.602 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 193.626 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (181.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 136.782 ms, heap usage 231.043 MB -> 201.042 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (180.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.982 ms, heap usage 231.045 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (186.855 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 147.037 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (185.105 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 127.462 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (182.080 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.877 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (178.744 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 130.335 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (188.142 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 133.740 ms, heap usage 231.046 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (180.955 ms) ======\n"
    },
    "philosophers": {
        "times": [
            2564.458,
            1146.279,
            1098.304,
            1127.043,
            1114.171,
            1072.079,
            1105.541,
            1281.011,
            1202.634,
            1014.669,
            955.105,
            1170.504,
            1292.243,
            1170.1,
            1068.715
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 99.884 ms, heap usage 474.845 MB -> 140.704 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 654\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 30\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 654\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 8\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 30\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 107.38 op/s (107.38 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2355.159 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.272 ms, heap usage 417.715 MB -> 140.976 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 391\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 654\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 8\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 30\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 369.52 op/s (369.52 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1501.636 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 117.471 ms, heap usage 417.934 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 389\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 18\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 654\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 30\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 9\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 579.71 op/s (579.71 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1297.180 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 94.779 ms, heap usage 413.534 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 378\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 654\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 21\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 30\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 9\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 816.33 op/s (816.33 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1293.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 92.075 ms, heap usage 426.056 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 357\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 654\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 21\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 30\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1063.83 op/s (1063.83 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1249.346 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 95.581 ms, heap usage 418.892 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 352\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 654\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 20\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 21\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 30\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 9\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1176.47 op/s (1176.47 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1334.584 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.105 ms, heap usage 426.473 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 654\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 20\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 21\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 30\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 9\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1581.92 op/s (1581.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1244.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 94.646 ms, heap usage 426.542 MB -> 140.982 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 654\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 20\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 21\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 30\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 9\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1693.12 op/s (1693.12 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1258.504 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 97.325 ms, heap usage 419.550 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 654\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 20\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 21\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 30\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 9\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2068.97 op/s (2068.97 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1229.638 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 100.612 ms, heap usage 425.530 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 347\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 654\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 21\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 30\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 9\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2088.77 op/s (2088.77 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1283.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 100.475 ms, heap usage 428.028 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 342\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 654\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 20\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 21\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 30\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 9\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2291.67 op/s (2291.67 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1274.013 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 106.093 ms, heap usage 425.544 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 654\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 20\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 30\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2594.59 op/s (2594.59 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1294.841 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.962 ms, heap usage 428.042 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 356\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 654\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 20\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 21\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 30\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2833.79 op/s (2833.79 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1316.677 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 108.786 ms, heap usage 426.541 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 376\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 654\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 21\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 30\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2909.09 op/s (2909.09 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1288.538 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 100.887 ms, heap usage 429.540 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 654\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 21\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 30\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3174.60 op/s (3174.60 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1240.901 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 103.007 ms, heap usage 237.327 MB -> 152.006 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27277.508 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 174.880 ms, heap usage 545.533 MB -> 428.211 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16106.533 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.468 ms, heap usage 499.806 MB -> 428.386 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15066.216 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 123.746 ms, heap usage 645.445 MB -> 428.468 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15762.538 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 177.869 ms, heap usage 447.164 MB -> 428.570 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17374.380 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 187.540 ms, heap usage 645.473 MB -> 428.690 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14962.007 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 136.469 ms, heap usage 704.869 MB -> 426.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14658.143 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 123.724 ms, heap usage 453.562 MB -> 425.638 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14603.949 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 124.075 ms, heap usage 633.189 MB -> 424.709 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (17942.586 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 175.048 ms, heap usage 451.220 MB -> 423.186 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (18483.089 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 137.864 ms, heap usage 441.911 MB -> 421.969 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15761.761 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 107.539 ms, heap usage 589.907 MB -> 421.950 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14476.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.595 ms, heap usage 523.230 MB -> 421.122 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14696.004 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 108.753 ms, heap usage 432.395 MB -> 421.237 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14477.067 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.999 ms, heap usage 741.845 MB -> 421.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15365.089 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 120.136 ms, heap usage 670.511 MB -> 166.602 MB.\n====== als (apache-spark) [default], iteration 0 completed (16242.914 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.165 ms, heap usage 563.460 MB -> 192.289 MB.\n====== als (apache-spark) [default], iteration 1 completed (9488.938 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.945 ms, heap usage 786.704 MB -> 193.804 MB.\n====== als (apache-spark) [default], iteration 2 completed (7670.718 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 144.180 ms, heap usage 329.914 MB -> 193.476 MB.\n====== als (apache-spark) [default], iteration 3 completed (7697.079 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 133.014 ms, heap usage 815.424 MB -> 194.800 MB.\n====== als (apache-spark) [default], iteration 4 completed (7445.650 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 136.872 ms, heap usage 556.733 MB -> 195.002 MB.\n====== als (apache-spark) [default], iteration 5 completed (7342.850 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.596 ms, heap usage 554.239 MB -> 195.611 MB.\n====== als (apache-spark) [default], iteration 6 completed (7187.678 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 138.631 ms, heap usage 676.961 MB -> 196.254 MB.\n====== als (apache-spark) [default], iteration 7 completed (7143.539 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.248 ms, heap usage 681.638 MB -> 196.657 MB.\n====== als (apache-spark) [default], iteration 8 completed (7226.563 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 453.564 MB -> 196.941 MB.\n====== als (apache-spark) [default], iteration 9 completed (7008.907 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.464 ms, heap usage 474.138 MB -> 197.221 MB.\n====== als (apache-spark) [default], iteration 10 completed (7115.510 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.085 ms, heap usage 690.309 MB -> 197.715 MB.\n====== als (apache-spark) [default], iteration 11 completed (7146.267 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.763 ms, heap usage 572.673 MB -> 197.894 MB.\n====== als (apache-spark) [default], iteration 12 completed (7095.201 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 135.930 ms, heap usage 584.678 MB -> 198.119 MB.\n====== als (apache-spark) [default], iteration 13 completed (6971.348 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 137.644 ms, heap usage 581.828 MB -> 198.355 MB.\n====== als (apache-spark) [default], iteration 14 completed (6979.854 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.282 ms, heap usage 504.108 MB -> 179.036 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4006.612 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 120.417 ms, heap usage 354.983 MB -> 178.720 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3921.837 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.220 ms, heap usage 319.461 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4105.145 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 129.920 ms, heap usage 393.442 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3944.252 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 144.130 ms, heap usage 309.880 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3840.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 133.424 ms, heap usage 383.881 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3691.038 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.450 ms, heap usage 313.318 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3746.948 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 126.174 ms, heap usage 338.191 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3600.261 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 119.146 ms, heap usage 314.008 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3979.465 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 131.119 ms, heap usage 365.249 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4377.627 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 129.949 ms, heap usage 444.999 MB -> 178.755 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4339.527 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 167.269 ms, heap usage 317.160 MB -> 178.748 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4807.433 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 134.076 ms, heap usage 335.253 MB -> 178.754 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3705.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 122.296 ms, heap usage 312.750 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3551.739 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 123.035 ms, heap usage 308.309 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3593.933 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.446 ms, heap usage 351.750 MB -> 201.009 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (319.263 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 148.297 ms, heap usage 229.009 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (207.658 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 127.040 ms, heap usage 231.051 MB -> 201.041 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (191.275 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 129.835 ms, heap usage 231.041 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (187.781 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 130.614 ms, heap usage 231.044 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (176.857 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 149.018 ms, heap usage 231.041 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (183.388 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.478 ms, heap usage 231.541 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (173.602 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 193.626 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (181.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 136.782 ms, heap usage 231.043 MB -> 201.042 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (180.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.982 ms, heap usage 231.045 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (186.855 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 147.037 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (185.105 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 127.462 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (182.080 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.877 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (178.744 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 130.335 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (188.142 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 133.740 ms, heap usage 231.046 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (180.955 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 166.424 ms, heap usage 232.543 MB -> 180.044 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2564.458 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 137.871 ms, heap usage 219.044 MB -> 179.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1146.279 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 122.826 ms, heap usage 398.890 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1098.304 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.622 ms, heap usage 336.672 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1127.043 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 140.409 ms, heap usage 498.560 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1114.171 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 146.888 ms, heap usage 426.824 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1072.079 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 133.685 ms, heap usage 366.737 MB -> 179.977 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1105.541 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.222 ms, heap usage 410.206 MB -> 179.970 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1281.011 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 129.654 ms, heap usage 537.173 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1202.634 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 127.497 ms, heap usage 509.158 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1014.669 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 129.313 ms, heap usage 361.661 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (955.105 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 156.477 ms, heap usage 323.159 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1170.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 133.896 ms, heap usage 507.325 MB -> 179.971 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1292.243 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.754 ms, heap usage 209.136 MB -> 179.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1170.100 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 153.341 ms, heap usage 442.162 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1068.715 ms) ======\n"
    },
    "log-regression": {
        "times": [
            8234.748,
            1664.313,
            1890.635,
            1458.455,
            1373.019,
            1170.984,
            1143.404,
            1202.09,
            1085.209,
            1053.814,
            1164.098,
            1113.593,
            1130.17,
            1057.183,
            1037.525
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 99.884 ms, heap usage 474.845 MB -> 140.704 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 654\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 30\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 654\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 8\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 30\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 107.38 op/s (107.38 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2355.159 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.272 ms, heap usage 417.715 MB -> 140.976 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 391\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 654\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 8\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 30\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 369.52 op/s (369.52 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1501.636 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 117.471 ms, heap usage 417.934 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 389\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 18\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 654\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 30\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 9\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 579.71 op/s (579.71 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1297.180 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 94.779 ms, heap usage 413.534 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 378\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 654\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 21\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 30\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 9\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 816.33 op/s (816.33 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1293.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 92.075 ms, heap usage 426.056 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 357\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 654\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 21\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 30\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1063.83 op/s (1063.83 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1249.346 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 95.581 ms, heap usage 418.892 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 352\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 654\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 20\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 21\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 30\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 9\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1176.47 op/s (1176.47 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1334.584 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.105 ms, heap usage 426.473 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 654\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 20\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 21\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 30\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 9\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1581.92 op/s (1581.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1244.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 94.646 ms, heap usage 426.542 MB -> 140.982 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 654\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 20\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 21\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 30\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 9\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1693.12 op/s (1693.12 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1258.504 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 97.325 ms, heap usage 419.550 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 654\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 20\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 21\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 30\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 9\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2068.97 op/s (2068.97 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1229.638 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 100.612 ms, heap usage 425.530 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 347\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 654\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 21\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 30\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 9\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2088.77 op/s (2088.77 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1283.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 100.475 ms, heap usage 428.028 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 342\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 654\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 20\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 21\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 30\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 9\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2291.67 op/s (2291.67 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1274.013 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 106.093 ms, heap usage 425.544 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 654\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 20\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 30\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2594.59 op/s (2594.59 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1294.841 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.962 ms, heap usage 428.042 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 356\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 654\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 20\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 21\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 30\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2833.79 op/s (2833.79 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1316.677 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 108.786 ms, heap usage 426.541 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 376\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 654\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 21\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 30\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2909.09 op/s (2909.09 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1288.538 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 100.887 ms, heap usage 429.540 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 654\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 21\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 30\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3174.60 op/s (3174.60 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1240.901 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 103.007 ms, heap usage 237.327 MB -> 152.006 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27277.508 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 174.880 ms, heap usage 545.533 MB -> 428.211 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16106.533 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.468 ms, heap usage 499.806 MB -> 428.386 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15066.216 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 123.746 ms, heap usage 645.445 MB -> 428.468 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15762.538 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 177.869 ms, heap usage 447.164 MB -> 428.570 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17374.380 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 187.540 ms, heap usage 645.473 MB -> 428.690 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14962.007 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 136.469 ms, heap usage 704.869 MB -> 426.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14658.143 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 123.724 ms, heap usage 453.562 MB -> 425.638 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14603.949 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 124.075 ms, heap usage 633.189 MB -> 424.709 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (17942.586 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 175.048 ms, heap usage 451.220 MB -> 423.186 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (18483.089 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 137.864 ms, heap usage 441.911 MB -> 421.969 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15761.761 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 107.539 ms, heap usage 589.907 MB -> 421.950 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14476.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.595 ms, heap usage 523.230 MB -> 421.122 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14696.004 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 108.753 ms, heap usage 432.395 MB -> 421.237 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14477.067 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.999 ms, heap usage 741.845 MB -> 421.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15365.089 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 120.136 ms, heap usage 670.511 MB -> 166.602 MB.\n====== als (apache-spark) [default], iteration 0 completed (16242.914 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.165 ms, heap usage 563.460 MB -> 192.289 MB.\n====== als (apache-spark) [default], iteration 1 completed (9488.938 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.945 ms, heap usage 786.704 MB -> 193.804 MB.\n====== als (apache-spark) [default], iteration 2 completed (7670.718 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 144.180 ms, heap usage 329.914 MB -> 193.476 MB.\n====== als (apache-spark) [default], iteration 3 completed (7697.079 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 133.014 ms, heap usage 815.424 MB -> 194.800 MB.\n====== als (apache-spark) [default], iteration 4 completed (7445.650 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 136.872 ms, heap usage 556.733 MB -> 195.002 MB.\n====== als (apache-spark) [default], iteration 5 completed (7342.850 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.596 ms, heap usage 554.239 MB -> 195.611 MB.\n====== als (apache-spark) [default], iteration 6 completed (7187.678 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 138.631 ms, heap usage 676.961 MB -> 196.254 MB.\n====== als (apache-spark) [default], iteration 7 completed (7143.539 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.248 ms, heap usage 681.638 MB -> 196.657 MB.\n====== als (apache-spark) [default], iteration 8 completed (7226.563 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 453.564 MB -> 196.941 MB.\n====== als (apache-spark) [default], iteration 9 completed (7008.907 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.464 ms, heap usage 474.138 MB -> 197.221 MB.\n====== als (apache-spark) [default], iteration 10 completed (7115.510 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.085 ms, heap usage 690.309 MB -> 197.715 MB.\n====== als (apache-spark) [default], iteration 11 completed (7146.267 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.763 ms, heap usage 572.673 MB -> 197.894 MB.\n====== als (apache-spark) [default], iteration 12 completed (7095.201 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 135.930 ms, heap usage 584.678 MB -> 198.119 MB.\n====== als (apache-spark) [default], iteration 13 completed (6971.348 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 137.644 ms, heap usage 581.828 MB -> 198.355 MB.\n====== als (apache-spark) [default], iteration 14 completed (6979.854 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.282 ms, heap usage 504.108 MB -> 179.036 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4006.612 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 120.417 ms, heap usage 354.983 MB -> 178.720 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3921.837 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.220 ms, heap usage 319.461 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4105.145 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 129.920 ms, heap usage 393.442 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3944.252 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 144.130 ms, heap usage 309.880 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3840.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 133.424 ms, heap usage 383.881 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3691.038 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.450 ms, heap usage 313.318 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3746.948 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 126.174 ms, heap usage 338.191 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3600.261 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 119.146 ms, heap usage 314.008 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3979.465 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 131.119 ms, heap usage 365.249 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4377.627 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 129.949 ms, heap usage 444.999 MB -> 178.755 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4339.527 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 167.269 ms, heap usage 317.160 MB -> 178.748 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4807.433 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 134.076 ms, heap usage 335.253 MB -> 178.754 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3705.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 122.296 ms, heap usage 312.750 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3551.739 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 123.035 ms, heap usage 308.309 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3593.933 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.446 ms, heap usage 351.750 MB -> 201.009 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (319.263 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 148.297 ms, heap usage 229.009 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (207.658 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 127.040 ms, heap usage 231.051 MB -> 201.041 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (191.275 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 129.835 ms, heap usage 231.041 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (187.781 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 130.614 ms, heap usage 231.044 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (176.857 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 149.018 ms, heap usage 231.041 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (183.388 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.478 ms, heap usage 231.541 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (173.602 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 193.626 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (181.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 136.782 ms, heap usage 231.043 MB -> 201.042 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (180.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.982 ms, heap usage 231.045 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (186.855 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 147.037 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (185.105 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 127.462 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (182.080 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.877 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (178.744 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 130.335 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (188.142 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 133.740 ms, heap usage 231.046 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (180.955 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 166.424 ms, heap usage 232.543 MB -> 180.044 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2564.458 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 137.871 ms, heap usage 219.044 MB -> 179.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1146.279 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 122.826 ms, heap usage 398.890 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1098.304 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.622 ms, heap usage 336.672 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1127.043 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 140.409 ms, heap usage 498.560 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1114.171 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 146.888 ms, heap usage 426.824 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1072.079 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 133.685 ms, heap usage 366.737 MB -> 179.977 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1105.541 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.222 ms, heap usage 410.206 MB -> 179.970 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1281.011 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 129.654 ms, heap usage 537.173 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1202.634 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 127.497 ms, heap usage 509.158 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1014.669 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 129.313 ms, heap usage 361.661 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (955.105 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 156.477 ms, heap usage 323.159 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1170.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 133.896 ms, heap usage 507.325 MB -> 179.971 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1292.243 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.754 ms, heap usage 209.136 MB -> 179.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1170.100 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 153.341 ms, heap usage 442.162 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1068.715 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 141.167 ms, heap usage 224.188 MB -> 192.345 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8234.748 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 232.748 ms, heap usage 510.569 MB -> 274.660 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1664.313 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.784 ms, heap usage 720.674 MB -> 275.878 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1890.635 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 190.649 ms, heap usage 575.653 MB -> 275.851 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1458.455 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 169.278 ms, heap usage 668.265 MB -> 276.491 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1373.019 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 130.199 ms, heap usage 669.971 MB -> 276.705 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1170.984 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.856 ms, heap usage 768.517 MB -> 277.132 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1143.404 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 131.945 ms, heap usage 648.504 MB -> 277.036 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1202.090 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 143.181 ms, heap usage 768.833 MB -> 277.565 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1085.209 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.729 ms, heap usage 540.690 MB -> 277.079 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1053.814 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.089 ms, heap usage 549.108 MB -> 277.380 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1164.098 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.787 ms, heap usage 663.712 MB -> 277.818 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1113.593 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 149.944 ms, heap usage 724.431 MB -> 278.314 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1130.170 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.506 ms, heap usage 618.294 MB -> 278.158 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1057.183 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 156.171 ms, heap usage 668.259 MB -> 278.586 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1037.525 ms) ======\n"
    },
    "gauss-mix": {
        "times": [
            15730.894,
            10818.99,
            11061.199,
            11054.256,
            13661.207,
            12302.509,
            10705.031,
            10285.96,
            9996.145,
            10073.767,
            10758.398,
            10589.361,
            10048.025,
            10155.839,
            9943.413
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 99.884 ms, heap usage 474.845 MB -> 140.704 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 654\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 30\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 654\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 8\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 30\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 107.38 op/s (107.38 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2355.159 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.272 ms, heap usage 417.715 MB -> 140.976 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 391\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 654\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 8\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 30\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 369.52 op/s (369.52 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1501.636 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 117.471 ms, heap usage 417.934 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 389\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 18\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 654\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 30\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 9\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 579.71 op/s (579.71 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1297.180 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 94.779 ms, heap usage 413.534 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 378\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 654\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 21\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 30\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 9\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 816.33 op/s (816.33 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1293.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 92.075 ms, heap usage 426.056 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 357\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 654\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 21\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 30\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1063.83 op/s (1063.83 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1249.346 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 95.581 ms, heap usage 418.892 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 352\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 654\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 20\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 21\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 30\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 9\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1176.47 op/s (1176.47 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1334.584 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.105 ms, heap usage 426.473 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 654\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 20\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 21\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 30\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 9\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1581.92 op/s (1581.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1244.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 94.646 ms, heap usage 426.542 MB -> 140.982 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 654\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 20\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 21\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 30\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 9\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1693.12 op/s (1693.12 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1258.504 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 97.325 ms, heap usage 419.550 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 654\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 20\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 21\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 30\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 9\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2068.97 op/s (2068.97 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1229.638 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 100.612 ms, heap usage 425.530 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 347\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 654\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 21\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 30\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 9\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2088.77 op/s (2088.77 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1283.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 100.475 ms, heap usage 428.028 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 342\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 654\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 20\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 21\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 30\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 9\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2291.67 op/s (2291.67 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1274.013 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 106.093 ms, heap usage 425.544 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 654\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 20\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 30\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2594.59 op/s (2594.59 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1294.841 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.962 ms, heap usage 428.042 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 356\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 654\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 20\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 21\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 30\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2833.79 op/s (2833.79 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1316.677 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 108.786 ms, heap usage 426.541 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 376\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 654\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 21\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 30\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2909.09 op/s (2909.09 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1288.538 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 100.887 ms, heap usage 429.540 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 654\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 21\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 30\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3174.60 op/s (3174.60 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1240.901 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 103.007 ms, heap usage 237.327 MB -> 152.006 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27277.508 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 174.880 ms, heap usage 545.533 MB -> 428.211 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16106.533 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.468 ms, heap usage 499.806 MB -> 428.386 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15066.216 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 123.746 ms, heap usage 645.445 MB -> 428.468 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15762.538 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 177.869 ms, heap usage 447.164 MB -> 428.570 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17374.380 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 187.540 ms, heap usage 645.473 MB -> 428.690 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14962.007 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 136.469 ms, heap usage 704.869 MB -> 426.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14658.143 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 123.724 ms, heap usage 453.562 MB -> 425.638 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14603.949 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 124.075 ms, heap usage 633.189 MB -> 424.709 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (17942.586 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 175.048 ms, heap usage 451.220 MB -> 423.186 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (18483.089 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 137.864 ms, heap usage 441.911 MB -> 421.969 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15761.761 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 107.539 ms, heap usage 589.907 MB -> 421.950 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14476.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.595 ms, heap usage 523.230 MB -> 421.122 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14696.004 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 108.753 ms, heap usage 432.395 MB -> 421.237 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14477.067 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.999 ms, heap usage 741.845 MB -> 421.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15365.089 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 120.136 ms, heap usage 670.511 MB -> 166.602 MB.\n====== als (apache-spark) [default], iteration 0 completed (16242.914 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.165 ms, heap usage 563.460 MB -> 192.289 MB.\n====== als (apache-spark) [default], iteration 1 completed (9488.938 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.945 ms, heap usage 786.704 MB -> 193.804 MB.\n====== als (apache-spark) [default], iteration 2 completed (7670.718 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 144.180 ms, heap usage 329.914 MB -> 193.476 MB.\n====== als (apache-spark) [default], iteration 3 completed (7697.079 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 133.014 ms, heap usage 815.424 MB -> 194.800 MB.\n====== als (apache-spark) [default], iteration 4 completed (7445.650 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 136.872 ms, heap usage 556.733 MB -> 195.002 MB.\n====== als (apache-spark) [default], iteration 5 completed (7342.850 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.596 ms, heap usage 554.239 MB -> 195.611 MB.\n====== als (apache-spark) [default], iteration 6 completed (7187.678 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 138.631 ms, heap usage 676.961 MB -> 196.254 MB.\n====== als (apache-spark) [default], iteration 7 completed (7143.539 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.248 ms, heap usage 681.638 MB -> 196.657 MB.\n====== als (apache-spark) [default], iteration 8 completed (7226.563 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 453.564 MB -> 196.941 MB.\n====== als (apache-spark) [default], iteration 9 completed (7008.907 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.464 ms, heap usage 474.138 MB -> 197.221 MB.\n====== als (apache-spark) [default], iteration 10 completed (7115.510 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.085 ms, heap usage 690.309 MB -> 197.715 MB.\n====== als (apache-spark) [default], iteration 11 completed (7146.267 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.763 ms, heap usage 572.673 MB -> 197.894 MB.\n====== als (apache-spark) [default], iteration 12 completed (7095.201 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 135.930 ms, heap usage 584.678 MB -> 198.119 MB.\n====== als (apache-spark) [default], iteration 13 completed (6971.348 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 137.644 ms, heap usage 581.828 MB -> 198.355 MB.\n====== als (apache-spark) [default], iteration 14 completed (6979.854 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.282 ms, heap usage 504.108 MB -> 179.036 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4006.612 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 120.417 ms, heap usage 354.983 MB -> 178.720 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3921.837 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.220 ms, heap usage 319.461 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4105.145 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 129.920 ms, heap usage 393.442 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3944.252 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 144.130 ms, heap usage 309.880 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3840.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 133.424 ms, heap usage 383.881 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3691.038 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.450 ms, heap usage 313.318 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3746.948 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 126.174 ms, heap usage 338.191 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3600.261 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 119.146 ms, heap usage 314.008 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3979.465 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 131.119 ms, heap usage 365.249 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4377.627 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 129.949 ms, heap usage 444.999 MB -> 178.755 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4339.527 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 167.269 ms, heap usage 317.160 MB -> 178.748 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4807.433 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 134.076 ms, heap usage 335.253 MB -> 178.754 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3705.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 122.296 ms, heap usage 312.750 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3551.739 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 123.035 ms, heap usage 308.309 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3593.933 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.446 ms, heap usage 351.750 MB -> 201.009 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (319.263 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 148.297 ms, heap usage 229.009 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (207.658 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 127.040 ms, heap usage 231.051 MB -> 201.041 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (191.275 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 129.835 ms, heap usage 231.041 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (187.781 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 130.614 ms, heap usage 231.044 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (176.857 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 149.018 ms, heap usage 231.041 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (183.388 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.478 ms, heap usage 231.541 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (173.602 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 193.626 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (181.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 136.782 ms, heap usage 231.043 MB -> 201.042 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (180.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.982 ms, heap usage 231.045 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (186.855 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 147.037 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (185.105 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 127.462 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (182.080 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.877 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (178.744 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 130.335 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (188.142 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 133.740 ms, heap usage 231.046 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (180.955 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 166.424 ms, heap usage 232.543 MB -> 180.044 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2564.458 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 137.871 ms, heap usage 219.044 MB -> 179.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1146.279 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 122.826 ms, heap usage 398.890 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1098.304 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.622 ms, heap usage 336.672 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1127.043 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 140.409 ms, heap usage 498.560 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1114.171 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 146.888 ms, heap usage 426.824 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1072.079 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 133.685 ms, heap usage 366.737 MB -> 179.977 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1105.541 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.222 ms, heap usage 410.206 MB -> 179.970 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1281.011 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 129.654 ms, heap usage 537.173 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1202.634 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 127.497 ms, heap usage 509.158 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1014.669 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 129.313 ms, heap usage 361.661 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (955.105 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 156.477 ms, heap usage 323.159 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1170.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 133.896 ms, heap usage 507.325 MB -> 179.971 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1292.243 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.754 ms, heap usage 209.136 MB -> 179.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1170.100 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 153.341 ms, heap usage 442.162 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1068.715 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 141.167 ms, heap usage 224.188 MB -> 192.345 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8234.748 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 232.748 ms, heap usage 510.569 MB -> 274.660 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1664.313 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.784 ms, heap usage 720.674 MB -> 275.878 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1890.635 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 190.649 ms, heap usage 575.653 MB -> 275.851 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1458.455 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 169.278 ms, heap usage 668.265 MB -> 276.491 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1373.019 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 130.199 ms, heap usage 669.971 MB -> 276.705 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1170.984 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.856 ms, heap usage 768.517 MB -> 277.132 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1143.404 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 131.945 ms, heap usage 648.504 MB -> 277.036 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1202.090 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 143.181 ms, heap usage 768.833 MB -> 277.565 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1085.209 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.729 ms, heap usage 540.690 MB -> 277.079 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1053.814 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.089 ms, heap usage 549.108 MB -> 277.380 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1164.098 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.787 ms, heap usage 663.712 MB -> 277.818 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1113.593 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 149.944 ms, heap usage 724.431 MB -> 278.314 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1130.170 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.506 ms, heap usage 618.294 MB -> 278.158 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1057.183 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 156.171 ms, heap usage 668.259 MB -> 278.586 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1037.525 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.266 ms, heap usage 824.082 MB -> 212.310 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (15730.894 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 152.758 ms, heap usage 807.061 MB -> 219.160 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (10818.990 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.129 ms, heap usage 801.556 MB -> 220.980 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (11061.199 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.719 ms, heap usage 606.551 MB -> 222.394 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11054.256 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 156.420 ms, heap usage 633.415 MB -> 223.845 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (13661.207 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 234.864 ms, heap usage 255.438 MB -> 223.028 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12302.509 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 224.050 ms, heap usage 665.260 MB -> 223.750 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10705.031 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 161.723 ms, heap usage 826.921 MB -> 223.491 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10285.960 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 159.479 ms, heap usage 317.833 MB -> 223.617 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (9996.145 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 174.736 ms, heap usage 548.973 MB -> 223.613 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10073.767 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 157.036 ms, heap usage 692.389 MB -> 223.565 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10758.398 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 231.883 ms, heap usage 821.173 MB -> 223.980 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10589.361 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 186.274 ms, heap usage 317.897 MB -> 223.369 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10048.025 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 163.098 ms, heap usage 585.847 MB -> 223.259 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10155.839 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 146.719 ms, heap usage 595.969 MB -> 223.688 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (9943.413 ms) ======\n"
    },
    "mnemonics": {
        "times": [
            4407.07,
            4170.886,
            4798.254,
            4325.704,
            4401.321,
            4423.399,
            4212.274,
            3870.559,
            3901.287,
            3842.57,
            3941.168,
            3911.169,
            4284.591,
            3916.627,
            3839.507
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 99.884 ms, heap usage 474.845 MB -> 140.704 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 654\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 30\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 654\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 8\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 30\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 107.38 op/s (107.38 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2355.159 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.272 ms, heap usage 417.715 MB -> 140.976 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 391\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 654\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 8\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 30\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 369.52 op/s (369.52 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1501.636 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 117.471 ms, heap usage 417.934 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 389\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 18\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 654\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 30\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 9\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 579.71 op/s (579.71 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1297.180 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 94.779 ms, heap usage 413.534 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 378\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 654\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 21\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 30\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 9\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 816.33 op/s (816.33 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1293.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 92.075 ms, heap usage 426.056 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 357\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 654\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 21\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 30\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1063.83 op/s (1063.83 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1249.346 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 95.581 ms, heap usage 418.892 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 352\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 654\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 20\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 21\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 30\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 9\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1176.47 op/s (1176.47 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1334.584 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.105 ms, heap usage 426.473 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 654\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 20\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 21\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 30\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 9\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1581.92 op/s (1581.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1244.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 94.646 ms, heap usage 426.542 MB -> 140.982 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 654\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 20\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 21\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 30\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 9\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1693.12 op/s (1693.12 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1258.504 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 97.325 ms, heap usage 419.550 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 654\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 20\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 21\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 30\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 9\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2068.97 op/s (2068.97 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1229.638 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 100.612 ms, heap usage 425.530 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 347\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 654\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 21\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 30\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 9\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2088.77 op/s (2088.77 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1283.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 100.475 ms, heap usage 428.028 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 342\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 654\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 20\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 21\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 30\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 9\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2291.67 op/s (2291.67 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1274.013 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 106.093 ms, heap usage 425.544 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 654\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 20\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 30\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2594.59 op/s (2594.59 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1294.841 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.962 ms, heap usage 428.042 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 356\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 654\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 20\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 21\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 30\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2833.79 op/s (2833.79 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1316.677 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 108.786 ms, heap usage 426.541 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 376\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 654\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 21\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 30\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2909.09 op/s (2909.09 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1288.538 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 100.887 ms, heap usage 429.540 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 654\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 21\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 30\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3174.60 op/s (3174.60 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1240.901 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 103.007 ms, heap usage 237.327 MB -> 152.006 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27277.508 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 174.880 ms, heap usage 545.533 MB -> 428.211 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16106.533 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.468 ms, heap usage 499.806 MB -> 428.386 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15066.216 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 123.746 ms, heap usage 645.445 MB -> 428.468 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15762.538 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 177.869 ms, heap usage 447.164 MB -> 428.570 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17374.380 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 187.540 ms, heap usage 645.473 MB -> 428.690 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14962.007 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 136.469 ms, heap usage 704.869 MB -> 426.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14658.143 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 123.724 ms, heap usage 453.562 MB -> 425.638 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14603.949 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 124.075 ms, heap usage 633.189 MB -> 424.709 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (17942.586 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 175.048 ms, heap usage 451.220 MB -> 423.186 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (18483.089 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 137.864 ms, heap usage 441.911 MB -> 421.969 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15761.761 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 107.539 ms, heap usage 589.907 MB -> 421.950 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14476.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.595 ms, heap usage 523.230 MB -> 421.122 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14696.004 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 108.753 ms, heap usage 432.395 MB -> 421.237 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14477.067 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.999 ms, heap usage 741.845 MB -> 421.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15365.089 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 120.136 ms, heap usage 670.511 MB -> 166.602 MB.\n====== als (apache-spark) [default], iteration 0 completed (16242.914 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.165 ms, heap usage 563.460 MB -> 192.289 MB.\n====== als (apache-spark) [default], iteration 1 completed (9488.938 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.945 ms, heap usage 786.704 MB -> 193.804 MB.\n====== als (apache-spark) [default], iteration 2 completed (7670.718 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 144.180 ms, heap usage 329.914 MB -> 193.476 MB.\n====== als (apache-spark) [default], iteration 3 completed (7697.079 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 133.014 ms, heap usage 815.424 MB -> 194.800 MB.\n====== als (apache-spark) [default], iteration 4 completed (7445.650 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 136.872 ms, heap usage 556.733 MB -> 195.002 MB.\n====== als (apache-spark) [default], iteration 5 completed (7342.850 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.596 ms, heap usage 554.239 MB -> 195.611 MB.\n====== als (apache-spark) [default], iteration 6 completed (7187.678 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 138.631 ms, heap usage 676.961 MB -> 196.254 MB.\n====== als (apache-spark) [default], iteration 7 completed (7143.539 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.248 ms, heap usage 681.638 MB -> 196.657 MB.\n====== als (apache-spark) [default], iteration 8 completed (7226.563 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 453.564 MB -> 196.941 MB.\n====== als (apache-spark) [default], iteration 9 completed (7008.907 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.464 ms, heap usage 474.138 MB -> 197.221 MB.\n====== als (apache-spark) [default], iteration 10 completed (7115.510 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.085 ms, heap usage 690.309 MB -> 197.715 MB.\n====== als (apache-spark) [default], iteration 11 completed (7146.267 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.763 ms, heap usage 572.673 MB -> 197.894 MB.\n====== als (apache-spark) [default], iteration 12 completed (7095.201 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 135.930 ms, heap usage 584.678 MB -> 198.119 MB.\n====== als (apache-spark) [default], iteration 13 completed (6971.348 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 137.644 ms, heap usage 581.828 MB -> 198.355 MB.\n====== als (apache-spark) [default], iteration 14 completed (6979.854 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.282 ms, heap usage 504.108 MB -> 179.036 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4006.612 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 120.417 ms, heap usage 354.983 MB -> 178.720 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3921.837 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.220 ms, heap usage 319.461 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4105.145 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 129.920 ms, heap usage 393.442 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3944.252 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 144.130 ms, heap usage 309.880 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3840.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 133.424 ms, heap usage 383.881 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3691.038 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.450 ms, heap usage 313.318 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3746.948 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 126.174 ms, heap usage 338.191 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3600.261 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 119.146 ms, heap usage 314.008 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3979.465 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 131.119 ms, heap usage 365.249 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4377.627 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 129.949 ms, heap usage 444.999 MB -> 178.755 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4339.527 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 167.269 ms, heap usage 317.160 MB -> 178.748 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4807.433 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 134.076 ms, heap usage 335.253 MB -> 178.754 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3705.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 122.296 ms, heap usage 312.750 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3551.739 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 123.035 ms, heap usage 308.309 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3593.933 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.446 ms, heap usage 351.750 MB -> 201.009 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (319.263 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 148.297 ms, heap usage 229.009 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (207.658 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 127.040 ms, heap usage 231.051 MB -> 201.041 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (191.275 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 129.835 ms, heap usage 231.041 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (187.781 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 130.614 ms, heap usage 231.044 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (176.857 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 149.018 ms, heap usage 231.041 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (183.388 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.478 ms, heap usage 231.541 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (173.602 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 193.626 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (181.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 136.782 ms, heap usage 231.043 MB -> 201.042 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (180.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.982 ms, heap usage 231.045 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (186.855 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 147.037 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (185.105 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 127.462 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (182.080 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.877 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (178.744 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 130.335 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (188.142 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 133.740 ms, heap usage 231.046 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (180.955 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 166.424 ms, heap usage 232.543 MB -> 180.044 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2564.458 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 137.871 ms, heap usage 219.044 MB -> 179.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1146.279 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 122.826 ms, heap usage 398.890 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1098.304 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.622 ms, heap usage 336.672 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1127.043 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 140.409 ms, heap usage 498.560 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1114.171 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 146.888 ms, heap usage 426.824 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1072.079 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 133.685 ms, heap usage 366.737 MB -> 179.977 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1105.541 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.222 ms, heap usage 410.206 MB -> 179.970 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1281.011 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 129.654 ms, heap usage 537.173 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1202.634 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 127.497 ms, heap usage 509.158 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1014.669 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 129.313 ms, heap usage 361.661 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (955.105 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 156.477 ms, heap usage 323.159 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1170.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 133.896 ms, heap usage 507.325 MB -> 179.971 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1292.243 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.754 ms, heap usage 209.136 MB -> 179.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1170.100 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 153.341 ms, heap usage 442.162 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1068.715 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 141.167 ms, heap usage 224.188 MB -> 192.345 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8234.748 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 232.748 ms, heap usage 510.569 MB -> 274.660 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1664.313 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.784 ms, heap usage 720.674 MB -> 275.878 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1890.635 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 190.649 ms, heap usage 575.653 MB -> 275.851 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1458.455 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 169.278 ms, heap usage 668.265 MB -> 276.491 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1373.019 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 130.199 ms, heap usage 669.971 MB -> 276.705 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1170.984 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.856 ms, heap usage 768.517 MB -> 277.132 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1143.404 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 131.945 ms, heap usage 648.504 MB -> 277.036 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1202.090 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 143.181 ms, heap usage 768.833 MB -> 277.565 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1085.209 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.729 ms, heap usage 540.690 MB -> 277.079 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1053.814 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.089 ms, heap usage 549.108 MB -> 277.380 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1164.098 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.787 ms, heap usage 663.712 MB -> 277.818 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1113.593 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 149.944 ms, heap usage 724.431 MB -> 278.314 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1130.170 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.506 ms, heap usage 618.294 MB -> 278.158 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1057.183 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 156.171 ms, heap usage 668.259 MB -> 278.586 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1037.525 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.266 ms, heap usage 824.082 MB -> 212.310 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (15730.894 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 152.758 ms, heap usage 807.061 MB -> 219.160 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (10818.990 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.129 ms, heap usage 801.556 MB -> 220.980 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (11061.199 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.719 ms, heap usage 606.551 MB -> 222.394 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11054.256 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 156.420 ms, heap usage 633.415 MB -> 223.845 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (13661.207 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 234.864 ms, heap usage 255.438 MB -> 223.028 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12302.509 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 224.050 ms, heap usage 665.260 MB -> 223.750 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10705.031 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 161.723 ms, heap usage 826.921 MB -> 223.491 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10285.960 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 159.479 ms, heap usage 317.833 MB -> 223.617 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (9996.145 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 174.736 ms, heap usage 548.973 MB -> 223.613 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10073.767 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 157.036 ms, heap usage 692.389 MB -> 223.565 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10758.398 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 231.883 ms, heap usage 821.173 MB -> 223.980 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10589.361 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 186.274 ms, heap usage 317.897 MB -> 223.369 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10048.025 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 163.098 ms, heap usage 585.847 MB -> 223.259 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10155.839 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 146.719 ms, heap usage 595.969 MB -> 223.688 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (9943.413 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 173.240 ms, heap usage 288.997 MB -> 215.006 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4407.070 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 154.659 ms, heap usage 350.559 MB -> 214.871 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4170.886 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 151.573 ms, heap usage 355.740 MB -> 214.865 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4798.254 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 144.365 ms, heap usage 346.275 MB -> 214.869 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4325.704 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 140.249 ms, heap usage 350.397 MB -> 214.867 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4401.321 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 149.514 ms, heap usage 350.392 MB -> 214.873 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4423.399 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 140.742 ms, heap usage 349.910 MB -> 214.871 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4212.274 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 148.034 ms, heap usage 360.304 MB -> 214.868 MB.\n====== mnemonics (functional) [default], iteration 7 completed (3870.559 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 154.141 ms, heap usage 351.870 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 8 completed (3901.287 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 159.363 ms, heap usage 346.962 MB -> 214.868 MB.\n====== mnemonics (functional) [default], iteration 9 completed (3842.570 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 150.596 ms, heap usage 358.366 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 10 completed (3941.168 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 149.227 ms, heap usage 347.366 MB -> 214.868 MB.\n====== mnemonics (functional) [default], iteration 11 completed (3911.169 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 141.189 ms, heap usage 357.866 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4284.591 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 166.483 ms, heap usage 358.866 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 13 completed (3916.627 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 147.041 ms, heap usage 358.866 MB -> 214.876 MB.\n====== mnemonics (functional) [default], iteration 14 completed (3839.507 ms) ======\n"
    },
    "dotty": {
        "times": [
            11286.78,
            4778.893,
            4566.892,
            3456.948,
            3839.88,
            4011.974,
            2946.419,
            2765.847,
            2462.412,
            2352.753,
            2005.642,
            1935.815,
            1819.545,
            1744.748,
            1656.556
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 99.884 ms, heap usage 474.845 MB -> 140.704 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 654\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 30\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 654\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 8\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 30\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 107.38 op/s (107.38 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2355.159 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.272 ms, heap usage 417.715 MB -> 140.976 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 391\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 654\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 8\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 30\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 369.52 op/s (369.52 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1501.636 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 117.471 ms, heap usage 417.934 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 389\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 18\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 654\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 30\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 9\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 579.71 op/s (579.71 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1297.180 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 94.779 ms, heap usage 413.534 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 378\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 654\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 21\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 30\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 9\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 816.33 op/s (816.33 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1293.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 92.075 ms, heap usage 426.056 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 357\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 654\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 21\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 30\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1063.83 op/s (1063.83 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1249.346 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 95.581 ms, heap usage 418.892 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 352\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 654\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 20\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 21\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 30\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 9\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1176.47 op/s (1176.47 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1334.584 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.105 ms, heap usage 426.473 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 654\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 20\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 21\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 30\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 9\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1581.92 op/s (1581.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1244.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 94.646 ms, heap usage 426.542 MB -> 140.982 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 654\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 20\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 21\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 30\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 9\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1693.12 op/s (1693.12 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1258.504 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 97.325 ms, heap usage 419.550 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 654\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 20\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 21\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 30\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 9\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2068.97 op/s (2068.97 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1229.638 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 100.612 ms, heap usage 425.530 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 347\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 654\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 21\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 30\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 9\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2088.77 op/s (2088.77 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1283.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 100.475 ms, heap usage 428.028 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 342\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 654\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 20\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 21\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 30\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 9\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2291.67 op/s (2291.67 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1274.013 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 106.093 ms, heap usage 425.544 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 654\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 20\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 30\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2594.59 op/s (2594.59 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1294.841 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.962 ms, heap usage 428.042 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 356\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 654\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 20\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 21\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 30\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2833.79 op/s (2833.79 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1316.677 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 108.786 ms, heap usage 426.541 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 376\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 654\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 21\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 30\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2909.09 op/s (2909.09 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1288.538 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 100.887 ms, heap usage 429.540 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 654\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 21\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 30\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3174.60 op/s (3174.60 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1240.901 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 103.007 ms, heap usage 237.327 MB -> 152.006 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27277.508 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 174.880 ms, heap usage 545.533 MB -> 428.211 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16106.533 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.468 ms, heap usage 499.806 MB -> 428.386 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15066.216 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 123.746 ms, heap usage 645.445 MB -> 428.468 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15762.538 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 177.869 ms, heap usage 447.164 MB -> 428.570 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17374.380 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 187.540 ms, heap usage 645.473 MB -> 428.690 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14962.007 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 136.469 ms, heap usage 704.869 MB -> 426.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14658.143 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 123.724 ms, heap usage 453.562 MB -> 425.638 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14603.949 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 124.075 ms, heap usage 633.189 MB -> 424.709 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (17942.586 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 175.048 ms, heap usage 451.220 MB -> 423.186 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (18483.089 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 137.864 ms, heap usage 441.911 MB -> 421.969 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15761.761 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 107.539 ms, heap usage 589.907 MB -> 421.950 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14476.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.595 ms, heap usage 523.230 MB -> 421.122 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14696.004 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 108.753 ms, heap usage 432.395 MB -> 421.237 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14477.067 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.999 ms, heap usage 741.845 MB -> 421.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15365.089 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 120.136 ms, heap usage 670.511 MB -> 166.602 MB.\n====== als (apache-spark) [default], iteration 0 completed (16242.914 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.165 ms, heap usage 563.460 MB -> 192.289 MB.\n====== als (apache-spark) [default], iteration 1 completed (9488.938 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.945 ms, heap usage 786.704 MB -> 193.804 MB.\n====== als (apache-spark) [default], iteration 2 completed (7670.718 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 144.180 ms, heap usage 329.914 MB -> 193.476 MB.\n====== als (apache-spark) [default], iteration 3 completed (7697.079 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 133.014 ms, heap usage 815.424 MB -> 194.800 MB.\n====== als (apache-spark) [default], iteration 4 completed (7445.650 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 136.872 ms, heap usage 556.733 MB -> 195.002 MB.\n====== als (apache-spark) [default], iteration 5 completed (7342.850 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.596 ms, heap usage 554.239 MB -> 195.611 MB.\n====== als (apache-spark) [default], iteration 6 completed (7187.678 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 138.631 ms, heap usage 676.961 MB -> 196.254 MB.\n====== als (apache-spark) [default], iteration 7 completed (7143.539 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.248 ms, heap usage 681.638 MB -> 196.657 MB.\n====== als (apache-spark) [default], iteration 8 completed (7226.563 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 453.564 MB -> 196.941 MB.\n====== als (apache-spark) [default], iteration 9 completed (7008.907 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.464 ms, heap usage 474.138 MB -> 197.221 MB.\n====== als (apache-spark) [default], iteration 10 completed (7115.510 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.085 ms, heap usage 690.309 MB -> 197.715 MB.\n====== als (apache-spark) [default], iteration 11 completed (7146.267 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.763 ms, heap usage 572.673 MB -> 197.894 MB.\n====== als (apache-spark) [default], iteration 12 completed (7095.201 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 135.930 ms, heap usage 584.678 MB -> 198.119 MB.\n====== als (apache-spark) [default], iteration 13 completed (6971.348 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 137.644 ms, heap usage 581.828 MB -> 198.355 MB.\n====== als (apache-spark) [default], iteration 14 completed (6979.854 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.282 ms, heap usage 504.108 MB -> 179.036 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4006.612 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 120.417 ms, heap usage 354.983 MB -> 178.720 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3921.837 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.220 ms, heap usage 319.461 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4105.145 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 129.920 ms, heap usage 393.442 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3944.252 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 144.130 ms, heap usage 309.880 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3840.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 133.424 ms, heap usage 383.881 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3691.038 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.450 ms, heap usage 313.318 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3746.948 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 126.174 ms, heap usage 338.191 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3600.261 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 119.146 ms, heap usage 314.008 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3979.465 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 131.119 ms, heap usage 365.249 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4377.627 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 129.949 ms, heap usage 444.999 MB -> 178.755 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4339.527 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 167.269 ms, heap usage 317.160 MB -> 178.748 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4807.433 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 134.076 ms, heap usage 335.253 MB -> 178.754 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3705.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 122.296 ms, heap usage 312.750 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3551.739 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 123.035 ms, heap usage 308.309 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3593.933 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.446 ms, heap usage 351.750 MB -> 201.009 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (319.263 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 148.297 ms, heap usage 229.009 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (207.658 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 127.040 ms, heap usage 231.051 MB -> 201.041 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (191.275 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 129.835 ms, heap usage 231.041 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (187.781 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 130.614 ms, heap usage 231.044 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (176.857 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 149.018 ms, heap usage 231.041 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (183.388 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.478 ms, heap usage 231.541 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (173.602 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 193.626 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (181.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 136.782 ms, heap usage 231.043 MB -> 201.042 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (180.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.982 ms, heap usage 231.045 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (186.855 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 147.037 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (185.105 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 127.462 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (182.080 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.877 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (178.744 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 130.335 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (188.142 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 133.740 ms, heap usage 231.046 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (180.955 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 166.424 ms, heap usage 232.543 MB -> 180.044 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2564.458 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 137.871 ms, heap usage 219.044 MB -> 179.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1146.279 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 122.826 ms, heap usage 398.890 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1098.304 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.622 ms, heap usage 336.672 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1127.043 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 140.409 ms, heap usage 498.560 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1114.171 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 146.888 ms, heap usage 426.824 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1072.079 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 133.685 ms, heap usage 366.737 MB -> 179.977 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1105.541 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.222 ms, heap usage 410.206 MB -> 179.970 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1281.011 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 129.654 ms, heap usage 537.173 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1202.634 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 127.497 ms, heap usage 509.158 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1014.669 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 129.313 ms, heap usage 361.661 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (955.105 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 156.477 ms, heap usage 323.159 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1170.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 133.896 ms, heap usage 507.325 MB -> 179.971 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1292.243 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.754 ms, heap usage 209.136 MB -> 179.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1170.100 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 153.341 ms, heap usage 442.162 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1068.715 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 141.167 ms, heap usage 224.188 MB -> 192.345 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8234.748 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 232.748 ms, heap usage 510.569 MB -> 274.660 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1664.313 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.784 ms, heap usage 720.674 MB -> 275.878 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1890.635 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 190.649 ms, heap usage 575.653 MB -> 275.851 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1458.455 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 169.278 ms, heap usage 668.265 MB -> 276.491 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1373.019 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 130.199 ms, heap usage 669.971 MB -> 276.705 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1170.984 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.856 ms, heap usage 768.517 MB -> 277.132 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1143.404 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 131.945 ms, heap usage 648.504 MB -> 277.036 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1202.090 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 143.181 ms, heap usage 768.833 MB -> 277.565 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1085.209 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.729 ms, heap usage 540.690 MB -> 277.079 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1053.814 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.089 ms, heap usage 549.108 MB -> 277.380 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1164.098 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.787 ms, heap usage 663.712 MB -> 277.818 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1113.593 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 149.944 ms, heap usage 724.431 MB -> 278.314 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1130.170 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.506 ms, heap usage 618.294 MB -> 278.158 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1057.183 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 156.171 ms, heap usage 668.259 MB -> 278.586 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1037.525 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.266 ms, heap usage 824.082 MB -> 212.310 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (15730.894 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 152.758 ms, heap usage 807.061 MB -> 219.160 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (10818.990 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.129 ms, heap usage 801.556 MB -> 220.980 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (11061.199 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.719 ms, heap usage 606.551 MB -> 222.394 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11054.256 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 156.420 ms, heap usage 633.415 MB -> 223.845 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (13661.207 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 234.864 ms, heap usage 255.438 MB -> 223.028 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12302.509 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 224.050 ms, heap usage 665.260 MB -> 223.750 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10705.031 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 161.723 ms, heap usage 826.921 MB -> 223.491 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10285.960 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 159.479 ms, heap usage 317.833 MB -> 223.617 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (9996.145 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 174.736 ms, heap usage 548.973 MB -> 223.613 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10073.767 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 157.036 ms, heap usage 692.389 MB -> 223.565 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10758.398 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 231.883 ms, heap usage 821.173 MB -> 223.980 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10589.361 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 186.274 ms, heap usage 317.897 MB -> 223.369 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10048.025 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 163.098 ms, heap usage 585.847 MB -> 223.259 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10155.839 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 146.719 ms, heap usage 595.969 MB -> 223.688 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (9943.413 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 173.240 ms, heap usage 288.997 MB -> 215.006 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4407.070 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 154.659 ms, heap usage 350.559 MB -> 214.871 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4170.886 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 151.573 ms, heap usage 355.740 MB -> 214.865 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4798.254 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 144.365 ms, heap usage 346.275 MB -> 214.869 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4325.704 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 140.249 ms, heap usage 350.397 MB -> 214.867 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4401.321 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 149.514 ms, heap usage 350.392 MB -> 214.873 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4423.399 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 140.742 ms, heap usage 349.910 MB -> 214.871 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4212.274 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 148.034 ms, heap usage 360.304 MB -> 214.868 MB.\n====== mnemonics (functional) [default], iteration 7 completed (3870.559 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 154.141 ms, heap usage 351.870 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 8 completed (3901.287 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 159.363 ms, heap usage 346.962 MB -> 214.868 MB.\n====== mnemonics (functional) [default], iteration 9 completed (3842.570 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 150.596 ms, heap usage 358.366 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 10 completed (3941.168 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 149.227 ms, heap usage 347.366 MB -> 214.868 MB.\n====== mnemonics (functional) [default], iteration 11 completed (3911.169 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 141.189 ms, heap usage 357.866 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4284.591 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 166.483 ms, heap usage 358.866 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 13 completed (3916.627 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 147.041 ms, heap usage 358.866 MB -> 214.876 MB.\n====== mnemonics (functional) [default], iteration 14 completed (3839.507 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 229.225 ms, heap usage 360.165 MB -> 217.431 MB.\n====== dotty (scala) [default], iteration 0 completed (11286.780 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 213.542 ms, heap usage 432.459 MB -> 234.168 MB.\n====== dotty (scala) [default], iteration 1 completed (4778.893 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 173.852 ms, heap usage 470.683 MB -> 234.135 MB.\n====== dotty (scala) [default], iteration 2 completed (4566.892 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 187.617 ms, heap usage 466.151 MB -> 234.142 MB.\n====== dotty (scala) [default], iteration 3 completed (3456.948 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 151.751 ms, heap usage 464.650 MB -> 234.152 MB.\n====== dotty (scala) [default], iteration 4 completed (3839.880 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 175.999 ms, heap usage 461.163 MB -> 234.158 MB.\n====== dotty (scala) [default], iteration 5 completed (4011.974 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 194.222 ms, heap usage 459.177 MB -> 234.176 MB.\n====== dotty (scala) [default], iteration 6 completed (2946.419 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 228.040 ms, heap usage 457.192 MB -> 234.176 MB.\n====== dotty (scala) [default], iteration 7 completed (2765.847 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 162.937 ms, heap usage 456.192 MB -> 234.190 MB.\n====== dotty (scala) [default], iteration 8 completed (2462.412 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 179.394 ms, heap usage 454.200 MB -> 234.192 MB.\n====== dotty (scala) [default], iteration 9 completed (2352.753 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 168.810 ms, heap usage 453.209 MB -> 234.190 MB.\n====== dotty (scala) [default], iteration 10 completed (2005.642 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 150.725 ms, heap usage 452.699 MB -> 234.199 MB.\n====== dotty (scala) [default], iteration 11 completed (1935.815 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.577 ms, heap usage 451.716 MB -> 234.207 MB.\n====== dotty (scala) [default], iteration 12 completed (1819.545 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.946 ms, heap usage 450.210 MB -> 234.205 MB.\n====== dotty (scala) [default], iteration 13 completed (1744.748 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 156.903 ms, heap usage 449.221 MB -> 234.210 MB.\n====== dotty (scala) [default], iteration 14 completed (1656.556 ms) ======\n"
    },
    "finagle-chirper": {
        "times": [
            12833.039,
            5719.845,
            4114.2,
            3596.849,
            3370.008,
            3872.646,
            5193.029,
            4120.623,
            3962.141,
            3226.866,
            2725.832,
            2791.413,
            2679.668,
            2737.265,
            2765.55
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 86.191 ms, heap usage 195.641 MB -> 76.023 MB.\n====== scrabble (functional) [default], iteration 0 completed (899.981 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 56.430 ms, heap usage 240.119 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 1 completed (498.337 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 53.214 ms, heap usage 215.828 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 2 completed (442.885 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 57.275 ms, heap usage 182.388 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 3 completed (438.886 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 58.761 ms, heap usage 332.367 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 4 completed (472.559 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 59.278 ms, heap usage 371.849 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 5 completed (503.827 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 54.611 ms, heap usage 145.021 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 6 completed (457.446 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 56.739 ms, heap usage 344.521 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 7 completed (499.128 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 52.249 ms, heap usage 120.126 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 8 completed (445.366 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 53.137 ms, heap usage 295.627 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 9 completed (457.837 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 53.043 ms, heap usage 119.098 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 10 completed (420.014 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 53.665 ms, heap usage 297.808 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 11 completed (457.714 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 54.092 ms, heap usage 355.548 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 12 completed (478.870 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 52.409 ms, heap usage 140.445 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 13 completed (421.878 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 53.451 ms, heap usage 312.811 MB -> 76.109 MB.\n====== scrabble (functional) [default], iteration 14 completed (462.260 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 24.854 ms, heap usage 667.604 MB -> 29.750 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (16347.216 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.859 ms, heap usage 557.377 MB -> 149.070 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10040.119 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 109.080 ms, heap usage 411.316 MB -> 145.910 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (9302.174 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 103.465 ms, heap usage 639.845 MB -> 147.101 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (9373.191 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.240 ms, heap usage 698.795 MB -> 146.236 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9634.175 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 105.585 ms, heap usage 532.617 MB -> 147.358 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9215.846 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 110.402 ms, heap usage 473.324 MB -> 147.486 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10117.223 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.124 ms, heap usage 582.443 MB -> 147.509 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10044.165 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 113.154 ms, heap usage 604.595 MB -> 147.576 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (9354.037 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 125.678 ms, heap usage 543.314 MB -> 147.718 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (9231.966 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.316 ms, heap usage 397.686 MB -> 147.496 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (9408.407 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 156.733 ms, heap usage 650.974 MB -> 147.711 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (11446.415 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 105.556 ms, heap usage 717.436 MB -> 147.837 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10395.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.750 ms, heap usage 617.665 MB -> 147.947 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (10171.583 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 123.870 ms, heap usage 620.813 MB -> 148.005 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10151.700 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 87.959 ms, heap usage 503.349 MB -> 31.705 MB.\n====== future-genetic (functional) [default], iteration 0 completed (3882.286 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 49.436 ms, heap usage 100.931 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2792.248 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 42.224 ms, heap usage 60.333 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2312.138 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 37.400 ms, heap usage 70.816 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2141.341 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 36.558 ms, heap usage 52.618 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2092.204 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.795 ms, heap usage 42.508 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 5 completed (2241.588 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 49.138 ms, heap usage 56.576 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 6 completed (2337.697 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 39.889 ms, heap usage 71.829 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2347.445 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 37.698 ms, heap usage 101.638 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2339.157 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 36.715 ms, heap usage 85.365 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 9 completed (2204.852 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 32.848 ms, heap usage 80.909 MB -> 32.458 MB.\n====== future-genetic (functional) [default], iteration 10 completed (2119.320 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 32.221 ms, heap usage 140.745 MB -> 32.459 MB.\n====== future-genetic (functional) [default], iteration 11 completed (2027.613 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 27.427 ms, heap usage 94.403 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1988.579 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 29.532 ms, heap usage 61.533 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 13 completed (1933.523 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.188 ms, heap usage 75.445 MB -> 32.460 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1937.962 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 32.925 ms, heap usage 41.265 MB -> 33.300 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17659.699 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 295.676 ms, heap usage 439.659 MB -> 97.555 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (16220.799 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 426.822 ms, heap usage 426.739 MB -> 128.760 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14008.772 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 233.084 ms, heap usage 615.667 MB -> 140.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13797.933 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 244.722 ms, heap usage 283.866 MB -> 124.306 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16329.382 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 250.102 ms, heap usage 635.948 MB -> 127.868 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (12876.719 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 501.743 ms, heap usage 479.740 MB -> 126.404 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (14392.108 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 144.650 ms, heap usage 386.452 MB -> 89.472 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (12864.810 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 243.521 ms, heap usage 527.221 MB -> 124.665 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (14454.395 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 161.369 ms, heap usage 225.164 MB -> 98.843 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (12579.178 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 152.143 ms, heap usage 435.711 MB -> 104.044 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13851.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 171.321 ms, heap usage 449.399 MB -> 86.675 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (15074.599 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 245.409 ms, heap usage 649.090 MB -> 113.621 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13921.546 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 282.090 ms, heap usage 564.399 MB -> 116.417 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (14624.850 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 312.509 ms, heap usage 494.586 MB -> 130.906 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (14738.198 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 104.592 ms, heap usage 297.366 MB -> 87.582 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20816.859 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 99.711 ms, heap usage 388.115 MB -> 98.341 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15573.154 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 89.002 ms, heap usage 190.435 MB -> 100.220 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13369.243 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 93.343 ms, heap usage 386.161 MB -> 101.068 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13164.379 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 85.016 ms, heap usage 592.502 MB -> 104.800 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13206.777 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.538 ms, heap usage 457.527 MB -> 101.330 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (12764.537 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 85.997 ms, heap usage 531.414 MB -> 101.760 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13908.070 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 111.521 ms, heap usage 274.027 MB -> 99.398 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (16987.347 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 100.700 ms, heap usage 376.292 MB -> 99.746 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13724.212 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 83.679 ms, heap usage 167.068 MB -> 99.300 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (12472.998 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 77.396 ms, heap usage 170.564 MB -> 99.519 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092320665592 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (13241.048 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 80.928 ms, heap usage 294.287 MB -> 99.408 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12122.304 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 92.922 ms, heap usage 374.393 MB -> 103.103 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12332.289 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 77.414 ms, heap usage 305.464 MB -> 99.798 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12632.250 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 86.870 ms, heap usage 456.946 MB -> 99.748 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12220.801 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 59.826 ms, heap usage 408.396 MB -> 58.066 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3525.191 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 59.643 ms, heap usage 141.066 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2806.160 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 66.179 ms, heap usage 118.062 MB -> 58.073 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2488.994 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 53.730 ms, heap usage 120.573 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2280.421 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 43.810 ms, heap usage 121.074 MB -> 58.074 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2321.620 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 45.210 ms, heap usage 121.074 MB -> 58.075 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2220.106 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 43.238 ms, heap usage 120.601 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2226.588 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 43.539 ms, heap usage 120.527 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2296.314 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.015 ms, heap usage 120.528 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2186.496 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 44.796 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2291.544 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 45.623 ms, heap usage 119.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2210.781 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 43.892 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2310.518 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 41.359 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2168.266 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 45.284 ms, heap usage 120.576 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2174.401 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 44.883 ms, heap usage 120.076 MB -> 58.076 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2295.554 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 50.240 ms, heap usage 113.696 MB -> 63.593 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3540.151 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 119.697 ms, heap usage 243.883 MB -> 209.586 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1269.070 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.082 ms, heap usage 392.872 MB -> 209.656 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (862.690 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 127.937 ms, heap usage 553.929 MB -> 209.706 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (866.642 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 122.256 ms, heap usage 476.971 MB -> 209.754 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (817.272 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 194.718 ms, heap usage 241.631 MB -> 209.802 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (991.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 161.130 ms, heap usage 408.049 MB -> 209.898 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (939.294 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 141.801 ms, heap usage 226.129 MB -> 209.949 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (867.382 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 129.604 ms, heap usage 443.662 MB -> 209.995 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (917.037 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.731 ms, heap usage 306.588 MB -> 210.044 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (800.974 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.226 ms, heap usage 217.473 MB -> 210.070 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (813.862 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.348 ms, heap usage 347.529 MB -> 210.126 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (871.375 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.380 ms, heap usage 443.233 MB -> 210.160 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (741.861 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 130.548 ms, heap usage 349.220 MB -> 210.199 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (895.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 117.965 ms, heap usage 442.724 MB -> 210.231 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (770.188 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 123.093 ms, heap usage 339.731 MB -> 146.589 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (6074.708 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 157.448 ms, heap usage 420.036 MB -> 146.590 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (6670.731 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 123.736 ms, heap usage 328.381 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5473.979 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 119.457 ms, heap usage 235.558 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5620.904 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 112.027 ms, heap usage 206.713 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5506.799 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 110.221 ms, heap usage 398.392 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (6210.052 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 113.819 ms, heap usage 348.840 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5720.032 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 141.532 ms, heap usage 400.536 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5868.848 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.859 ms, heap usage 326.419 MB -> 146.591 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5345.323 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 157.964 ms, heap usage 204.232 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5946.847 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 109.366 ms, heap usage 424.240 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (6122.420 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 110.509 ms, heap usage 347.319 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5660.654 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 115.907 ms, heap usage 206.589 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (6489.927 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 131.656 ms, heap usage 423.574 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5930.652 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 128.391 ms, heap usage 345.042 MB -> 146.592 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5951.339 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 126.688 ms, heap usage 243.645 MB -> 97.843 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (706.858 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 111.019 ms, heap usage 251.843 MB -> 98.160 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (313.100 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 88.560 ms, heap usage 241.683 MB -> 98.157 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (336.652 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 92.659 ms, heap usage 241.657 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (213.963 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 86.400 ms, heap usage 240.156 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (194.300 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 85.885 ms, heap usage 239.501 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (179.296 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 90.235 ms, heap usage 239.010 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (179.757 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 94.152 ms, heap usage 241.603 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (181.420 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 97.319 ms, heap usage 241.444 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (171.547 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 93.752 ms, heap usage 240.972 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (171.237 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.464 ms, heap usage 240.935 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (158.684 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 95.257 ms, heap usage 241.015 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (162.243 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 91.416 ms, heap usage 240.939 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (156.064 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 86.939 ms, heap usage 241.044 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (191.825 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 76.801 ms, heap usage 241.041 MB -> 98.158 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (145.206 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 75.612 ms, heap usage 175.499 MB -> 100.620 MB.\n====== db-shootout (database) [default], iteration 0 completed (8313.241 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 58.184 ms, heap usage 223.759 MB -> 111.697 MB.\n====== db-shootout (database) [default], iteration 1 completed (7948.742 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 76.618 ms, heap usage 335.823 MB -> 108.927 MB.\n====== db-shootout (database) [default], iteration 2 completed (8400.426 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 63.445 ms, heap usage 298.942 MB -> 111.799 MB.\n====== db-shootout (database) [default], iteration 3 completed (8110.306 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 59.067 ms, heap usage 163.441 MB -> 107.250 MB.\n====== db-shootout (database) [default], iteration 4 completed (6172.210 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 66.017 ms, heap usage 189.849 MB -> 109.673 MB.\n====== db-shootout (database) [default], iteration 5 completed (6483.046 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 97.754 ms, heap usage 411.268 MB -> 110.150 MB.\n====== db-shootout (database) [default], iteration 6 completed (7517.193 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 91.632 ms, heap usage 531.789 MB -> 111.594 MB.\n====== db-shootout (database) [default], iteration 7 completed (7809.097 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 76.978 ms, heap usage 267.021 MB -> 110.184 MB.\n====== db-shootout (database) [default], iteration 8 completed (7666.640 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 84.669 ms, heap usage 230.913 MB -> 109.903 MB.\n====== db-shootout (database) [default], iteration 9 completed (8233.111 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 80.414 ms, heap usage 188.934 MB -> 107.095 MB.\n====== db-shootout (database) [default], iteration 10 completed (8232.336 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 68.149 ms, heap usage 238.478 MB -> 111.412 MB.\n====== db-shootout (database) [default], iteration 11 completed (7355.504 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 72.953 ms, heap usage 453.166 MB -> 109.087 MB.\n====== db-shootout (database) [default], iteration 12 completed (7537.162 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 79.700 ms, heap usage 272.245 MB -> 110.965 MB.\n====== db-shootout (database) [default], iteration 13 completed (7289.845 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 62.308 ms, heap usage 170.020 MB -> 110.927 MB.\n====== db-shootout (database) [default], iteration 14 completed (7289.296 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :33513 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 73.735 ms, heap usage 303.491 MB -> 111.042 MB.\n====== finagle-http (web) [default], iteration 0 completed (10459.566 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 91.774 ms, heap usage 285.537 MB -> 114.830 MB.\n====== finagle-http (web) [default], iteration 1 completed (6629.023 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 89.003 ms, heap usage 141.721 MB -> 114.866 MB.\n====== finagle-http (web) [default], iteration 2 completed (3741.552 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 83.554 ms, heap usage 138.402 MB -> 114.903 MB.\n====== finagle-http (web) [default], iteration 3 completed (3277.347 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.021 ms, heap usage 138.726 MB -> 114.905 MB.\n====== finagle-http (web) [default], iteration 4 completed (3530.520 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 82.831 ms, heap usage 138.358 MB -> 114.929 MB.\n====== finagle-http (web) [default], iteration 5 completed (3534.453 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 91.626 ms, heap usage 136.136 MB -> 114.942 MB.\n====== finagle-http (web) [default], iteration 6 completed (3920.022 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 81.625 ms, heap usage 136.714 MB -> 114.949 MB.\n====== finagle-http (web) [default], iteration 7 completed (5105.618 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 77.988 ms, heap usage 138.068 MB -> 114.986 MB.\n====== finagle-http (web) [default], iteration 8 completed (3805.646 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 89.398 ms, heap usage 136.160 MB -> 115.102 MB.\n====== finagle-http (web) [default], iteration 9 completed (3568.703 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 77.592 ms, heap usage 138.490 MB -> 115.252 MB.\n====== finagle-http (web) [default], iteration 10 completed (3932.545 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 98.308 ms, heap usage 136.711 MB -> 114.947 MB.\n====== finagle-http (web) [default], iteration 11 completed (4332.744 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 85.107 ms, heap usage 137.794 MB -> 114.964 MB.\n====== finagle-http (web) [default], iteration 12 completed (3654.879 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 87.955 ms, heap usage 136.786 MB -> 114.950 MB.\n====== finagle-http (web) [default], iteration 13 completed (3660.310 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 87.465 ms, heap usage 136.785 MB -> 114.961 MB.\n====== finagle-http (web) [default], iteration 14 completed (3553.252 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 104.498 ms, heap usage 150.497 MB -> 116.330 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (16490.575 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 93.153 ms, heap usage 621.585 MB -> 112.549 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13002.033 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 77.441 ms, heap usage 661.871 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12876.561 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 113.619 ms, heap usage 617.624 MB -> 112.553 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (15379.906 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 98.029 ms, heap usage 615.771 MB -> 112.558 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12092.067 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 82.504 ms, heap usage 636.582 MB -> 112.505 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (12399.379 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 71.726 ms, heap usage 638.951 MB -> 112.552 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12711.379 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 99.701 ms, heap usage 634.444 MB -> 112.545 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (13876.012 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 97.968 ms, heap usage 630.249 MB -> 112.557 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12783.285 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 87.653 ms, heap usage 637.877 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11713.636 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 69.125 ms, heap usage 654.336 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11434.495 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 72.335 ms, heap usage 639.266 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (11604.009 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 68.142 ms, heap usage 677.993 MB -> 112.547 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12360.293 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 72.669 ms, heap usage 646.189 MB -> 112.551 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (11745.478 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 94.611 ms, heap usage 632.222 MB -> 112.548 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12094.827 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 89.824 ms, heap usage 222.600 MB -> 125.523 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8337.217 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 120.246 ms, heap usage 441.590 MB -> 158.146 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2065.085 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 115.099 ms, heap usage 488.454 MB -> 158.396 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1589.954 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 90.851 ms, heap usage 479.732 MB -> 158.784 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1334.057 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 92.232 ms, heap usage 475.926 MB -> 158.929 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1415.705 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 89.630 ms, heap usage 463.553 MB -> 159.268 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1293.435 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.953 ms, heap usage 439.676 MB -> 159.485 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1314.302 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 91.884 ms, heap usage 431.414 MB -> 159.639 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1288.444 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 97.834 ms, heap usage 441.609 MB -> 159.800 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1310.338 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 100.683 ms, heap usage 471.939 MB -> 159.948 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1298.899 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 103.514 ms, heap usage 449.740 MB -> 160.063 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1308.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 98.582 ms, heap usage 471.610 MB -> 160.137 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1245.277 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 98.992 ms, heap usage 465.078 MB -> 160.170 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1212.961 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.802 ms, heap usage 465.319 MB -> 160.414 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1294.804 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.472 ms, heap usage 465.033 MB -> 160.553 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1178.888 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 99.884 ms, heap usage 474.845 MB -> 140.704 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 654\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 8\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 30\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 654\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 8\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 30\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 107.38 op/s (107.38 op/s including failed)\nElapsed time: 0.75 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2355.159 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 112.272 ms, heap usage 417.715 MB -> 140.976 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 391\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 654\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 11\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 8\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 30\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 9\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 369.52 op/s (369.52 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1501.636 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 117.471 ms, heap usage 417.934 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 389\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 18\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 654\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 11\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 8\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 30\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 9\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 579.71 op/s (579.71 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1297.180 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 94.779 ms, heap usage 413.534 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 378\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 15\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 654\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 15\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 21\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 30\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 9\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 816.33 op/s (816.33 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1293.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 92.075 ms, heap usage 426.056 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 357\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 654\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 15\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 21\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 30\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1063.83 op/s (1063.83 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1249.346 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 95.581 ms, heap usage 418.892 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 352\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 20\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 654\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 20\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 21\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 30\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 9\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1176.47 op/s (1176.47 op/s including failed)\nElapsed time: 0.41 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1334.584 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 103.105 ms, heap usage 426.473 MB -> 140.974 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 654\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 20\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 21\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 30\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 9\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1581.92 op/s (1581.92 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1244.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 94.646 ms, heap usage 426.542 MB -> 140.982 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 368\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 654\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 20\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 21\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 30\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 9\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1693.12 op/s (1693.12 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1258.504 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 97.325 ms, heap usage 419.550 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 339\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 654\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 20\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 21\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 30\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 9\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2068.97 op/s (2068.97 op/s including failed)\nElapsed time: 0.35 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1229.638 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 100.612 ms, heap usage 425.530 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 347\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 654\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 20\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 21\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 30\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 9\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2088.77 op/s (2088.77 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1283.630 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 100.475 ms, heap usage 428.028 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 342\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 654\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 20\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 21\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 30\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 9\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2291.67 op/s (2291.67 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1274.013 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 106.093 ms, heap usage 425.544 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 654\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 20\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 30\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 16\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2594.59 op/s (2594.59 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1294.841 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 97.962 ms, heap usage 428.042 MB -> 140.979 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 356\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 654\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 20\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 21\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 30\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 16\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2833.79 op/s (2833.79 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1316.677 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 108.786 ms, heap usage 426.541 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 376\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 654\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 20\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 21\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 30\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 16\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2909.09 op/s (2909.09 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1288.538 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 100.887 ms, heap usage 429.540 MB -> 140.977 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 365\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 654\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 20\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 21\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 30\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 16\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 3174.60 op/s (3174.60 op/s including failed)\nElapsed time: 0.38 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1240.901 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 103.007 ms, heap usage 237.327 MB -> 152.006 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (27277.508 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 174.880 ms, heap usage 545.533 MB -> 428.211 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16106.533 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.468 ms, heap usage 499.806 MB -> 428.386 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15066.216 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 123.746 ms, heap usage 645.445 MB -> 428.468 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15762.538 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 177.869 ms, heap usage 447.164 MB -> 428.570 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (17374.380 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 187.540 ms, heap usage 645.473 MB -> 428.690 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (14962.007 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 136.469 ms, heap usage 704.869 MB -> 426.481 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14658.143 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 123.724 ms, heap usage 453.562 MB -> 425.638 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (14603.949 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 124.075 ms, heap usage 633.189 MB -> 424.709 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (17942.586 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 175.048 ms, heap usage 451.220 MB -> 423.186 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (18483.089 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 137.864 ms, heap usage 441.911 MB -> 421.969 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15761.761 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 107.539 ms, heap usage 589.907 MB -> 421.950 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14476.658 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 107.595 ms, heap usage 523.230 MB -> 421.122 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (14696.004 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 108.753 ms, heap usage 432.395 MB -> 421.237 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (14477.067 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 105.999 ms, heap usage 741.845 MB -> 421.308 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (15365.089 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 120.136 ms, heap usage 670.511 MB -> 166.602 MB.\n====== als (apache-spark) [default], iteration 0 completed (16242.914 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.165 ms, heap usage 563.460 MB -> 192.289 MB.\n====== als (apache-spark) [default], iteration 1 completed (9488.938 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 131.945 ms, heap usage 786.704 MB -> 193.804 MB.\n====== als (apache-spark) [default], iteration 2 completed (7670.718 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 144.180 ms, heap usage 329.914 MB -> 193.476 MB.\n====== als (apache-spark) [default], iteration 3 completed (7697.079 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 133.014 ms, heap usage 815.424 MB -> 194.800 MB.\n====== als (apache-spark) [default], iteration 4 completed (7445.650 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 136.872 ms, heap usage 556.733 MB -> 195.002 MB.\n====== als (apache-spark) [default], iteration 5 completed (7342.850 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 126.596 ms, heap usage 554.239 MB -> 195.611 MB.\n====== als (apache-spark) [default], iteration 6 completed (7187.678 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 138.631 ms, heap usage 676.961 MB -> 196.254 MB.\n====== als (apache-spark) [default], iteration 7 completed (7143.539 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 136.248 ms, heap usage 681.638 MB -> 196.657 MB.\n====== als (apache-spark) [default], iteration 8 completed (7226.563 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 132.203 ms, heap usage 453.564 MB -> 196.941 MB.\n====== als (apache-spark) [default], iteration 9 completed (7008.907 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.464 ms, heap usage 474.138 MB -> 197.221 MB.\n====== als (apache-spark) [default], iteration 10 completed (7115.510 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 137.085 ms, heap usage 690.309 MB -> 197.715 MB.\n====== als (apache-spark) [default], iteration 11 completed (7146.267 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 138.763 ms, heap usage 572.673 MB -> 197.894 MB.\n====== als (apache-spark) [default], iteration 12 completed (7095.201 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 135.930 ms, heap usage 584.678 MB -> 198.119 MB.\n====== als (apache-spark) [default], iteration 13 completed (6971.348 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 137.644 ms, heap usage 581.828 MB -> 198.355 MB.\n====== als (apache-spark) [default], iteration 14 completed (6979.854 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 131.282 ms, heap usage 504.108 MB -> 179.036 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4006.612 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 120.417 ms, heap usage 354.983 MB -> 178.720 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3921.837 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 126.220 ms, heap usage 319.461 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4105.145 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 129.920 ms, heap usage 393.442 MB -> 178.756 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3944.252 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 144.130 ms, heap usage 309.880 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3840.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 133.424 ms, heap usage 383.881 MB -> 178.752 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3691.038 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 125.450 ms, heap usage 313.318 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3746.948 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 126.174 ms, heap usage 338.191 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (3600.261 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 119.146 ms, heap usage 314.008 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3979.465 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 131.119 ms, heap usage 365.249 MB -> 178.753 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4377.627 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 129.949 ms, heap usage 444.999 MB -> 178.755 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4339.527 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 167.269 ms, heap usage 317.160 MB -> 178.748 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4807.433 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 134.076 ms, heap usage 335.253 MB -> 178.754 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (3705.283 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 122.296 ms, heap usage 312.750 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3551.739 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 123.035 ms, heap usage 308.309 MB -> 178.749 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3593.933 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.446 ms, heap usage 351.750 MB -> 201.009 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (319.263 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 148.297 ms, heap usage 229.009 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (207.658 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 127.040 ms, heap usage 231.051 MB -> 201.041 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (191.275 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 129.835 ms, heap usage 231.041 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (187.781 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 130.614 ms, heap usage 231.044 MB -> 201.044 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (176.857 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 149.018 ms, heap usage 231.041 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (183.388 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 128.478 ms, heap usage 231.541 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (173.602 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 193.626 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (181.314 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 136.782 ms, heap usage 231.043 MB -> 201.042 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (180.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.982 ms, heap usage 231.045 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (186.855 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 147.037 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (185.105 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 127.462 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (182.080 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 138.877 ms, heap usage 231.043 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (178.744 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 130.335 ms, heap usage 231.043 MB -> 201.046 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (188.142 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 133.740 ms, heap usage 231.046 MB -> 201.043 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (180.955 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 166.424 ms, heap usage 232.543 MB -> 180.044 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2564.458 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 137.871 ms, heap usage 219.044 MB -> 179.965 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1146.279 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 122.826 ms, heap usage 398.890 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1098.304 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 127.622 ms, heap usage 336.672 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1127.043 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 140.409 ms, heap usage 498.560 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1114.171 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 146.888 ms, heap usage 426.824 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1072.079 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 133.685 ms, heap usage 366.737 MB -> 179.977 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (1105.541 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 124.222 ms, heap usage 410.206 MB -> 179.970 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1281.011 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 129.654 ms, heap usage 537.173 MB -> 179.967 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1202.634 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 127.497 ms, heap usage 509.158 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1014.669 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 129.313 ms, heap usage 361.661 MB -> 179.968 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (955.105 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 156.477 ms, heap usage 323.159 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1170.504 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 133.896 ms, heap usage 507.325 MB -> 179.971 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1292.243 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 159.754 ms, heap usage 209.136 MB -> 179.969 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1170.100 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 153.341 ms, heap usage 442.162 MB -> 179.974 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1068.715 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 141.167 ms, heap usage 224.188 MB -> 192.345 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8234.748 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 232.748 ms, heap usage 510.569 MB -> 274.660 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1664.313 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.784 ms, heap usage 720.674 MB -> 275.878 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1890.635 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 190.649 ms, heap usage 575.653 MB -> 275.851 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1458.455 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 169.278 ms, heap usage 668.265 MB -> 276.491 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1373.019 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 130.199 ms, heap usage 669.971 MB -> 276.705 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1170.984 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.856 ms, heap usage 768.517 MB -> 277.132 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1143.404 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 131.945 ms, heap usage 648.504 MB -> 277.036 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1202.090 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 143.181 ms, heap usage 768.833 MB -> 277.565 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1085.209 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 131.729 ms, heap usage 540.690 MB -> 277.079 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1053.814 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 160.089 ms, heap usage 549.108 MB -> 277.380 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1164.098 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.787 ms, heap usage 663.712 MB -> 277.818 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1113.593 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 149.944 ms, heap usage 724.431 MB -> 278.314 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1130.170 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 128.506 ms, heap usage 618.294 MB -> 278.158 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1057.183 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 156.171 ms, heap usage 668.259 MB -> 278.586 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1037.525 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 163.266 ms, heap usage 824.082 MB -> 212.310 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (15730.894 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 152.758 ms, heap usage 807.061 MB -> 219.160 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (10818.990 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 160.129 ms, heap usage 801.556 MB -> 220.980 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (11061.199 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 188.719 ms, heap usage 606.551 MB -> 222.394 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11054.256 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 156.420 ms, heap usage 633.415 MB -> 223.845 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (13661.207 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 234.864 ms, heap usage 255.438 MB -> 223.028 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12302.509 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 224.050 ms, heap usage 665.260 MB -> 223.750 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (10705.031 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 161.723 ms, heap usage 826.921 MB -> 223.491 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10285.960 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 159.479 ms, heap usage 317.833 MB -> 223.617 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (9996.145 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 174.736 ms, heap usage 548.973 MB -> 223.613 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10073.767 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 157.036 ms, heap usage 692.389 MB -> 223.565 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (10758.398 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 231.883 ms, heap usage 821.173 MB -> 223.980 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10589.361 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 186.274 ms, heap usage 317.897 MB -> 223.369 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10048.025 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 163.098 ms, heap usage 585.847 MB -> 223.259 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10155.839 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 146.719 ms, heap usage 595.969 MB -> 223.688 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (9943.413 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 173.240 ms, heap usage 288.997 MB -> 215.006 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4407.070 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 154.659 ms, heap usage 350.559 MB -> 214.871 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4170.886 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 151.573 ms, heap usage 355.740 MB -> 214.865 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4798.254 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 144.365 ms, heap usage 346.275 MB -> 214.869 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4325.704 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 140.249 ms, heap usage 350.397 MB -> 214.867 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4401.321 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 149.514 ms, heap usage 350.392 MB -> 214.873 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4423.399 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 140.742 ms, heap usage 349.910 MB -> 214.871 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4212.274 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 148.034 ms, heap usage 360.304 MB -> 214.868 MB.\n====== mnemonics (functional) [default], iteration 7 completed (3870.559 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 154.141 ms, heap usage 351.870 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 8 completed (3901.287 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 159.363 ms, heap usage 346.962 MB -> 214.868 MB.\n====== mnemonics (functional) [default], iteration 9 completed (3842.570 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 150.596 ms, heap usage 358.366 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 10 completed (3941.168 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 149.227 ms, heap usage 347.366 MB -> 214.868 MB.\n====== mnemonics (functional) [default], iteration 11 completed (3911.169 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 141.189 ms, heap usage 357.866 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4284.591 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 166.483 ms, heap usage 358.866 MB -> 214.866 MB.\n====== mnemonics (functional) [default], iteration 13 completed (3916.627 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 147.041 ms, heap usage 358.866 MB -> 214.876 MB.\n====== mnemonics (functional) [default], iteration 14 completed (3839.507 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 229.225 ms, heap usage 360.165 MB -> 217.431 MB.\n====== dotty (scala) [default], iteration 0 completed (11286.780 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 213.542 ms, heap usage 432.459 MB -> 234.168 MB.\n====== dotty (scala) [default], iteration 1 completed (4778.893 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 173.852 ms, heap usage 470.683 MB -> 234.135 MB.\n====== dotty (scala) [default], iteration 2 completed (4566.892 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 187.617 ms, heap usage 466.151 MB -> 234.142 MB.\n====== dotty (scala) [default], iteration 3 completed (3456.948 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 151.751 ms, heap usage 464.650 MB -> 234.152 MB.\n====== dotty (scala) [default], iteration 4 completed (3839.880 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 175.999 ms, heap usage 461.163 MB -> 234.158 MB.\n====== dotty (scala) [default], iteration 5 completed (4011.974 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 194.222 ms, heap usage 459.177 MB -> 234.176 MB.\n====== dotty (scala) [default], iteration 6 completed (2946.419 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 228.040 ms, heap usage 457.192 MB -> 234.176 MB.\n====== dotty (scala) [default], iteration 7 completed (2765.847 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 162.937 ms, heap usage 456.192 MB -> 234.190 MB.\n====== dotty (scala) [default], iteration 8 completed (2462.412 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 179.394 ms, heap usage 454.200 MB -> 234.192 MB.\n====== dotty (scala) [default], iteration 9 completed (2352.753 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 168.810 ms, heap usage 453.209 MB -> 234.190 MB.\n====== dotty (scala) [default], iteration 10 completed (2005.642 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 150.725 ms, heap usage 452.699 MB -> 234.199 MB.\n====== dotty (scala) [default], iteration 11 completed (1935.815 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.577 ms, heap usage 451.716 MB -> 234.207 MB.\n====== dotty (scala) [default], iteration 12 completed (1819.545 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.946 ms, heap usage 450.210 MB -> 234.205 MB.\n====== dotty (scala) [default], iteration 13 completed (1744.748 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 156.903 ms, heap usage 449.221 MB -> 234.210 MB.\n====== dotty (scala) [default], iteration 14 completed (1656.556 ms) ======\nMaster port: 33757\nCache ports: 45547, 45449, 43733, 33801\n====== finagle-chirper (web) [default], iteration 0 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 277.447 ms, heap usage 578.208 MB -> 227.258 MB.\n====== finagle-chirper (web) [default], iteration 0 completed (12833.039 ms) ======\n====== finagle-chirper (web) [default], iteration 1 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 198.663 ms, heap usage 383.653 MB -> 229.121 MB.\n====== finagle-chirper (web) [default], iteration 1 completed (5719.845 ms) ======\n====== finagle-chirper (web) [default], iteration 2 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 154.965 ms, heap usage 248.572 MB -> 229.184 MB.\n====== finagle-chirper (web) [default], iteration 2 completed (4114.200 ms) ======\n====== finagle-chirper (web) [default], iteration 3 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 164.783 ms, heap usage 609.377 MB -> 230.269 MB.\n====== finagle-chirper (web) [default], iteration 3 completed (3596.849 ms) ======\n====== finagle-chirper (web) [default], iteration 4 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 167.997 ms, heap usage 581.501 MB -> 229.699 MB.\n====== finagle-chirper (web) [default], iteration 4 completed (3370.008 ms) ======\n====== finagle-chirper (web) [default], iteration 5 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 158.147 ms, heap usage 546.421 MB -> 229.724 MB.\n====== finagle-chirper (web) [default], iteration 5 completed (3872.646 ms) ======\n====== finagle-chirper (web) [default], iteration 6 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 226.528 ms, heap usage 524.718 MB -> 232.296 MB.\n====== finagle-chirper (web) [default], iteration 6 completed (5193.029 ms) ======\n====== finagle-chirper (web) [default], iteration 7 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 195.115 ms, heap usage 496.786 MB -> 229.057 MB.\n====== finagle-chirper (web) [default], iteration 7 completed (4120.623 ms) ======\n====== finagle-chirper (web) [default], iteration 8 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 190.741 ms, heap usage 449.006 MB -> 230.073 MB.\n====== finagle-chirper (web) [default], iteration 8 completed (3962.141 ms) ======\n====== finagle-chirper (web) [default], iteration 9 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 1499.250 ms, heap usage 450.659 MB -> 229.768 MB.\n====== finagle-chirper (web) [default], iteration 9 completed (3226.866 ms) ======\n====== finagle-chirper (web) [default], iteration 10 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 143.236 ms, heap usage 413.268 MB -> 229.783 MB.\n====== finagle-chirper (web) [default], iteration 10 completed (2725.832 ms) ======\n====== finagle-chirper (web) [default], iteration 11 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 149.966 ms, heap usage 370.778 MB -> 229.786 MB.\n====== finagle-chirper (web) [default], iteration 11 completed (2791.413 ms) ======\n====== finagle-chirper (web) [default], iteration 12 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 200.152 ms, heap usage 381.781 MB -> 229.688 MB.\n====== finagle-chirper (web) [default], iteration 12 completed (2679.668 ms) ======\n====== finagle-chirper (web) [default], iteration 13 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 141.183 ms, heap usage 384.110 MB -> 229.738 MB.\n====== finagle-chirper (web) [default], iteration 13 completed (2737.265 ms) ======\n====== finagle-chirper (web) [default], iteration 14 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 194.114 ms, heap usage 383.302 MB -> 228.635 MB.\n====== finagle-chirper (web) [default], iteration 14 completed (2765.550 ms) ======\n"
    },
    "times": [
        222311.99300000002,
        145354.409,
        131066.038,
        129903.243,
        131632.081,
        125281.528,
        128057.903,
        130349.687,
        127672.53600000001,
        123876.329,
        123480.075,
        124090.103,
        121684.833,
        120225.76,
        120461.469
    ]
}