{
    "scrabble": {
        "times": [
            1247.42,
            519.726,
            500.332,
            499.056,
            518.238,
            474.248,
            501.093,
            501.223,
            560.784,
            541.993,
            516.476,
            503.86,
            532.234,
            495.035,
            542.322
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\n"
    },
    "page-rank": {
        "times": [
            18333.425,
            10890.555,
            10149.645,
            10026.112,
            9943.985,
            9962.936,
            10659.16,
            10002.758,
            10170.581,
            10148.256,
            10139.991,
            10025.645,
            10158.044,
            9754.571,
            10125.885
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n"
    },
    "future-genetic": {
        "times": [
            4075.839,
            2492.48,
            2320.043,
            2509.58,
            2127.267,
            1923.365,
            1937.146,
            2092.379,
            2031.389,
            1913.039,
            1949.902,
            1928.874,
            1911.125,
            2000.194,
            1970.981
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n"
    },
    "akka-uct": {
        "times": [
            15935.193,
            13412.718,
            14143.227,
            13124.072,
            13099.718,
            13123.45,
            13268.025,
            13088.727,
            13113.008,
            13147.429,
            13623.365,
            13791.27,
            13106.205,
            13214.86,
            13534.111
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\n"
    },
    "movie-lens": {
        "times": [
            20754.159,
            15368.327,
            14234.015,
            13679.034,
            13920.272,
            14324.242,
            13218.296,
            13131.065,
            13414.194,
            13684.528,
            12975.23,
            12594.024,
            13190.98,
            13318.099,
            12459.964
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n"
    },
    "scala-doku": {
        "times": [
            3017.134,
            3149.704,
            2463.094,
            2266.786,
            2281.474,
            2284.318,
            2729.023,
            2484.184,
            2178.043,
            2257.35,
            2261.811,
            2366.308,
            2147.709,
            2166.231,
            2210.44
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\n"
    },
    "chi-square": {
        "times": [
            3862.221,
            1409.467,
            904.022,
            895.645,
            809.765,
            795.749,
            809.822,
            753.053,
            998.505,
            756.024,
            786.045,
            793.786,
            713.755,
            714.456,
            734.237
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n"
    },
    "fj-kmeans": {
        "times": [
            5522.017,
            5413.209,
            5334.512,
            5274.831,
            5374.565,
            5628.537,
            5232.1,
            5221.05,
            5434.14,
            5409.465,
            5422.728,
            5300.462,
            5469.832,
            5466.676,
            5370.02
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n"
    },
    "rx-scrabble": {
        "times": [
            550.632,
            259.619,
            241.665,
            154.293,
            195.019,
            189.147,
            156.217,
            131.2,
            133.6,
            136.05,
            135.977,
            148.328,
            124.522,
            141.262,
            174.341
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n"
    },
    "db-shootout": {
        "times": [
            7921.486,
            7153.517,
            6705.215,
            6847.192,
            38639.164,
            8496.518,
            7166.695,
            6628.162,
            6674.077,
            7651.311,
            6174.532,
            6757.281,
            7412.439,
            8415.828,
            6844.995
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\n"
    },
    "finagle-http": {
        "times": [
            11784.871,
            5425.983,
            3568.676,
            3561.822,
            3672.762,
            3549.174,
            3488.919,
            3419.612,
            3409.868,
            3502.624,
            3500.756,
            3401.718,
            3388.963,
            3342.611,
            3759.582
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n"
    },
    "reactors": {
        "times": [
            15185.287,
            12630.825,
            11864.62,
            12158.928,
            12811.382,
            13854.114,
            11865.609,
            11833.934,
            11997.372,
            11861.611,
            11740.871,
            13741.628,
            12254.163,
            12440.648,
            12057.512
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\n"
    },
    "dec-tree": {
        "times": [
            8474.153,
            2036.309,
            1527.717,
            1467.679,
            1398.499,
            1387.412,
            1378.916,
            1333.623,
            1404.75,
            1338.875,
            1373.013,
            1353.239,
            1279.847,
            1234.0,
            1229.617
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n"
    },
    "scala-stm-bench7": {
        "times": [
            2316.732,
            1620.055,
            1751.244,
            1498.397,
            1485.473,
            1294.184,
            1330.292,
            1332.508,
            1291.31,
            1295.507,
            1292.799,
            1296.932,
            1311.387,
            1282.596,
            1348.589
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 91.867 ms, heap usage 498.175 MB -> 140.678 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 36\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 631\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 36\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 110.19 op/s (110.19 op/s including failed)\nElapsed time: 0.73 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.732 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 117.581 ms, heap usage 448.307 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 426\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 631\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 13\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 6\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 36\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 319.36 op/s (319.36 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1620.055 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 115.483 ms, heap usage 503.630 MB -> 140.870 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 561\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 631\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 13\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 6\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 36\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 6\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 413.79 op/s (413.79 op/s including failed)\nElapsed time: 0.58 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1751.244 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 137.645 ms, heap usage 515.170 MB -> 140.871 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 419\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 631\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 13\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 6\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 36\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 6\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 747.66 op/s (747.66 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1498.397 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 138.412 ms, heap usage 518.846 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 442\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 631\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 13\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 6\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 36\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 843.88 op/s (843.88 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1485.473 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.809 ms, heap usage 517.836 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 631\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 36\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 6\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1227.62 op/s (1227.62 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1294.184 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 107.109 ms, heap usage 517.833 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 631\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 13\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 6\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 36\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 21\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1450.78 op/s (1450.78 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1330.292 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 119.205 ms, heap usage 515.905 MB -> 140.875 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 400\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 631\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 6\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 36\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 21\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1531.10 op/s (1531.10 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1332.508 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 106.557 ms, heap usage 515.959 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 631\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 6\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 36\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 21\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1951.22 op/s (1951.22 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1291.310 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 121.036 ms, heap usage 516.936 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 631\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 6\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 36\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2077.92 op/s (2077.92 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.507 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 105.681 ms, heap usage 515.444 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 631\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 6\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 36\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 21\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2100.24 op/s (2100.24 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1292.799 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 111.082 ms, heap usage 517.649 MB -> 140.873 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 631\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 6\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 36\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 21\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2400.00 op/s (2400.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1296.932 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 103.201 ms, heap usage 516.676 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 631\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 6\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 36\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 21\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2795.70 op/s (2795.70 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1311.387 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.056 ms, heap usage 514.568 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 369\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 631\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 6\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 36\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 21\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2871.79 op/s (2871.79 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1282.596 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 97.337 ms, heap usage 514.680 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 434\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 631\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 6\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 36\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 21\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2597.40 op/s (2597.40 op/s including failed)\nElapsed time: 0.46 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1348.589 ms) ======\n"
    },
    "naive-bayes": {
        "times": [
            28757.463,
            16046.657,
            15708.858,
            15390.484,
            15157.333,
            15079.515,
            14948.829,
            16022.884,
            14993.032,
            15394.246,
            15936.975,
            14731.792,
            15087.963,
            15253.905,
            14951.152
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 91.867 ms, heap usage 498.175 MB -> 140.678 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 36\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 631\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 36\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 110.19 op/s (110.19 op/s including failed)\nElapsed time: 0.73 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.732 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 117.581 ms, heap usage 448.307 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 426\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 631\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 13\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 6\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 36\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 319.36 op/s (319.36 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1620.055 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 115.483 ms, heap usage 503.630 MB -> 140.870 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 561\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 631\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 13\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 6\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 36\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 6\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 413.79 op/s (413.79 op/s including failed)\nElapsed time: 0.58 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1751.244 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 137.645 ms, heap usage 515.170 MB -> 140.871 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 419\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 631\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 13\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 6\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 36\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 6\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 747.66 op/s (747.66 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1498.397 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 138.412 ms, heap usage 518.846 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 442\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 631\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 13\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 6\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 36\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 843.88 op/s (843.88 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1485.473 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.809 ms, heap usage 517.836 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 631\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 36\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 6\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1227.62 op/s (1227.62 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1294.184 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 107.109 ms, heap usage 517.833 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 631\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 13\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 6\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 36\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 21\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1450.78 op/s (1450.78 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1330.292 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 119.205 ms, heap usage 515.905 MB -> 140.875 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 400\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 631\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 6\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 36\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 21\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1531.10 op/s (1531.10 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1332.508 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 106.557 ms, heap usage 515.959 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 631\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 6\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 36\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 21\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1951.22 op/s (1951.22 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1291.310 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 121.036 ms, heap usage 516.936 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 631\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 6\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 36\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2077.92 op/s (2077.92 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.507 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 105.681 ms, heap usage 515.444 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 631\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 6\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 36\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 21\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2100.24 op/s (2100.24 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1292.799 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 111.082 ms, heap usage 517.649 MB -> 140.873 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 631\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 6\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 36\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 21\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2400.00 op/s (2400.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1296.932 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 103.201 ms, heap usage 516.676 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 631\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 6\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 36\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 21\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2795.70 op/s (2795.70 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1311.387 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.056 ms, heap usage 514.568 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 369\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 631\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 6\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 36\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 21\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2871.79 op/s (2871.79 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1282.596 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 97.337 ms, heap usage 514.680 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 434\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 631\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 6\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 36\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 21\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2597.40 op/s (2597.40 op/s including failed)\nElapsed time: 0.46 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1348.589 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.341 ms, heap usage 452.275 MB -> 152.080 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (28757.463 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.960 ms, heap usage 545.144 MB -> 427.980 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16046.657 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.982 ms, heap usage 530.899 MB -> 428.162 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15708.858 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 153.581 ms, heap usage 645.249 MB -> 428.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15390.484 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 119.725 ms, heap usage 596.655 MB -> 428.400 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15157.333 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.654 ms, heap usage 455.279 MB -> 428.525 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (15079.515 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 132.375 ms, heap usage 645.026 MB -> 427.170 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14948.829 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 130.197 ms, heap usage 497.066 MB -> 425.364 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (16022.884 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 121.215 ms, heap usage 495.879 MB -> 424.947 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14993.032 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 129.387 ms, heap usage 744.911 MB -> 422.062 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (15394.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.439 ms, heap usage 448.619 MB -> 422.194 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15936.975 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.223 ms, heap usage 523.042 MB -> 420.596 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14731.792 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 128.730 ms, heap usage 539.103 MB -> 420.674 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15087.963 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 106.089 ms, heap usage 439.429 MB -> 420.801 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15253.905 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 99.474 ms, heap usage 741.456 MB -> 420.778 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14951.152 ms) ======\n"
    },
    "als": {
        "times": [
            17763.845,
            10305.34,
            8531.033,
            8006.763,
            7909.835,
            7778.802,
            7549.451,
            7546.068,
            7619.985,
            7425.627,
            7707.192,
            7566.801,
            7542.114,
            7780.687,
            7523.652
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 91.867 ms, heap usage 498.175 MB -> 140.678 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 36\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 631\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 36\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 110.19 op/s (110.19 op/s including failed)\nElapsed time: 0.73 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.732 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 117.581 ms, heap usage 448.307 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 426\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 631\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 13\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 6\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 36\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 319.36 op/s (319.36 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1620.055 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 115.483 ms, heap usage 503.630 MB -> 140.870 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 561\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 631\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 13\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 6\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 36\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 6\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 413.79 op/s (413.79 op/s including failed)\nElapsed time: 0.58 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1751.244 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 137.645 ms, heap usage 515.170 MB -> 140.871 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 419\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 631\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 13\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 6\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 36\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 6\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 747.66 op/s (747.66 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1498.397 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 138.412 ms, heap usage 518.846 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 442\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 631\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 13\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 6\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 36\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 843.88 op/s (843.88 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1485.473 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.809 ms, heap usage 517.836 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 631\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 36\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 6\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1227.62 op/s (1227.62 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1294.184 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 107.109 ms, heap usage 517.833 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 631\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 13\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 6\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 36\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 21\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1450.78 op/s (1450.78 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1330.292 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 119.205 ms, heap usage 515.905 MB -> 140.875 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 400\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 631\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 6\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 36\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 21\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1531.10 op/s (1531.10 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1332.508 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 106.557 ms, heap usage 515.959 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 631\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 6\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 36\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 21\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1951.22 op/s (1951.22 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1291.310 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 121.036 ms, heap usage 516.936 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 631\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 6\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 36\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2077.92 op/s (2077.92 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.507 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 105.681 ms, heap usage 515.444 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 631\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 6\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 36\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 21\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2100.24 op/s (2100.24 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1292.799 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 111.082 ms, heap usage 517.649 MB -> 140.873 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 631\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 6\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 36\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 21\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2400.00 op/s (2400.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1296.932 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 103.201 ms, heap usage 516.676 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 631\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 6\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 36\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 21\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2795.70 op/s (2795.70 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1311.387 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.056 ms, heap usage 514.568 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 369\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 631\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 6\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 36\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 21\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2871.79 op/s (2871.79 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1282.596 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 97.337 ms, heap usage 514.680 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 434\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 631\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 6\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 36\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 21\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2597.40 op/s (2597.40 op/s including failed)\nElapsed time: 0.46 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1348.589 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.341 ms, heap usage 452.275 MB -> 152.080 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (28757.463 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.960 ms, heap usage 545.144 MB -> 427.980 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16046.657 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.982 ms, heap usage 530.899 MB -> 428.162 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15708.858 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 153.581 ms, heap usage 645.249 MB -> 428.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15390.484 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 119.725 ms, heap usage 596.655 MB -> 428.400 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15157.333 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.654 ms, heap usage 455.279 MB -> 428.525 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (15079.515 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 132.375 ms, heap usage 645.026 MB -> 427.170 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14948.829 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 130.197 ms, heap usage 497.066 MB -> 425.364 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (16022.884 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 121.215 ms, heap usage 495.879 MB -> 424.947 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14993.032 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 129.387 ms, heap usage 744.911 MB -> 422.062 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (15394.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.439 ms, heap usage 448.619 MB -> 422.194 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15936.975 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.223 ms, heap usage 523.042 MB -> 420.596 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14731.792 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 128.730 ms, heap usage 539.103 MB -> 420.674 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15087.963 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 106.089 ms, heap usage 439.429 MB -> 420.801 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15253.905 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 99.474 ms, heap usage 741.456 MB -> 420.778 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14951.152 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 127.975 ms, heap usage 343.090 MB -> 165.903 MB.\n====== als (apache-spark) [default], iteration 0 completed (17763.845 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.152 ms, heap usage 522.542 MB -> 191.006 MB.\n====== als (apache-spark) [default], iteration 1 completed (10305.340 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 162.926 ms, heap usage 485.994 MB -> 192.474 MB.\n====== als (apache-spark) [default], iteration 2 completed (8531.033 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.434 ms, heap usage 409.190 MB -> 192.854 MB.\n====== als (apache-spark) [default], iteration 3 completed (8006.763 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 134.951 ms, heap usage 482.596 MB -> 193.550 MB.\n====== als (apache-spark) [default], iteration 4 completed (7909.835 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.666 ms, heap usage 508.245 MB -> 194.132 MB.\n====== als (apache-spark) [default], iteration 5 completed (7778.802 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 146.595 ms, heap usage 450.334 MB -> 194.593 MB.\n====== als (apache-spark) [default], iteration 6 completed (7549.451 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.006 ms, heap usage 405.662 MB -> 195.062 MB.\n====== als (apache-spark) [default], iteration 7 completed (7546.068 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 149.508 ms, heap usage 488.345 MB -> 195.873 MB.\n====== als (apache-spark) [default], iteration 8 completed (7619.985 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.868 ms, heap usage 476.254 MB -> 196.260 MB.\n====== als (apache-spark) [default], iteration 9 completed (7425.627 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 146.376 ms, heap usage 368.535 MB -> 196.339 MB.\n====== als (apache-spark) [default], iteration 10 completed (7707.192 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.407 ms, heap usage 456.379 MB -> 196.596 MB.\n====== als (apache-spark) [default], iteration 11 completed (7566.801 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 191.022 ms, heap usage 485.157 MB -> 196.997 MB.\n====== als (apache-spark) [default], iteration 12 completed (7542.114 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.757 ms, heap usage 604.674 MB -> 197.384 MB.\n====== als (apache-spark) [default], iteration 13 completed (7780.687 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 147.635 ms, heap usage 691.460 MB -> 197.855 MB.\n====== als (apache-spark) [default], iteration 14 completed (7523.652 ms) ======\n"
    },
    "par-mnemonics": {
        "times": [
            4091.599,
            3966.063,
            4175.996,
            3963.378,
            3729.537,
            3901.873,
            3983.108,
            4012.522,
            3493.565,
            3909.568,
            4066.975,
            4554.492,
            4002.568,
            3950.508,
            3918.709
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 91.867 ms, heap usage 498.175 MB -> 140.678 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 36\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 631\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 36\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 110.19 op/s (110.19 op/s including failed)\nElapsed time: 0.73 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.732 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 117.581 ms, heap usage 448.307 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 426\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 631\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 13\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 6\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 36\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 319.36 op/s (319.36 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1620.055 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 115.483 ms, heap usage 503.630 MB -> 140.870 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 561\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 631\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 13\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 6\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 36\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 6\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 413.79 op/s (413.79 op/s including failed)\nElapsed time: 0.58 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1751.244 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 137.645 ms, heap usage 515.170 MB -> 140.871 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 419\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 631\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 13\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 6\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 36\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 6\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 747.66 op/s (747.66 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1498.397 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 138.412 ms, heap usage 518.846 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 442\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 631\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 13\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 6\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 36\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 843.88 op/s (843.88 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1485.473 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.809 ms, heap usage 517.836 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 631\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 36\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 6\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1227.62 op/s (1227.62 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1294.184 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 107.109 ms, heap usage 517.833 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 631\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 13\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 6\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 36\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 21\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1450.78 op/s (1450.78 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1330.292 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 119.205 ms, heap usage 515.905 MB -> 140.875 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 400\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 631\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 6\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 36\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 21\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1531.10 op/s (1531.10 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1332.508 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 106.557 ms, heap usage 515.959 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 631\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 6\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 36\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 21\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1951.22 op/s (1951.22 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1291.310 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 121.036 ms, heap usage 516.936 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 631\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 6\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 36\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2077.92 op/s (2077.92 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.507 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 105.681 ms, heap usage 515.444 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 631\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 6\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 36\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 21\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2100.24 op/s (2100.24 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1292.799 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 111.082 ms, heap usage 517.649 MB -> 140.873 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 631\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 6\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 36\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 21\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2400.00 op/s (2400.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1296.932 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 103.201 ms, heap usage 516.676 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 631\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 6\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 36\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 21\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2795.70 op/s (2795.70 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1311.387 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.056 ms, heap usage 514.568 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 369\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 631\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 6\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 36\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 21\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2871.79 op/s (2871.79 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1282.596 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 97.337 ms, heap usage 514.680 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 434\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 631\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 6\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 36\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 21\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2597.40 op/s (2597.40 op/s including failed)\nElapsed time: 0.46 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1348.589 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.341 ms, heap usage 452.275 MB -> 152.080 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (28757.463 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.960 ms, heap usage 545.144 MB -> 427.980 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16046.657 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.982 ms, heap usage 530.899 MB -> 428.162 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15708.858 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 153.581 ms, heap usage 645.249 MB -> 428.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15390.484 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 119.725 ms, heap usage 596.655 MB -> 428.400 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15157.333 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.654 ms, heap usage 455.279 MB -> 428.525 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (15079.515 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 132.375 ms, heap usage 645.026 MB -> 427.170 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14948.829 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 130.197 ms, heap usage 497.066 MB -> 425.364 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (16022.884 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 121.215 ms, heap usage 495.879 MB -> 424.947 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14993.032 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 129.387 ms, heap usage 744.911 MB -> 422.062 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (15394.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.439 ms, heap usage 448.619 MB -> 422.194 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15936.975 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.223 ms, heap usage 523.042 MB -> 420.596 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14731.792 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 128.730 ms, heap usage 539.103 MB -> 420.674 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15087.963 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 106.089 ms, heap usage 439.429 MB -> 420.801 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15253.905 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 99.474 ms, heap usage 741.456 MB -> 420.778 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14951.152 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 127.975 ms, heap usage 343.090 MB -> 165.903 MB.\n====== als (apache-spark) [default], iteration 0 completed (17763.845 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.152 ms, heap usage 522.542 MB -> 191.006 MB.\n====== als (apache-spark) [default], iteration 1 completed (10305.340 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 162.926 ms, heap usage 485.994 MB -> 192.474 MB.\n====== als (apache-spark) [default], iteration 2 completed (8531.033 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.434 ms, heap usage 409.190 MB -> 192.854 MB.\n====== als (apache-spark) [default], iteration 3 completed (8006.763 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 134.951 ms, heap usage 482.596 MB -> 193.550 MB.\n====== als (apache-spark) [default], iteration 4 completed (7909.835 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.666 ms, heap usage 508.245 MB -> 194.132 MB.\n====== als (apache-spark) [default], iteration 5 completed (7778.802 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 146.595 ms, heap usage 450.334 MB -> 194.593 MB.\n====== als (apache-spark) [default], iteration 6 completed (7549.451 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.006 ms, heap usage 405.662 MB -> 195.062 MB.\n====== als (apache-spark) [default], iteration 7 completed (7546.068 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 149.508 ms, heap usage 488.345 MB -> 195.873 MB.\n====== als (apache-spark) [default], iteration 8 completed (7619.985 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.868 ms, heap usage 476.254 MB -> 196.260 MB.\n====== als (apache-spark) [default], iteration 9 completed (7425.627 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 146.376 ms, heap usage 368.535 MB -> 196.339 MB.\n====== als (apache-spark) [default], iteration 10 completed (7707.192 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.407 ms, heap usage 456.379 MB -> 196.596 MB.\n====== als (apache-spark) [default], iteration 11 completed (7566.801 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 191.022 ms, heap usage 485.157 MB -> 196.997 MB.\n====== als (apache-spark) [default], iteration 12 completed (7542.114 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.757 ms, heap usage 604.674 MB -> 197.384 MB.\n====== als (apache-spark) [default], iteration 13 completed (7780.687 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 147.635 ms, heap usage 691.460 MB -> 197.855 MB.\n====== als (apache-spark) [default], iteration 14 completed (7523.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 159.913 ms, heap usage 491.953 MB -> 177.991 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4091.599 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 150.942 ms, heap usage 383.495 MB -> 177.911 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3966.063 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 138.704 ms, heap usage 369.524 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4175.996 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 141.312 ms, heap usage 315.406 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3963.378 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 147.243 ms, heap usage 316.375 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3729.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 131.587 ms, heap usage 315.938 MB -> 177.937 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3901.873 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 133.247 ms, heap usage 316.895 MB -> 177.939 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3983.108 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 135.623 ms, heap usage 549.955 MB -> 177.935 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4012.522 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 131.664 ms, heap usage 324.436 MB -> 177.940 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3493.565 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 132.115 ms, heap usage 316.935 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3909.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 120.007 ms, heap usage 428.479 MB -> 177.943 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4066.975 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 141.223 ms, heap usage 329.997 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4554.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 145.109 ms, heap usage 568.497 MB -> 177.942 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4002.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 124.798 ms, heap usage 315.328 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3950.508 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 161.296 ms, heap usage 313.497 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3918.709 ms) ======\n"
    },
    "scala-kmeans": {
        "times": [
            357.41,
            198.59,
            178.579,
            215.789,
            290.557,
            262.782,
            253.949,
            254.605,
            266.599,
            272.246,
            270.594,
            283.981,
            249.818,
            266.696,
            269.949
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 91.867 ms, heap usage 498.175 MB -> 140.678 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 36\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 631\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 36\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 110.19 op/s (110.19 op/s including failed)\nElapsed time: 0.73 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.732 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 117.581 ms, heap usage 448.307 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 426\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 631\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 13\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 6\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 36\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 319.36 op/s (319.36 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1620.055 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 115.483 ms, heap usage 503.630 MB -> 140.870 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 561\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 631\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 13\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 6\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 36\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 6\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 413.79 op/s (413.79 op/s including failed)\nElapsed time: 0.58 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1751.244 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 137.645 ms, heap usage 515.170 MB -> 140.871 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 419\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 631\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 13\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 6\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 36\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 6\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 747.66 op/s (747.66 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1498.397 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 138.412 ms, heap usage 518.846 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 442\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 631\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 13\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 6\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 36\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 843.88 op/s (843.88 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1485.473 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.809 ms, heap usage 517.836 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 631\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 36\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 6\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1227.62 op/s (1227.62 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1294.184 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 107.109 ms, heap usage 517.833 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 631\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 13\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 6\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 36\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 21\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1450.78 op/s (1450.78 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1330.292 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 119.205 ms, heap usage 515.905 MB -> 140.875 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 400\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 631\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 6\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 36\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 21\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1531.10 op/s (1531.10 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1332.508 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 106.557 ms, heap usage 515.959 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 631\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 6\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 36\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 21\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1951.22 op/s (1951.22 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1291.310 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 121.036 ms, heap usage 516.936 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 631\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 6\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 36\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2077.92 op/s (2077.92 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.507 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 105.681 ms, heap usage 515.444 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 631\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 6\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 36\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 21\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2100.24 op/s (2100.24 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1292.799 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 111.082 ms, heap usage 517.649 MB -> 140.873 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 631\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 6\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 36\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 21\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2400.00 op/s (2400.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1296.932 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 103.201 ms, heap usage 516.676 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 631\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 6\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 36\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 21\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2795.70 op/s (2795.70 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1311.387 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.056 ms, heap usage 514.568 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 369\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 631\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 6\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 36\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 21\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2871.79 op/s (2871.79 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1282.596 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 97.337 ms, heap usage 514.680 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 434\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 631\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 6\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 36\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 21\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2597.40 op/s (2597.40 op/s including failed)\nElapsed time: 0.46 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1348.589 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.341 ms, heap usage 452.275 MB -> 152.080 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (28757.463 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.960 ms, heap usage 545.144 MB -> 427.980 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16046.657 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.982 ms, heap usage 530.899 MB -> 428.162 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15708.858 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 153.581 ms, heap usage 645.249 MB -> 428.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15390.484 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 119.725 ms, heap usage 596.655 MB -> 428.400 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15157.333 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.654 ms, heap usage 455.279 MB -> 428.525 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (15079.515 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 132.375 ms, heap usage 645.026 MB -> 427.170 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14948.829 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 130.197 ms, heap usage 497.066 MB -> 425.364 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (16022.884 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 121.215 ms, heap usage 495.879 MB -> 424.947 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14993.032 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 129.387 ms, heap usage 744.911 MB -> 422.062 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (15394.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.439 ms, heap usage 448.619 MB -> 422.194 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15936.975 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.223 ms, heap usage 523.042 MB -> 420.596 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14731.792 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 128.730 ms, heap usage 539.103 MB -> 420.674 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15087.963 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 106.089 ms, heap usage 439.429 MB -> 420.801 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15253.905 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 99.474 ms, heap usage 741.456 MB -> 420.778 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14951.152 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 127.975 ms, heap usage 343.090 MB -> 165.903 MB.\n====== als (apache-spark) [default], iteration 0 completed (17763.845 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.152 ms, heap usage 522.542 MB -> 191.006 MB.\n====== als (apache-spark) [default], iteration 1 completed (10305.340 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 162.926 ms, heap usage 485.994 MB -> 192.474 MB.\n====== als (apache-spark) [default], iteration 2 completed (8531.033 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.434 ms, heap usage 409.190 MB -> 192.854 MB.\n====== als (apache-spark) [default], iteration 3 completed (8006.763 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 134.951 ms, heap usage 482.596 MB -> 193.550 MB.\n====== als (apache-spark) [default], iteration 4 completed (7909.835 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.666 ms, heap usage 508.245 MB -> 194.132 MB.\n====== als (apache-spark) [default], iteration 5 completed (7778.802 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 146.595 ms, heap usage 450.334 MB -> 194.593 MB.\n====== als (apache-spark) [default], iteration 6 completed (7549.451 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.006 ms, heap usage 405.662 MB -> 195.062 MB.\n====== als (apache-spark) [default], iteration 7 completed (7546.068 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 149.508 ms, heap usage 488.345 MB -> 195.873 MB.\n====== als (apache-spark) [default], iteration 8 completed (7619.985 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.868 ms, heap usage 476.254 MB -> 196.260 MB.\n====== als (apache-spark) [default], iteration 9 completed (7425.627 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 146.376 ms, heap usage 368.535 MB -> 196.339 MB.\n====== als (apache-spark) [default], iteration 10 completed (7707.192 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.407 ms, heap usage 456.379 MB -> 196.596 MB.\n====== als (apache-spark) [default], iteration 11 completed (7566.801 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 191.022 ms, heap usage 485.157 MB -> 196.997 MB.\n====== als (apache-spark) [default], iteration 12 completed (7542.114 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.757 ms, heap usage 604.674 MB -> 197.384 MB.\n====== als (apache-spark) [default], iteration 13 completed (7780.687 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 147.635 ms, heap usage 691.460 MB -> 197.855 MB.\n====== als (apache-spark) [default], iteration 14 completed (7523.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 159.913 ms, heap usage 491.953 MB -> 177.991 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4091.599 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 150.942 ms, heap usage 383.495 MB -> 177.911 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3966.063 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 138.704 ms, heap usage 369.524 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4175.996 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 141.312 ms, heap usage 315.406 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3963.378 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 147.243 ms, heap usage 316.375 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3729.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 131.587 ms, heap usage 315.938 MB -> 177.937 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3901.873 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 133.247 ms, heap usage 316.895 MB -> 177.939 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3983.108 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 135.623 ms, heap usage 549.955 MB -> 177.935 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4012.522 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 131.664 ms, heap usage 324.436 MB -> 177.940 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3493.565 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 132.115 ms, heap usage 316.935 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3909.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 120.007 ms, heap usage 428.479 MB -> 177.943 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4066.975 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 141.223 ms, heap usage 329.997 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4554.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 145.109 ms, heap usage 568.497 MB -> 177.942 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4002.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 124.798 ms, heap usage 315.328 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3950.508 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 161.296 ms, heap usage 313.497 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3918.709 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.352 ms, heap usage 351.371 MB -> 200.202 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (357.410 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 156.674 ms, heap usage 228.202 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.590 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 140.874 ms, heap usage 230.236 MB -> 200.243 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (178.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 138.331 ms, heap usage 230.233 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (215.789 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 134.910 ms, heap usage 260.749 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (290.557 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.584 ms, heap usage 321.734 MB -> 200.233 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (262.782 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 163.347 ms, heap usage 321.733 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (253.949 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 144.129 ms, heap usage 321.733 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (254.605 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 139.335 ms, heap usage 321.734 MB -> 200.234 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (266.599 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 126.122 ms, heap usage 321.734 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (272.246 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 155.765 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (270.594 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 137.795 ms, heap usage 321.734 MB -> 200.244 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (283.981 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 129.751 ms, heap usage 321.734 MB -> 200.242 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (249.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 160.759 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (266.696 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.963 ms, heap usage 321.734 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (269.949 ms) ======\n"
    },
    "philosophers": {
        "times": [
            2348.694,
            1019.428,
            1181.516,
            1080.948,
            1079.589,
            1137.287,
            991.576,
            1096.832,
            1164.211,
            1067.355,
            1094.797,
            1031.368,
            1020.017,
            1069.884,
            1114.917
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 91.867 ms, heap usage 498.175 MB -> 140.678 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 36\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 631\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 36\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 110.19 op/s (110.19 op/s including failed)\nElapsed time: 0.73 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.732 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 117.581 ms, heap usage 448.307 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 426\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 631\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 13\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 6\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 36\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 319.36 op/s (319.36 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1620.055 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 115.483 ms, heap usage 503.630 MB -> 140.870 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 561\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 631\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 13\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 6\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 36\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 6\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 413.79 op/s (413.79 op/s including failed)\nElapsed time: 0.58 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1751.244 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 137.645 ms, heap usage 515.170 MB -> 140.871 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 419\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 631\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 13\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 6\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 36\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 6\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 747.66 op/s (747.66 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1498.397 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 138.412 ms, heap usage 518.846 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 442\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 631\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 13\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 6\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 36\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 843.88 op/s (843.88 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1485.473 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.809 ms, heap usage 517.836 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 631\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 36\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 6\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1227.62 op/s (1227.62 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1294.184 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 107.109 ms, heap usage 517.833 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 631\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 13\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 6\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 36\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 21\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1450.78 op/s (1450.78 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1330.292 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 119.205 ms, heap usage 515.905 MB -> 140.875 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 400\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 631\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 6\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 36\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 21\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1531.10 op/s (1531.10 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1332.508 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 106.557 ms, heap usage 515.959 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 631\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 6\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 36\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 21\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1951.22 op/s (1951.22 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1291.310 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 121.036 ms, heap usage 516.936 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 631\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 6\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 36\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2077.92 op/s (2077.92 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.507 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 105.681 ms, heap usage 515.444 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 631\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 6\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 36\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 21\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2100.24 op/s (2100.24 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1292.799 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 111.082 ms, heap usage 517.649 MB -> 140.873 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 631\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 6\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 36\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 21\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2400.00 op/s (2400.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1296.932 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 103.201 ms, heap usage 516.676 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 631\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 6\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 36\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 21\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2795.70 op/s (2795.70 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1311.387 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.056 ms, heap usage 514.568 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 369\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 631\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 6\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 36\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 21\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2871.79 op/s (2871.79 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1282.596 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 97.337 ms, heap usage 514.680 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 434\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 631\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 6\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 36\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 21\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2597.40 op/s (2597.40 op/s including failed)\nElapsed time: 0.46 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1348.589 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.341 ms, heap usage 452.275 MB -> 152.080 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (28757.463 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.960 ms, heap usage 545.144 MB -> 427.980 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16046.657 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.982 ms, heap usage 530.899 MB -> 428.162 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15708.858 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 153.581 ms, heap usage 645.249 MB -> 428.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15390.484 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 119.725 ms, heap usage 596.655 MB -> 428.400 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15157.333 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.654 ms, heap usage 455.279 MB -> 428.525 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (15079.515 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 132.375 ms, heap usage 645.026 MB -> 427.170 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14948.829 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 130.197 ms, heap usage 497.066 MB -> 425.364 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (16022.884 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 121.215 ms, heap usage 495.879 MB -> 424.947 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14993.032 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 129.387 ms, heap usage 744.911 MB -> 422.062 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (15394.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.439 ms, heap usage 448.619 MB -> 422.194 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15936.975 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.223 ms, heap usage 523.042 MB -> 420.596 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14731.792 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 128.730 ms, heap usage 539.103 MB -> 420.674 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15087.963 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 106.089 ms, heap usage 439.429 MB -> 420.801 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15253.905 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 99.474 ms, heap usage 741.456 MB -> 420.778 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14951.152 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 127.975 ms, heap usage 343.090 MB -> 165.903 MB.\n====== als (apache-spark) [default], iteration 0 completed (17763.845 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.152 ms, heap usage 522.542 MB -> 191.006 MB.\n====== als (apache-spark) [default], iteration 1 completed (10305.340 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 162.926 ms, heap usage 485.994 MB -> 192.474 MB.\n====== als (apache-spark) [default], iteration 2 completed (8531.033 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.434 ms, heap usage 409.190 MB -> 192.854 MB.\n====== als (apache-spark) [default], iteration 3 completed (8006.763 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 134.951 ms, heap usage 482.596 MB -> 193.550 MB.\n====== als (apache-spark) [default], iteration 4 completed (7909.835 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.666 ms, heap usage 508.245 MB -> 194.132 MB.\n====== als (apache-spark) [default], iteration 5 completed (7778.802 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 146.595 ms, heap usage 450.334 MB -> 194.593 MB.\n====== als (apache-spark) [default], iteration 6 completed (7549.451 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.006 ms, heap usage 405.662 MB -> 195.062 MB.\n====== als (apache-spark) [default], iteration 7 completed (7546.068 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 149.508 ms, heap usage 488.345 MB -> 195.873 MB.\n====== als (apache-spark) [default], iteration 8 completed (7619.985 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.868 ms, heap usage 476.254 MB -> 196.260 MB.\n====== als (apache-spark) [default], iteration 9 completed (7425.627 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 146.376 ms, heap usage 368.535 MB -> 196.339 MB.\n====== als (apache-spark) [default], iteration 10 completed (7707.192 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.407 ms, heap usage 456.379 MB -> 196.596 MB.\n====== als (apache-spark) [default], iteration 11 completed (7566.801 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 191.022 ms, heap usage 485.157 MB -> 196.997 MB.\n====== als (apache-spark) [default], iteration 12 completed (7542.114 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.757 ms, heap usage 604.674 MB -> 197.384 MB.\n====== als (apache-spark) [default], iteration 13 completed (7780.687 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 147.635 ms, heap usage 691.460 MB -> 197.855 MB.\n====== als (apache-spark) [default], iteration 14 completed (7523.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 159.913 ms, heap usage 491.953 MB -> 177.991 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4091.599 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 150.942 ms, heap usage 383.495 MB -> 177.911 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3966.063 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 138.704 ms, heap usage 369.524 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4175.996 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 141.312 ms, heap usage 315.406 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3963.378 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 147.243 ms, heap usage 316.375 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3729.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 131.587 ms, heap usage 315.938 MB -> 177.937 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3901.873 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 133.247 ms, heap usage 316.895 MB -> 177.939 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3983.108 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 135.623 ms, heap usage 549.955 MB -> 177.935 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4012.522 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 131.664 ms, heap usage 324.436 MB -> 177.940 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3493.565 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 132.115 ms, heap usage 316.935 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3909.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 120.007 ms, heap usage 428.479 MB -> 177.943 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4066.975 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 141.223 ms, heap usage 329.997 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4554.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 145.109 ms, heap usage 568.497 MB -> 177.942 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4002.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 124.798 ms, heap usage 315.328 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3950.508 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 161.296 ms, heap usage 313.497 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3918.709 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.352 ms, heap usage 351.371 MB -> 200.202 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (357.410 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 156.674 ms, heap usage 228.202 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.590 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 140.874 ms, heap usage 230.236 MB -> 200.243 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (178.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 138.331 ms, heap usage 230.233 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (215.789 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 134.910 ms, heap usage 260.749 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (290.557 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.584 ms, heap usage 321.734 MB -> 200.233 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (262.782 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 163.347 ms, heap usage 321.733 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (253.949 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 144.129 ms, heap usage 321.733 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (254.605 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 139.335 ms, heap usage 321.734 MB -> 200.234 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (266.599 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 126.122 ms, heap usage 321.734 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (272.246 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 155.765 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (270.594 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 137.795 ms, heap usage 321.734 MB -> 200.244 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (283.981 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 129.751 ms, heap usage 321.734 MB -> 200.242 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (249.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 160.759 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (266.696 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.963 ms, heap usage 321.734 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (269.949 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 158.859 ms, heap usage 323.734 MB -> 179.237 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2348.694 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 159.428 ms, heap usage 199.646 MB -> 179.157 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1019.428 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 132.986 ms, heap usage 242.385 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1181.516 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.716 ms, heap usage 365.346 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1080.948 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 157.211 ms, heap usage 273.768 MB -> 179.165 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1079.589 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 153.796 ms, heap usage 308.116 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1137.287 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 144.573 ms, heap usage 333.023 MB -> 179.158 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (991.576 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 140.465 ms, heap usage 297.461 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1096.832 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 154.748 ms, heap usage 322.419 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1164.211 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 133.096 ms, heap usage 377.892 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1067.355 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 437.865 MB -> 179.163 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1094.797 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 146.993 ms, heap usage 436.349 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1031.368 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 173.508 ms, heap usage 297.516 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1020.017 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 181.989 ms, heap usage 319.353 MB -> 179.162 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1069.884 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 137.923 ms, heap usage 466.349 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1114.917 ms) ======\n"
    },
    "log-regression": {
        "times": [
            8175.612,
            1756.882,
            1526.393,
            1425.448,
            1378.696,
            1275.844,
            1207.841,
            1234.426,
            1168.411,
            1150.697,
            1154.831,
            1131.401,
            1207.794,
            1139.451,
            1164.536
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 91.867 ms, heap usage 498.175 MB -> 140.678 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 36\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 631\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 36\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 110.19 op/s (110.19 op/s including failed)\nElapsed time: 0.73 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.732 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 117.581 ms, heap usage 448.307 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 426\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 631\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 13\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 6\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 36\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 319.36 op/s (319.36 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1620.055 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 115.483 ms, heap usage 503.630 MB -> 140.870 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 561\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 631\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 13\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 6\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 36\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 6\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 413.79 op/s (413.79 op/s including failed)\nElapsed time: 0.58 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1751.244 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 137.645 ms, heap usage 515.170 MB -> 140.871 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 419\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 631\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 13\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 6\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 36\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 6\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 747.66 op/s (747.66 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1498.397 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 138.412 ms, heap usage 518.846 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 442\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 631\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 13\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 6\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 36\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 843.88 op/s (843.88 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1485.473 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.809 ms, heap usage 517.836 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 631\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 36\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 6\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1227.62 op/s (1227.62 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1294.184 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 107.109 ms, heap usage 517.833 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 631\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 13\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 6\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 36\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 21\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1450.78 op/s (1450.78 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1330.292 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 119.205 ms, heap usage 515.905 MB -> 140.875 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 400\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 631\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 6\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 36\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 21\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1531.10 op/s (1531.10 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1332.508 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 106.557 ms, heap usage 515.959 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 631\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 6\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 36\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 21\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1951.22 op/s (1951.22 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1291.310 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 121.036 ms, heap usage 516.936 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 631\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 6\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 36\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2077.92 op/s (2077.92 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.507 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 105.681 ms, heap usage 515.444 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 631\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 6\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 36\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 21\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2100.24 op/s (2100.24 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1292.799 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 111.082 ms, heap usage 517.649 MB -> 140.873 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 631\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 6\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 36\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 21\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2400.00 op/s (2400.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1296.932 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 103.201 ms, heap usage 516.676 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 631\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 6\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 36\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 21\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2795.70 op/s (2795.70 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1311.387 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.056 ms, heap usage 514.568 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 369\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 631\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 6\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 36\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 21\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2871.79 op/s (2871.79 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1282.596 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 97.337 ms, heap usage 514.680 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 434\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 631\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 6\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 36\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 21\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2597.40 op/s (2597.40 op/s including failed)\nElapsed time: 0.46 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1348.589 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.341 ms, heap usage 452.275 MB -> 152.080 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (28757.463 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.960 ms, heap usage 545.144 MB -> 427.980 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16046.657 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.982 ms, heap usage 530.899 MB -> 428.162 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15708.858 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 153.581 ms, heap usage 645.249 MB -> 428.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15390.484 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 119.725 ms, heap usage 596.655 MB -> 428.400 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15157.333 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.654 ms, heap usage 455.279 MB -> 428.525 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (15079.515 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 132.375 ms, heap usage 645.026 MB -> 427.170 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14948.829 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 130.197 ms, heap usage 497.066 MB -> 425.364 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (16022.884 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 121.215 ms, heap usage 495.879 MB -> 424.947 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14993.032 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 129.387 ms, heap usage 744.911 MB -> 422.062 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (15394.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.439 ms, heap usage 448.619 MB -> 422.194 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15936.975 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.223 ms, heap usage 523.042 MB -> 420.596 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14731.792 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 128.730 ms, heap usage 539.103 MB -> 420.674 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15087.963 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 106.089 ms, heap usage 439.429 MB -> 420.801 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15253.905 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 99.474 ms, heap usage 741.456 MB -> 420.778 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14951.152 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 127.975 ms, heap usage 343.090 MB -> 165.903 MB.\n====== als (apache-spark) [default], iteration 0 completed (17763.845 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.152 ms, heap usage 522.542 MB -> 191.006 MB.\n====== als (apache-spark) [default], iteration 1 completed (10305.340 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 162.926 ms, heap usage 485.994 MB -> 192.474 MB.\n====== als (apache-spark) [default], iteration 2 completed (8531.033 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.434 ms, heap usage 409.190 MB -> 192.854 MB.\n====== als (apache-spark) [default], iteration 3 completed (8006.763 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 134.951 ms, heap usage 482.596 MB -> 193.550 MB.\n====== als (apache-spark) [default], iteration 4 completed (7909.835 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.666 ms, heap usage 508.245 MB -> 194.132 MB.\n====== als (apache-spark) [default], iteration 5 completed (7778.802 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 146.595 ms, heap usage 450.334 MB -> 194.593 MB.\n====== als (apache-spark) [default], iteration 6 completed (7549.451 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.006 ms, heap usage 405.662 MB -> 195.062 MB.\n====== als (apache-spark) [default], iteration 7 completed (7546.068 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 149.508 ms, heap usage 488.345 MB -> 195.873 MB.\n====== als (apache-spark) [default], iteration 8 completed (7619.985 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.868 ms, heap usage 476.254 MB -> 196.260 MB.\n====== als (apache-spark) [default], iteration 9 completed (7425.627 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 146.376 ms, heap usage 368.535 MB -> 196.339 MB.\n====== als (apache-spark) [default], iteration 10 completed (7707.192 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.407 ms, heap usage 456.379 MB -> 196.596 MB.\n====== als (apache-spark) [default], iteration 11 completed (7566.801 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 191.022 ms, heap usage 485.157 MB -> 196.997 MB.\n====== als (apache-spark) [default], iteration 12 completed (7542.114 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.757 ms, heap usage 604.674 MB -> 197.384 MB.\n====== als (apache-spark) [default], iteration 13 completed (7780.687 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 147.635 ms, heap usage 691.460 MB -> 197.855 MB.\n====== als (apache-spark) [default], iteration 14 completed (7523.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 159.913 ms, heap usage 491.953 MB -> 177.991 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4091.599 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 150.942 ms, heap usage 383.495 MB -> 177.911 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3966.063 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 138.704 ms, heap usage 369.524 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4175.996 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 141.312 ms, heap usage 315.406 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3963.378 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 147.243 ms, heap usage 316.375 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3729.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 131.587 ms, heap usage 315.938 MB -> 177.937 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3901.873 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 133.247 ms, heap usage 316.895 MB -> 177.939 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3983.108 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 135.623 ms, heap usage 549.955 MB -> 177.935 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4012.522 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 131.664 ms, heap usage 324.436 MB -> 177.940 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3493.565 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 132.115 ms, heap usage 316.935 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3909.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 120.007 ms, heap usage 428.479 MB -> 177.943 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4066.975 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 141.223 ms, heap usage 329.997 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4554.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 145.109 ms, heap usage 568.497 MB -> 177.942 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4002.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 124.798 ms, heap usage 315.328 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3950.508 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 161.296 ms, heap usage 313.497 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3918.709 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.352 ms, heap usage 351.371 MB -> 200.202 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (357.410 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 156.674 ms, heap usage 228.202 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.590 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 140.874 ms, heap usage 230.236 MB -> 200.243 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (178.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 138.331 ms, heap usage 230.233 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (215.789 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 134.910 ms, heap usage 260.749 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (290.557 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.584 ms, heap usage 321.734 MB -> 200.233 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (262.782 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 163.347 ms, heap usage 321.733 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (253.949 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 144.129 ms, heap usage 321.733 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (254.605 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 139.335 ms, heap usage 321.734 MB -> 200.234 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (266.599 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 126.122 ms, heap usage 321.734 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (272.246 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 155.765 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (270.594 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 137.795 ms, heap usage 321.734 MB -> 200.244 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (283.981 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 129.751 ms, heap usage 321.734 MB -> 200.242 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (249.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 160.759 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (266.696 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.963 ms, heap usage 321.734 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (269.949 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 158.859 ms, heap usage 323.734 MB -> 179.237 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2348.694 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 159.428 ms, heap usage 199.646 MB -> 179.157 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1019.428 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 132.986 ms, heap usage 242.385 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1181.516 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.716 ms, heap usage 365.346 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1080.948 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 157.211 ms, heap usage 273.768 MB -> 179.165 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1079.589 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 153.796 ms, heap usage 308.116 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1137.287 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 144.573 ms, heap usage 333.023 MB -> 179.158 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (991.576 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 140.465 ms, heap usage 297.461 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1096.832 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 154.748 ms, heap usage 322.419 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1164.211 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 133.096 ms, heap usage 377.892 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1067.355 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 437.865 MB -> 179.163 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1094.797 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 146.993 ms, heap usage 436.349 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1031.368 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 173.508 ms, heap usage 297.516 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1020.017 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 181.989 ms, heap usage 319.353 MB -> 179.162 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1069.884 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 137.923 ms, heap usage 466.349 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1114.917 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.729 ms, heap usage 342.371 MB -> 191.153 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8175.612 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.659 ms, heap usage 607.717 MB -> 273.960 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1756.882 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 154.233 ms, heap usage 750.635 MB -> 275.012 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1526.393 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.502 ms, heap usage 695.864 MB -> 275.295 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1425.448 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 140.267 ms, heap usage 577.420 MB -> 275.144 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1378.696 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 148.296 ms, heap usage 677.814 MB -> 275.713 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1275.844 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 142.938 ms, heap usage 650.236 MB -> 275.788 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1207.841 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 145.595 ms, heap usage 546.182 MB -> 275.741 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1234.426 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 181.609 ms, heap usage 513.705 MB -> 275.864 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1168.411 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 140.088 ms, heap usage 753.587 MB -> 276.825 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1150.697 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 150.658 ms, heap usage 715.479 MB -> 276.929 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1154.831 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.794 ms, heap usage 624.240 MB -> 276.620 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1131.401 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.398 ms, heap usage 658.165 MB -> 277.051 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1207.794 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.235 ms, heap usage 808.551 MB -> 277.692 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1139.451 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 153.674 ms, heap usage 669.714 MB -> 277.422 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1164.536 ms) ======\n"
    },
    "gauss-mix": {
        "times": [
            17655.648,
            11884.447,
            12338.734,
            11147.564,
            11031.428,
            12357.542,
            11030.168,
            10744.566,
            10758.257,
            10525.658,
            11257.901,
            10854.307,
            10388.731,
            10680.91,
            10499.289
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 91.867 ms, heap usage 498.175 MB -> 140.678 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 36\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 631\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 36\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 110.19 op/s (110.19 op/s including failed)\nElapsed time: 0.73 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.732 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 117.581 ms, heap usage 448.307 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 426\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 631\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 13\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 6\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 36\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 319.36 op/s (319.36 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1620.055 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 115.483 ms, heap usage 503.630 MB -> 140.870 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 561\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 631\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 13\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 6\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 36\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 6\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 413.79 op/s (413.79 op/s including failed)\nElapsed time: 0.58 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1751.244 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 137.645 ms, heap usage 515.170 MB -> 140.871 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 419\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 631\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 13\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 6\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 36\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 6\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 747.66 op/s (747.66 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1498.397 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 138.412 ms, heap usage 518.846 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 442\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 631\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 13\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 6\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 36\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 843.88 op/s (843.88 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1485.473 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.809 ms, heap usage 517.836 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 631\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 36\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 6\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1227.62 op/s (1227.62 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1294.184 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 107.109 ms, heap usage 517.833 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 631\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 13\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 6\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 36\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 21\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1450.78 op/s (1450.78 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1330.292 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 119.205 ms, heap usage 515.905 MB -> 140.875 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 400\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 631\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 6\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 36\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 21\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1531.10 op/s (1531.10 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1332.508 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 106.557 ms, heap usage 515.959 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 631\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 6\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 36\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 21\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1951.22 op/s (1951.22 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1291.310 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 121.036 ms, heap usage 516.936 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 631\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 6\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 36\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2077.92 op/s (2077.92 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.507 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 105.681 ms, heap usage 515.444 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 631\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 6\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 36\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 21\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2100.24 op/s (2100.24 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1292.799 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 111.082 ms, heap usage 517.649 MB -> 140.873 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 631\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 6\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 36\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 21\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2400.00 op/s (2400.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1296.932 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 103.201 ms, heap usage 516.676 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 631\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 6\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 36\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 21\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2795.70 op/s (2795.70 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1311.387 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.056 ms, heap usage 514.568 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 369\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 631\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 6\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 36\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 21\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2871.79 op/s (2871.79 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1282.596 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 97.337 ms, heap usage 514.680 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 434\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 631\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 6\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 36\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 21\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2597.40 op/s (2597.40 op/s including failed)\nElapsed time: 0.46 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1348.589 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.341 ms, heap usage 452.275 MB -> 152.080 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (28757.463 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.960 ms, heap usage 545.144 MB -> 427.980 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16046.657 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.982 ms, heap usage 530.899 MB -> 428.162 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15708.858 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 153.581 ms, heap usage 645.249 MB -> 428.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15390.484 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 119.725 ms, heap usage 596.655 MB -> 428.400 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15157.333 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.654 ms, heap usage 455.279 MB -> 428.525 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (15079.515 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 132.375 ms, heap usage 645.026 MB -> 427.170 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14948.829 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 130.197 ms, heap usage 497.066 MB -> 425.364 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (16022.884 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 121.215 ms, heap usage 495.879 MB -> 424.947 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14993.032 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 129.387 ms, heap usage 744.911 MB -> 422.062 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (15394.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.439 ms, heap usage 448.619 MB -> 422.194 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15936.975 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.223 ms, heap usage 523.042 MB -> 420.596 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14731.792 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 128.730 ms, heap usage 539.103 MB -> 420.674 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15087.963 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 106.089 ms, heap usage 439.429 MB -> 420.801 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15253.905 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 99.474 ms, heap usage 741.456 MB -> 420.778 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14951.152 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 127.975 ms, heap usage 343.090 MB -> 165.903 MB.\n====== als (apache-spark) [default], iteration 0 completed (17763.845 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.152 ms, heap usage 522.542 MB -> 191.006 MB.\n====== als (apache-spark) [default], iteration 1 completed (10305.340 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 162.926 ms, heap usage 485.994 MB -> 192.474 MB.\n====== als (apache-spark) [default], iteration 2 completed (8531.033 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.434 ms, heap usage 409.190 MB -> 192.854 MB.\n====== als (apache-spark) [default], iteration 3 completed (8006.763 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 134.951 ms, heap usage 482.596 MB -> 193.550 MB.\n====== als (apache-spark) [default], iteration 4 completed (7909.835 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.666 ms, heap usage 508.245 MB -> 194.132 MB.\n====== als (apache-spark) [default], iteration 5 completed (7778.802 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 146.595 ms, heap usage 450.334 MB -> 194.593 MB.\n====== als (apache-spark) [default], iteration 6 completed (7549.451 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.006 ms, heap usage 405.662 MB -> 195.062 MB.\n====== als (apache-spark) [default], iteration 7 completed (7546.068 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 149.508 ms, heap usage 488.345 MB -> 195.873 MB.\n====== als (apache-spark) [default], iteration 8 completed (7619.985 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.868 ms, heap usage 476.254 MB -> 196.260 MB.\n====== als (apache-spark) [default], iteration 9 completed (7425.627 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 146.376 ms, heap usage 368.535 MB -> 196.339 MB.\n====== als (apache-spark) [default], iteration 10 completed (7707.192 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.407 ms, heap usage 456.379 MB -> 196.596 MB.\n====== als (apache-spark) [default], iteration 11 completed (7566.801 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 191.022 ms, heap usage 485.157 MB -> 196.997 MB.\n====== als (apache-spark) [default], iteration 12 completed (7542.114 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.757 ms, heap usage 604.674 MB -> 197.384 MB.\n====== als (apache-spark) [default], iteration 13 completed (7780.687 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 147.635 ms, heap usage 691.460 MB -> 197.855 MB.\n====== als (apache-spark) [default], iteration 14 completed (7523.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 159.913 ms, heap usage 491.953 MB -> 177.991 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4091.599 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 150.942 ms, heap usage 383.495 MB -> 177.911 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3966.063 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 138.704 ms, heap usage 369.524 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4175.996 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 141.312 ms, heap usage 315.406 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3963.378 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 147.243 ms, heap usage 316.375 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3729.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 131.587 ms, heap usage 315.938 MB -> 177.937 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3901.873 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 133.247 ms, heap usage 316.895 MB -> 177.939 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3983.108 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 135.623 ms, heap usage 549.955 MB -> 177.935 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4012.522 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 131.664 ms, heap usage 324.436 MB -> 177.940 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3493.565 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 132.115 ms, heap usage 316.935 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3909.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 120.007 ms, heap usage 428.479 MB -> 177.943 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4066.975 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 141.223 ms, heap usage 329.997 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4554.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 145.109 ms, heap usage 568.497 MB -> 177.942 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4002.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 124.798 ms, heap usage 315.328 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3950.508 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 161.296 ms, heap usage 313.497 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3918.709 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.352 ms, heap usage 351.371 MB -> 200.202 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (357.410 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 156.674 ms, heap usage 228.202 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.590 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 140.874 ms, heap usage 230.236 MB -> 200.243 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (178.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 138.331 ms, heap usage 230.233 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (215.789 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 134.910 ms, heap usage 260.749 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (290.557 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.584 ms, heap usage 321.734 MB -> 200.233 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (262.782 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 163.347 ms, heap usage 321.733 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (253.949 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 144.129 ms, heap usage 321.733 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (254.605 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 139.335 ms, heap usage 321.734 MB -> 200.234 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (266.599 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 126.122 ms, heap usage 321.734 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (272.246 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 155.765 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (270.594 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 137.795 ms, heap usage 321.734 MB -> 200.244 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (283.981 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 129.751 ms, heap usage 321.734 MB -> 200.242 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (249.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 160.759 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (266.696 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.963 ms, heap usage 321.734 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (269.949 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 158.859 ms, heap usage 323.734 MB -> 179.237 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2348.694 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 159.428 ms, heap usage 199.646 MB -> 179.157 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1019.428 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 132.986 ms, heap usage 242.385 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1181.516 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.716 ms, heap usage 365.346 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1080.948 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 157.211 ms, heap usage 273.768 MB -> 179.165 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1079.589 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 153.796 ms, heap usage 308.116 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1137.287 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 144.573 ms, heap usage 333.023 MB -> 179.158 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (991.576 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 140.465 ms, heap usage 297.461 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1096.832 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 154.748 ms, heap usage 322.419 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1164.211 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 133.096 ms, heap usage 377.892 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1067.355 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 437.865 MB -> 179.163 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1094.797 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 146.993 ms, heap usage 436.349 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1031.368 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 173.508 ms, heap usage 297.516 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1020.017 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 181.989 ms, heap usage 319.353 MB -> 179.162 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1069.884 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 137.923 ms, heap usage 466.349 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1114.917 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.729 ms, heap usage 342.371 MB -> 191.153 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8175.612 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.659 ms, heap usage 607.717 MB -> 273.960 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1756.882 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 154.233 ms, heap usage 750.635 MB -> 275.012 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1526.393 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.502 ms, heap usage 695.864 MB -> 275.295 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1425.448 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 140.267 ms, heap usage 577.420 MB -> 275.144 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1378.696 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 148.296 ms, heap usage 677.814 MB -> 275.713 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1275.844 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 142.938 ms, heap usage 650.236 MB -> 275.788 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1207.841 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 145.595 ms, heap usage 546.182 MB -> 275.741 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1234.426 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 181.609 ms, heap usage 513.705 MB -> 275.864 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1168.411 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 140.088 ms, heap usage 753.587 MB -> 276.825 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1150.697 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 150.658 ms, heap usage 715.479 MB -> 276.929 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1154.831 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.794 ms, heap usage 624.240 MB -> 276.620 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1131.401 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.398 ms, heap usage 658.165 MB -> 277.051 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1207.794 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.235 ms, heap usage 808.551 MB -> 277.692 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1139.451 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 153.674 ms, heap usage 669.714 MB -> 277.422 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1164.536 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.369 ms, heap usage 788.732 MB -> 213.049 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (17655.648 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 177.599 ms, heap usage 307.362 MB -> 218.337 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11884.447 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 173.083 ms, heap usage 398.981 MB -> 219.942 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (12338.734 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 186.423 ms, heap usage 589.753 MB -> 221.737 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11147.564 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 153.589 ms, heap usage 408.473 MB -> 222.556 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (11031.428 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 169.098 ms, heap usage 515.040 MB -> 222.454 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12357.542 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 166.635 ms, heap usage 312.961 MB -> 222.748 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (11030.168 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 171.167 ms, heap usage 338.392 MB -> 222.455 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10744.566 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 156.198 ms, heap usage 736.581 MB -> 223.115 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10758.257 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 197.300 ms, heap usage 316.391 MB -> 222.858 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10525.658 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 170.719 ms, heap usage 457.315 MB -> 222.517 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (11257.901 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 169.533 ms, heap usage 312.690 MB -> 222.786 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10854.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 157.173 ms, heap usage 747.052 MB -> 222.857 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10388.731 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 154.057 ms, heap usage 695.658 MB -> 223.022 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10680.910 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 185.890 ms, heap usage 413.606 MB -> 222.778 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10499.289 ms) ======\n"
    },
    "mnemonics": {
        "times": [
            4185.904,
            4534.474,
            4533.643,
            4403.413,
            5927.559,
            4487.661,
            4457.112,
            4540.07,
            4475.207,
            4932.289,
            4641.786,
            4275.001,
            3985.78,
            4566.75,
            4543.68
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 91.867 ms, heap usage 498.175 MB -> 140.678 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 36\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 631\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 36\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 110.19 op/s (110.19 op/s including failed)\nElapsed time: 0.73 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.732 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 117.581 ms, heap usage 448.307 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 426\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 631\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 13\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 6\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 36\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 319.36 op/s (319.36 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1620.055 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 115.483 ms, heap usage 503.630 MB -> 140.870 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 561\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 631\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 13\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 6\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 36\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 6\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 413.79 op/s (413.79 op/s including failed)\nElapsed time: 0.58 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1751.244 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 137.645 ms, heap usage 515.170 MB -> 140.871 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 419\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 631\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 13\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 6\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 36\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 6\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 747.66 op/s (747.66 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1498.397 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 138.412 ms, heap usage 518.846 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 442\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 631\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 13\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 6\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 36\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 843.88 op/s (843.88 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1485.473 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.809 ms, heap usage 517.836 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 631\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 36\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 6\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1227.62 op/s (1227.62 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1294.184 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 107.109 ms, heap usage 517.833 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 631\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 13\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 6\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 36\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 21\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1450.78 op/s (1450.78 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1330.292 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 119.205 ms, heap usage 515.905 MB -> 140.875 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 400\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 631\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 6\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 36\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 21\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1531.10 op/s (1531.10 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1332.508 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 106.557 ms, heap usage 515.959 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 631\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 6\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 36\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 21\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1951.22 op/s (1951.22 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1291.310 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 121.036 ms, heap usage 516.936 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 631\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 6\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 36\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2077.92 op/s (2077.92 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.507 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 105.681 ms, heap usage 515.444 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 631\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 6\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 36\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 21\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2100.24 op/s (2100.24 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1292.799 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 111.082 ms, heap usage 517.649 MB -> 140.873 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 631\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 6\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 36\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 21\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2400.00 op/s (2400.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1296.932 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 103.201 ms, heap usage 516.676 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 631\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 6\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 36\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 21\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2795.70 op/s (2795.70 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1311.387 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.056 ms, heap usage 514.568 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 369\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 631\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 6\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 36\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 21\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2871.79 op/s (2871.79 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1282.596 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 97.337 ms, heap usage 514.680 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 434\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 631\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 6\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 36\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 21\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2597.40 op/s (2597.40 op/s including failed)\nElapsed time: 0.46 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1348.589 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.341 ms, heap usage 452.275 MB -> 152.080 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (28757.463 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.960 ms, heap usage 545.144 MB -> 427.980 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16046.657 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.982 ms, heap usage 530.899 MB -> 428.162 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15708.858 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 153.581 ms, heap usage 645.249 MB -> 428.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15390.484 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 119.725 ms, heap usage 596.655 MB -> 428.400 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15157.333 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.654 ms, heap usage 455.279 MB -> 428.525 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (15079.515 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 132.375 ms, heap usage 645.026 MB -> 427.170 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14948.829 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 130.197 ms, heap usage 497.066 MB -> 425.364 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (16022.884 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 121.215 ms, heap usage 495.879 MB -> 424.947 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14993.032 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 129.387 ms, heap usage 744.911 MB -> 422.062 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (15394.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.439 ms, heap usage 448.619 MB -> 422.194 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15936.975 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.223 ms, heap usage 523.042 MB -> 420.596 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14731.792 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 128.730 ms, heap usage 539.103 MB -> 420.674 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15087.963 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 106.089 ms, heap usage 439.429 MB -> 420.801 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15253.905 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 99.474 ms, heap usage 741.456 MB -> 420.778 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14951.152 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 127.975 ms, heap usage 343.090 MB -> 165.903 MB.\n====== als (apache-spark) [default], iteration 0 completed (17763.845 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.152 ms, heap usage 522.542 MB -> 191.006 MB.\n====== als (apache-spark) [default], iteration 1 completed (10305.340 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 162.926 ms, heap usage 485.994 MB -> 192.474 MB.\n====== als (apache-spark) [default], iteration 2 completed (8531.033 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.434 ms, heap usage 409.190 MB -> 192.854 MB.\n====== als (apache-spark) [default], iteration 3 completed (8006.763 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 134.951 ms, heap usage 482.596 MB -> 193.550 MB.\n====== als (apache-spark) [default], iteration 4 completed (7909.835 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.666 ms, heap usage 508.245 MB -> 194.132 MB.\n====== als (apache-spark) [default], iteration 5 completed (7778.802 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 146.595 ms, heap usage 450.334 MB -> 194.593 MB.\n====== als (apache-spark) [default], iteration 6 completed (7549.451 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.006 ms, heap usage 405.662 MB -> 195.062 MB.\n====== als (apache-spark) [default], iteration 7 completed (7546.068 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 149.508 ms, heap usage 488.345 MB -> 195.873 MB.\n====== als (apache-spark) [default], iteration 8 completed (7619.985 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.868 ms, heap usage 476.254 MB -> 196.260 MB.\n====== als (apache-spark) [default], iteration 9 completed (7425.627 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 146.376 ms, heap usage 368.535 MB -> 196.339 MB.\n====== als (apache-spark) [default], iteration 10 completed (7707.192 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.407 ms, heap usage 456.379 MB -> 196.596 MB.\n====== als (apache-spark) [default], iteration 11 completed (7566.801 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 191.022 ms, heap usage 485.157 MB -> 196.997 MB.\n====== als (apache-spark) [default], iteration 12 completed (7542.114 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.757 ms, heap usage 604.674 MB -> 197.384 MB.\n====== als (apache-spark) [default], iteration 13 completed (7780.687 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 147.635 ms, heap usage 691.460 MB -> 197.855 MB.\n====== als (apache-spark) [default], iteration 14 completed (7523.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 159.913 ms, heap usage 491.953 MB -> 177.991 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4091.599 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 150.942 ms, heap usage 383.495 MB -> 177.911 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3966.063 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 138.704 ms, heap usage 369.524 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4175.996 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 141.312 ms, heap usage 315.406 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3963.378 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 147.243 ms, heap usage 316.375 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3729.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 131.587 ms, heap usage 315.938 MB -> 177.937 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3901.873 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 133.247 ms, heap usage 316.895 MB -> 177.939 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3983.108 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 135.623 ms, heap usage 549.955 MB -> 177.935 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4012.522 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 131.664 ms, heap usage 324.436 MB -> 177.940 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3493.565 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 132.115 ms, heap usage 316.935 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3909.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 120.007 ms, heap usage 428.479 MB -> 177.943 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4066.975 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 141.223 ms, heap usage 329.997 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4554.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 145.109 ms, heap usage 568.497 MB -> 177.942 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4002.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 124.798 ms, heap usage 315.328 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3950.508 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 161.296 ms, heap usage 313.497 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3918.709 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.352 ms, heap usage 351.371 MB -> 200.202 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (357.410 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 156.674 ms, heap usage 228.202 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.590 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 140.874 ms, heap usage 230.236 MB -> 200.243 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (178.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 138.331 ms, heap usage 230.233 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (215.789 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 134.910 ms, heap usage 260.749 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (290.557 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.584 ms, heap usage 321.734 MB -> 200.233 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (262.782 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 163.347 ms, heap usage 321.733 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (253.949 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 144.129 ms, heap usage 321.733 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (254.605 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 139.335 ms, heap usage 321.734 MB -> 200.234 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (266.599 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 126.122 ms, heap usage 321.734 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (272.246 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 155.765 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (270.594 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 137.795 ms, heap usage 321.734 MB -> 200.244 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (283.981 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 129.751 ms, heap usage 321.734 MB -> 200.242 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (249.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 160.759 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (266.696 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.963 ms, heap usage 321.734 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (269.949 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 158.859 ms, heap usage 323.734 MB -> 179.237 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2348.694 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 159.428 ms, heap usage 199.646 MB -> 179.157 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1019.428 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 132.986 ms, heap usage 242.385 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1181.516 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.716 ms, heap usage 365.346 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1080.948 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 157.211 ms, heap usage 273.768 MB -> 179.165 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1079.589 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 153.796 ms, heap usage 308.116 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1137.287 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 144.573 ms, heap usage 333.023 MB -> 179.158 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (991.576 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 140.465 ms, heap usage 297.461 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1096.832 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 154.748 ms, heap usage 322.419 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1164.211 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 133.096 ms, heap usage 377.892 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1067.355 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 437.865 MB -> 179.163 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1094.797 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 146.993 ms, heap usage 436.349 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1031.368 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 173.508 ms, heap usage 297.516 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1020.017 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 181.989 ms, heap usage 319.353 MB -> 179.162 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1069.884 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 137.923 ms, heap usage 466.349 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1114.917 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.729 ms, heap usage 342.371 MB -> 191.153 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8175.612 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.659 ms, heap usage 607.717 MB -> 273.960 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1756.882 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 154.233 ms, heap usage 750.635 MB -> 275.012 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1526.393 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.502 ms, heap usage 695.864 MB -> 275.295 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1425.448 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 140.267 ms, heap usage 577.420 MB -> 275.144 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1378.696 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 148.296 ms, heap usage 677.814 MB -> 275.713 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1275.844 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 142.938 ms, heap usage 650.236 MB -> 275.788 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1207.841 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 145.595 ms, heap usage 546.182 MB -> 275.741 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1234.426 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 181.609 ms, heap usage 513.705 MB -> 275.864 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1168.411 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 140.088 ms, heap usage 753.587 MB -> 276.825 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1150.697 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 150.658 ms, heap usage 715.479 MB -> 276.929 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1154.831 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.794 ms, heap usage 624.240 MB -> 276.620 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1131.401 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.398 ms, heap usage 658.165 MB -> 277.051 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1207.794 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.235 ms, heap usage 808.551 MB -> 277.692 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1139.451 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 153.674 ms, heap usage 669.714 MB -> 277.422 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1164.536 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.369 ms, heap usage 788.732 MB -> 213.049 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (17655.648 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 177.599 ms, heap usage 307.362 MB -> 218.337 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11884.447 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 173.083 ms, heap usage 398.981 MB -> 219.942 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (12338.734 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 186.423 ms, heap usage 589.753 MB -> 221.737 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11147.564 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 153.589 ms, heap usage 408.473 MB -> 222.556 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (11031.428 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 169.098 ms, heap usage 515.040 MB -> 222.454 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12357.542 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 166.635 ms, heap usage 312.961 MB -> 222.748 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (11030.168 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 171.167 ms, heap usage 338.392 MB -> 222.455 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10744.566 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 156.198 ms, heap usage 736.581 MB -> 223.115 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10758.257 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 197.300 ms, heap usage 316.391 MB -> 222.858 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10525.658 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 170.719 ms, heap usage 457.315 MB -> 222.517 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (11257.901 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 169.533 ms, heap usage 312.690 MB -> 222.786 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10854.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 157.173 ms, heap usage 747.052 MB -> 222.857 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10388.731 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 154.057 ms, heap usage 695.658 MB -> 223.022 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10680.910 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 185.890 ms, heap usage 413.606 MB -> 222.778 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10499.289 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 186.932 ms, heap usage 315.336 MB -> 214.177 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4185.904 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 164.010 ms, heap usage 352.158 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4534.474 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 151.580 ms, heap usage 349.640 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4533.643 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 150.196 ms, heap usage 343.238 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4403.413 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 152.092 ms, heap usage 349.868 MB -> 214.026 MB.\n====== mnemonics (functional) [default], iteration 4 completed (5927.559 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 154.813 ms, heap usage 343.301 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4487.661 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 164.552 ms, heap usage 349.549 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4457.112 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 178.549 ms, heap usage 343.553 MB -> 214.034 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4540.070 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 157.697 ms, heap usage 350.026 MB -> 214.029 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4475.207 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 159.028 ms, heap usage 350.077 MB -> 214.029 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4932.289 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 160.265 ms, heap usage 349.559 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4641.786 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 156.265 ms, heap usage 343.301 MB -> 214.031 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4275.001 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 207.028 ms, heap usage 340.569 MB -> 214.026 MB.\n====== mnemonics (functional) [default], iteration 12 completed (3985.780 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 155.806 ms, heap usage 351.526 MB -> 214.029 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4566.750 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 150.978 ms, heap usage 342.890 MB -> 214.026 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4543.680 ms) ======\n"
    },
    "dotty": {
        "times": [
            12122.648,
            5198.338,
            4153.006,
            3766.856,
            3399.902,
            3265.223,
            3152.416,
            2372.307,
            2265.177,
            2170.485,
            1982.084,
            1958.73,
            1841.047,
            1776.633,
            1751.716
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 91.867 ms, heap usage 498.175 MB -> 140.678 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 36\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 631\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 36\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 110.19 op/s (110.19 op/s including failed)\nElapsed time: 0.73 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.732 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 117.581 ms, heap usage 448.307 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 426\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 631\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 13\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 6\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 36\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 319.36 op/s (319.36 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1620.055 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 115.483 ms, heap usage 503.630 MB -> 140.870 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 561\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 631\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 13\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 6\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 36\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 6\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 413.79 op/s (413.79 op/s including failed)\nElapsed time: 0.58 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1751.244 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 137.645 ms, heap usage 515.170 MB -> 140.871 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 419\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 631\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 13\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 6\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 36\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 6\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 747.66 op/s (747.66 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1498.397 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 138.412 ms, heap usage 518.846 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 442\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 631\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 13\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 6\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 36\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 843.88 op/s (843.88 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1485.473 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.809 ms, heap usage 517.836 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 631\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 36\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 6\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1227.62 op/s (1227.62 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1294.184 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 107.109 ms, heap usage 517.833 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 631\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 13\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 6\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 36\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 21\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1450.78 op/s (1450.78 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1330.292 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 119.205 ms, heap usage 515.905 MB -> 140.875 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 400\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 631\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 6\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 36\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 21\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1531.10 op/s (1531.10 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1332.508 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 106.557 ms, heap usage 515.959 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 631\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 6\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 36\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 21\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1951.22 op/s (1951.22 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1291.310 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 121.036 ms, heap usage 516.936 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 631\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 6\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 36\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2077.92 op/s (2077.92 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.507 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 105.681 ms, heap usage 515.444 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 631\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 6\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 36\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 21\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2100.24 op/s (2100.24 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1292.799 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 111.082 ms, heap usage 517.649 MB -> 140.873 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 631\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 6\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 36\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 21\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2400.00 op/s (2400.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1296.932 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 103.201 ms, heap usage 516.676 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 631\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 6\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 36\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 21\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2795.70 op/s (2795.70 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1311.387 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.056 ms, heap usage 514.568 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 369\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 631\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 6\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 36\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 21\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2871.79 op/s (2871.79 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1282.596 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 97.337 ms, heap usage 514.680 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 434\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 631\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 6\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 36\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 21\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2597.40 op/s (2597.40 op/s including failed)\nElapsed time: 0.46 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1348.589 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.341 ms, heap usage 452.275 MB -> 152.080 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (28757.463 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.960 ms, heap usage 545.144 MB -> 427.980 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16046.657 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.982 ms, heap usage 530.899 MB -> 428.162 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15708.858 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 153.581 ms, heap usage 645.249 MB -> 428.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15390.484 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 119.725 ms, heap usage 596.655 MB -> 428.400 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15157.333 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.654 ms, heap usage 455.279 MB -> 428.525 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (15079.515 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 132.375 ms, heap usage 645.026 MB -> 427.170 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14948.829 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 130.197 ms, heap usage 497.066 MB -> 425.364 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (16022.884 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 121.215 ms, heap usage 495.879 MB -> 424.947 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14993.032 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 129.387 ms, heap usage 744.911 MB -> 422.062 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (15394.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.439 ms, heap usage 448.619 MB -> 422.194 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15936.975 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.223 ms, heap usage 523.042 MB -> 420.596 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14731.792 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 128.730 ms, heap usage 539.103 MB -> 420.674 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15087.963 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 106.089 ms, heap usage 439.429 MB -> 420.801 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15253.905 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 99.474 ms, heap usage 741.456 MB -> 420.778 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14951.152 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 127.975 ms, heap usage 343.090 MB -> 165.903 MB.\n====== als (apache-spark) [default], iteration 0 completed (17763.845 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.152 ms, heap usage 522.542 MB -> 191.006 MB.\n====== als (apache-spark) [default], iteration 1 completed (10305.340 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 162.926 ms, heap usage 485.994 MB -> 192.474 MB.\n====== als (apache-spark) [default], iteration 2 completed (8531.033 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.434 ms, heap usage 409.190 MB -> 192.854 MB.\n====== als (apache-spark) [default], iteration 3 completed (8006.763 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 134.951 ms, heap usage 482.596 MB -> 193.550 MB.\n====== als (apache-spark) [default], iteration 4 completed (7909.835 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.666 ms, heap usage 508.245 MB -> 194.132 MB.\n====== als (apache-spark) [default], iteration 5 completed (7778.802 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 146.595 ms, heap usage 450.334 MB -> 194.593 MB.\n====== als (apache-spark) [default], iteration 6 completed (7549.451 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.006 ms, heap usage 405.662 MB -> 195.062 MB.\n====== als (apache-spark) [default], iteration 7 completed (7546.068 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 149.508 ms, heap usage 488.345 MB -> 195.873 MB.\n====== als (apache-spark) [default], iteration 8 completed (7619.985 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.868 ms, heap usage 476.254 MB -> 196.260 MB.\n====== als (apache-spark) [default], iteration 9 completed (7425.627 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 146.376 ms, heap usage 368.535 MB -> 196.339 MB.\n====== als (apache-spark) [default], iteration 10 completed (7707.192 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.407 ms, heap usage 456.379 MB -> 196.596 MB.\n====== als (apache-spark) [default], iteration 11 completed (7566.801 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 191.022 ms, heap usage 485.157 MB -> 196.997 MB.\n====== als (apache-spark) [default], iteration 12 completed (7542.114 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.757 ms, heap usage 604.674 MB -> 197.384 MB.\n====== als (apache-spark) [default], iteration 13 completed (7780.687 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 147.635 ms, heap usage 691.460 MB -> 197.855 MB.\n====== als (apache-spark) [default], iteration 14 completed (7523.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 159.913 ms, heap usage 491.953 MB -> 177.991 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4091.599 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 150.942 ms, heap usage 383.495 MB -> 177.911 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3966.063 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 138.704 ms, heap usage 369.524 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4175.996 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 141.312 ms, heap usage 315.406 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3963.378 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 147.243 ms, heap usage 316.375 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3729.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 131.587 ms, heap usage 315.938 MB -> 177.937 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3901.873 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 133.247 ms, heap usage 316.895 MB -> 177.939 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3983.108 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 135.623 ms, heap usage 549.955 MB -> 177.935 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4012.522 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 131.664 ms, heap usage 324.436 MB -> 177.940 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3493.565 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 132.115 ms, heap usage 316.935 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3909.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 120.007 ms, heap usage 428.479 MB -> 177.943 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4066.975 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 141.223 ms, heap usage 329.997 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4554.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 145.109 ms, heap usage 568.497 MB -> 177.942 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4002.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 124.798 ms, heap usage 315.328 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3950.508 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 161.296 ms, heap usage 313.497 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3918.709 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.352 ms, heap usage 351.371 MB -> 200.202 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (357.410 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 156.674 ms, heap usage 228.202 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.590 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 140.874 ms, heap usage 230.236 MB -> 200.243 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (178.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 138.331 ms, heap usage 230.233 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (215.789 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 134.910 ms, heap usage 260.749 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (290.557 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.584 ms, heap usage 321.734 MB -> 200.233 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (262.782 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 163.347 ms, heap usage 321.733 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (253.949 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 144.129 ms, heap usage 321.733 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (254.605 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 139.335 ms, heap usage 321.734 MB -> 200.234 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (266.599 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 126.122 ms, heap usage 321.734 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (272.246 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 155.765 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (270.594 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 137.795 ms, heap usage 321.734 MB -> 200.244 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (283.981 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 129.751 ms, heap usage 321.734 MB -> 200.242 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (249.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 160.759 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (266.696 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.963 ms, heap usage 321.734 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (269.949 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 158.859 ms, heap usage 323.734 MB -> 179.237 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2348.694 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 159.428 ms, heap usage 199.646 MB -> 179.157 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1019.428 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 132.986 ms, heap usage 242.385 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1181.516 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.716 ms, heap usage 365.346 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1080.948 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 157.211 ms, heap usage 273.768 MB -> 179.165 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1079.589 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 153.796 ms, heap usage 308.116 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1137.287 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 144.573 ms, heap usage 333.023 MB -> 179.158 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (991.576 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 140.465 ms, heap usage 297.461 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1096.832 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 154.748 ms, heap usage 322.419 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1164.211 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 133.096 ms, heap usage 377.892 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1067.355 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 437.865 MB -> 179.163 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1094.797 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 146.993 ms, heap usage 436.349 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1031.368 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 173.508 ms, heap usage 297.516 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1020.017 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 181.989 ms, heap usage 319.353 MB -> 179.162 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1069.884 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 137.923 ms, heap usage 466.349 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1114.917 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.729 ms, heap usage 342.371 MB -> 191.153 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8175.612 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.659 ms, heap usage 607.717 MB -> 273.960 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1756.882 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 154.233 ms, heap usage 750.635 MB -> 275.012 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1526.393 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.502 ms, heap usage 695.864 MB -> 275.295 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1425.448 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 140.267 ms, heap usage 577.420 MB -> 275.144 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1378.696 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 148.296 ms, heap usage 677.814 MB -> 275.713 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1275.844 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 142.938 ms, heap usage 650.236 MB -> 275.788 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1207.841 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 145.595 ms, heap usage 546.182 MB -> 275.741 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1234.426 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 181.609 ms, heap usage 513.705 MB -> 275.864 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1168.411 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 140.088 ms, heap usage 753.587 MB -> 276.825 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1150.697 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 150.658 ms, heap usage 715.479 MB -> 276.929 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1154.831 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.794 ms, heap usage 624.240 MB -> 276.620 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1131.401 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.398 ms, heap usage 658.165 MB -> 277.051 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1207.794 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.235 ms, heap usage 808.551 MB -> 277.692 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1139.451 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 153.674 ms, heap usage 669.714 MB -> 277.422 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1164.536 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.369 ms, heap usage 788.732 MB -> 213.049 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (17655.648 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 177.599 ms, heap usage 307.362 MB -> 218.337 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11884.447 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 173.083 ms, heap usage 398.981 MB -> 219.942 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (12338.734 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 186.423 ms, heap usage 589.753 MB -> 221.737 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11147.564 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 153.589 ms, heap usage 408.473 MB -> 222.556 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (11031.428 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 169.098 ms, heap usage 515.040 MB -> 222.454 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12357.542 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 166.635 ms, heap usage 312.961 MB -> 222.748 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (11030.168 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 171.167 ms, heap usage 338.392 MB -> 222.455 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10744.566 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 156.198 ms, heap usage 736.581 MB -> 223.115 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10758.257 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 197.300 ms, heap usage 316.391 MB -> 222.858 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10525.658 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 170.719 ms, heap usage 457.315 MB -> 222.517 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (11257.901 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 169.533 ms, heap usage 312.690 MB -> 222.786 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10854.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 157.173 ms, heap usage 747.052 MB -> 222.857 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10388.731 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 154.057 ms, heap usage 695.658 MB -> 223.022 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10680.910 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 185.890 ms, heap usage 413.606 MB -> 222.778 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10499.289 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 186.932 ms, heap usage 315.336 MB -> 214.177 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4185.904 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 164.010 ms, heap usage 352.158 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4534.474 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 151.580 ms, heap usage 349.640 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4533.643 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 150.196 ms, heap usage 343.238 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4403.413 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 152.092 ms, heap usage 349.868 MB -> 214.026 MB.\n====== mnemonics (functional) [default], iteration 4 completed (5927.559 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 154.813 ms, heap usage 343.301 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4487.661 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 164.552 ms, heap usage 349.549 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4457.112 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 178.549 ms, heap usage 343.553 MB -> 214.034 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4540.070 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 157.697 ms, heap usage 350.026 MB -> 214.029 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4475.207 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 159.028 ms, heap usage 350.077 MB -> 214.029 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4932.289 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 160.265 ms, heap usage 349.559 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4641.786 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 156.265 ms, heap usage 343.301 MB -> 214.031 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4275.001 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 207.028 ms, heap usage 340.569 MB -> 214.026 MB.\n====== mnemonics (functional) [default], iteration 12 completed (3985.780 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 155.806 ms, heap usage 351.526 MB -> 214.029 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4566.750 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 150.978 ms, heap usage 342.890 MB -> 214.026 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4543.680 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 221.283 ms, heap usage 341.570 MB -> 216.646 MB.\n====== dotty (scala) [default], iteration 0 completed (12122.648 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 230.340 ms, heap usage 266.674 MB -> 233.238 MB.\n====== dotty (scala) [default], iteration 1 completed (5198.338 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 165.454 ms, heap usage 470.256 MB -> 233.250 MB.\n====== dotty (scala) [default], iteration 2 completed (4153.006 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 167.176 ms, heap usage 466.245 MB -> 233.264 MB.\n====== dotty (scala) [default], iteration 3 completed (3766.856 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 179.049 ms, heap usage 464.285 MB -> 233.263 MB.\n====== dotty (scala) [default], iteration 4 completed (3399.902 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 184.063 ms, heap usage 461.263 MB -> 233.289 MB.\n====== dotty (scala) [default], iteration 5 completed (3265.223 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 196.306 ms, heap usage 459.799 MB -> 233.299 MB.\n====== dotty (scala) [default], iteration 6 completed (3152.416 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 187.184 ms, heap usage 458.288 MB -> 233.296 MB.\n====== dotty (scala) [default], iteration 7 completed (2372.307 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 174.049 ms, heap usage 457.311 MB -> 233.303 MB.\n====== dotty (scala) [default], iteration 8 completed (2265.177 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 171.808 ms, heap usage 455.321 MB -> 233.310 MB.\n====== dotty (scala) [default], iteration 9 completed (2170.485 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 171.632 ms, heap usage 454.307 MB -> 233.313 MB.\n====== dotty (scala) [default], iteration 10 completed (1982.084 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 165.979 ms, heap usage 453.325 MB -> 233.320 MB.\n====== dotty (scala) [default], iteration 11 completed (1958.730 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 161.295 ms, heap usage 452.833 MB -> 233.323 MB.\n====== dotty (scala) [default], iteration 12 completed (1841.047 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.153 ms, heap usage 450.838 MB -> 233.329 MB.\n====== dotty (scala) [default], iteration 13 completed (1776.633 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 178.009 ms, heap usage 450.327 MB -> 233.331 MB.\n====== dotty (scala) [default], iteration 14 completed (1751.716 ms) ======\n"
    },
    "finagle-chirper": {
        "times": [
            15200.291,
            6850.989,
            4091.563,
            3367.893,
            3216.073,
            2989.387,
            2919.512,
            3001.327,
            2918.001,
            2813.467,
            2967.659,
            2922.561,
            2863.724,
            2748.747,
            2638.938
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 73.461 ms, heap usage 191.324 MB -> 75.951 MB.\n====== scrabble (functional) [default], iteration 0 completed (1247.420 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 55.863 ms, heap usage 305.108 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 1 completed (519.726 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 75.879 ms, heap usage 173.700 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 2 completed (500.332 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 60.268 ms, heap usage 142.767 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 3 completed (499.056 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 60.112 ms, heap usage 382.862 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 4 completed (518.238 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 65.153 ms, heap usage 139.798 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 5 completed (474.248 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 66.693 ms, heap usage 325.647 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 6 completed (501.093 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 61.800 ms, heap usage 115.331 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 7 completed (501.223 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 132.276 ms, heap usage 299.468 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 8 completed (560.784 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 62.596 ms, heap usage 286.415 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 9 completed (541.993 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 70.337 ms, heap usage 133.861 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 10 completed (516.476 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 63.613 ms, heap usage 345.449 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 11 completed (503.860 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 72.801 ms, heap usage 118.290 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 12 completed (532.234 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 60.694 ms, heap usage 301.741 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 13 completed (495.035 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 81.362 ms, heap usage 169.901 MB -> 76.037 MB.\n====== scrabble (functional) [default], iteration 14 completed (542.322 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 29.111 ms, heap usage 667.901 MB -> 29.694 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (18333.425 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 128.193 ms, heap usage 593.920 MB -> 149.053 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10890.555 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.811 ms, heap usage 601.297 MB -> 149.242 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10149.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 110.128 ms, heap usage 435.932 MB -> 149.383 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10026.112 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 120.675 ms, heap usage 649.352 MB -> 149.498 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (9943.985 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 108.697 ms, heap usage 706.906 MB -> 149.609 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (9962.936 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 154.710 ms, heap usage 608.932 MB -> 149.730 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10659.160 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 117.864 ms, heap usage 680.565 MB -> 149.841 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10002.758 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 128.267 ms, heap usage 609.432 MB -> 149.965 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10170.581 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 111.327 ms, heap usage 631.423 MB -> 150.056 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10148.256 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 113.666 ms, heap usage 720.356 MB -> 150.160 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (10139.991 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 115.303 ms, heap usage 508.114 MB -> 150.243 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10025.645 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 118.653 ms, heap usage 590.105 MB -> 150.342 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10158.044 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 112.555 ms, heap usage 564.250 MB -> 150.439 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (9754.571 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 112.510 ms, heap usage 514.422 MB -> 147.600 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (10125.885 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 35.396 ms, heap usage 483.903 MB -> 31.347 MB.\n====== future-genetic (functional) [default], iteration 0 completed (4075.839 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 48.776 ms, heap usage 87.586 MB -> 32.133 MB.\n====== future-genetic (functional) [default], iteration 1 completed (2492.480 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 36.802 ms, heap usage 37.464 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 2 completed (2320.043 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 41.825 ms, heap usage 38.886 MB -> 32.135 MB.\n====== future-genetic (functional) [default], iteration 3 completed (2509.580 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 43.488 ms, heap usage 68.584 MB -> 32.158 MB.\n====== future-genetic (functional) [default], iteration 4 completed (2127.267 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 37.796 ms, heap usage 60.718 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 5 completed (1923.365 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 28.834 ms, heap usage 187.474 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 6 completed (1937.146 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 27.057 ms, heap usage 49.367 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 7 completed (2092.379 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 34.882 ms, heap usage 72.403 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 8 completed (2031.389 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 34.299 ms, heap usage 60.062 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 9 completed (1913.039 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 26.812 ms, heap usage 35.667 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 10 completed (1949.902 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 30.761 ms, heap usage 56.395 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 11 completed (1928.874 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 29.998 ms, heap usage 112.791 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 12 completed (1911.125 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 30.757 ms, heap usage 127.232 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 13 completed (2000.194 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 29.417 ms, heap usage 110.584 MB -> 32.160 MB.\n====== future-genetic (functional) [default], iteration 14 completed (1970.981 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 33.430 ms, heap usage 55.096 MB -> 32.946 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (15935.193 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 81.698 ms, heap usage 515.569 MB -> 57.992 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (13412.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 253.868 ms, heap usage 579.603 MB -> 123.926 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (14143.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 210.491 ms, heap usage 392.973 MB -> 95.698 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (13124.072 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 180.710 ms, heap usage 548.055 MB -> 100.314 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (13099.718 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 216.751 ms, heap usage 318.536 MB -> 116.165 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (13123.450 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 267.226 ms, heap usage 369.277 MB -> 117.792 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (13268.025 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 162.021 ms, heap usage 557.828 MB -> 91.487 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (13088.727 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 263.270 ms, heap usage 453.473 MB -> 127.786 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (13113.008 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 223.270 ms, heap usage 308.849 MB -> 127.015 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (13147.429 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 280.373 ms, heap usage 746.473 MB -> 143.447 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (13623.365 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 167.173 ms, heap usage 698.147 MB -> 90.821 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (13791.270 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 87.399 ms, heap usage 598.691 MB -> 63.948 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (13106.205 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.600 ms, heap usage 498.215 MB -> 78.540 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 8\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (13214.860 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 254.751 ms, heap usage 478.618 MB -> 122.959 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (13534.111 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 4 (out of 4) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 102.157 ms, heap usage 285.211 MB -> 87.317 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20754.159 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 108.870 ms, heap usage 202.652 MB -> 101.486 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (15368.327 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 104.373 ms, heap usage 560.743 MB -> 103.665 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (14234.015 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 91.988 ms, heap usage 533.156 MB -> 101.149 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (13679.034 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 109.581 ms, heap usage 261.368 MB -> 101.024 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (13920.272 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 95.510 ms, heap usage 563.800 MB -> 104.735 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14324.242 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 95.165 ms, heap usage 399.869 MB -> 101.463 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (13218.296 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 88.758 ms, heap usage 288.289 MB -> 99.405 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (13131.065 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 107.251 ms, heap usage 181.823 MB -> 99.502 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (13414.194 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 91.192 ms, heap usage 461.963 MB -> 99.661 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133936 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (13684.528 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 86.930 ms, heap usage 166.751 MB -> 100.265 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402931 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081437.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (12975.230 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 93.842 ms, heap usage 350.948 MB -> 99.432 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (12594.024 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 87.209 ms, heap usage 282.317 MB -> 99.617 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (13190.980 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 85.084 ms, heap usage 169.566 MB -> 99.655 MB.\nRMSE (validation) = 3.621968954548761 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.310518648022093 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (13318.099 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 85.662 ms, heap usage 162.555 MB -> 99.577 MB.\nRMSE (validation) = 3.6219689545487617 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923206655926 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186480220927 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 0.9919630870151801 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2070175354133934 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1146801677397187 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9227419487402932 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8980643970612974 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9063252166081438.\nThe best model improves the baseline by 14.52%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.659, id: 67504)\n2: Goat, The (1921) (rating: 4.659, id: 83318)\n3: Play House, The (1921) (rating: 4.659, id: 83359)\n4: Cops (1922) (rating: 4.659, id: 83411)\n5: Dear Frankie (2004) (rating: 4.267, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12459.964 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 61.098 ms, heap usage 256.558 MB -> 57.877 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3017.134 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 62.376 ms, heap usage 143.299 MB -> 57.786 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3149.704 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 45.279 ms, heap usage 120.986 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2463.094 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 47.418 ms, heap usage 119.287 MB -> 57.787 MB.\n====== scala-doku (scala) [default], iteration 3 completed (2266.786 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 47.523 ms, heap usage 122.787 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 4 completed (2281.474 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 41.658 ms, heap usage 123.788 MB -> 57.788 MB.\n====== scala-doku (scala) [default], iteration 5 completed (2284.318 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 47.507 ms, heap usage 123.788 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 6 completed (2729.023 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 45.198 ms, heap usage 123.280 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 7 completed (2484.184 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 43.818 ms, heap usage 122.768 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 8 completed (2178.043 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 40.618 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 9 completed (2257.350 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 40.237 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 10 completed (2261.811 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 47.816 ms, heap usage 122.348 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 11 completed (2366.308 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 46.099 ms, heap usage 123.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 12 completed (2147.709 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 44.366 ms, heap usage 122.789 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 13 completed (2166.231 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 45.966 ms, heap usage 122.289 MB -> 57.789 MB.\n====== scala-doku (scala) [default], iteration 14 completed (2210.440 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 52.783 ms, heap usage 229.049 MB -> 63.370 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (3862.221 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 136.414 ms, heap usage 425.099 MB -> 209.357 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1409.467 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 124.486 ms, heap usage 487.733 MB -> 209.441 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (904.022 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 142.546 ms, heap usage 244.560 MB -> 209.475 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (895.645 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 125.800 ms, heap usage 293.795 MB -> 209.526 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (809.765 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 142.342 ms, heap usage 281.785 MB -> 209.574 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (795.749 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 122.354 ms, heap usage 292.480 MB -> 209.618 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (809.822 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 121.052 ms, heap usage 227.354 MB -> 209.672 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (753.053 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 150.524 ms, heap usage 249.339 MB -> 209.718 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (998.505 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 155.133 ms, heap usage 237.309 MB -> 209.813 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (756.024 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 121.366 ms, heap usage 361.956 MB -> 209.872 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (786.045 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.227 ms, heap usage 242.480 MB -> 209.911 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (793.786 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 143.381 ms, heap usage 217.319 MB -> 209.935 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (713.755 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 118.721 ms, heap usage 217.323 MB -> 209.977 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (714.456 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 121.365 ms, heap usage 250.662 MB -> 210.019 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (734.237 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 122.186 ms, heap usage 368.023 MB -> 146.455 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (5522.017 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 109.200 ms, heap usage 239.887 MB -> 146.405 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (5413.209 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 110.249 ms, heap usage 250.227 MB -> 146.417 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (5334.512 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 125.642 ms, heap usage 417.944 MB -> 146.419 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (5274.831 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 135.589 ms, heap usage 165.159 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (5374.565 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 118.825 ms, heap usage 298.932 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (5628.537 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 112.644 ms, heap usage 245.129 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (5232.100 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 108.681 ms, heap usage 368.037 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (5221.050 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 144.016 ms, heap usage 230.770 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (5434.140 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 108.480 ms, heap usage 450.586 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (5409.465 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 123.651 ms, heap usage 181.406 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (5422.728 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 113.266 ms, heap usage 448.708 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (5300.462 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 112.112 ms, heap usage 318.531 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (5469.832 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 120.663 ms, heap usage 398.975 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (5466.676 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 112.421 ms, heap usage 210.517 MB -> 146.420 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (5370.020 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 101.520 ms, heap usage 253.977 MB -> 97.725 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (550.632 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.049 ms, heap usage 251.225 MB -> 98.090 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (259.619 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 85.469 ms, heap usage 240.090 MB -> 98.086 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (241.665 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 77.655 ms, heap usage 240.604 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (154.293 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 83.543 ms, heap usage 239.792 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (195.019 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.290 ms, heap usage 240.840 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (189.147 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 76.942 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (156.217 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 73.582 ms, heap usage 241.368 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (131.200 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 73.387 ms, heap usage 241.970 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (133.600 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 83.008 ms, heap usage 241.897 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (136.050 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 77.156 ms, heap usage 241.929 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (135.977 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 67.175 ms, heap usage 241.424 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (148.328 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 64.428 ms, heap usage 241.448 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (124.522 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 73.147 ms, heap usage 241.466 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (141.262 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 69.185 ms, heap usage 241.482 MB -> 98.087 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (174.341 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 78.787 ms, heap usage 178.087 MB -> 100.568 MB.\n====== db-shootout (database) [default], iteration 0 completed (7921.486 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 68.288 ms, heap usage 186.896 MB -> 110.559 MB.\n====== db-shootout (database) [default], iteration 1 completed (7153.517 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 68.264 ms, heap usage 239.554 MB -> 108.393 MB.\n====== db-shootout (database) [default], iteration 2 completed (6705.215 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 60.996 ms, heap usage 203.914 MB -> 111.623 MB.\n====== db-shootout (database) [default], iteration 3 completed (6847.192 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 70.252 ms, heap usage 616.669 MB -> 109.295 MB.\n====== db-shootout (database) [default], iteration 4 completed (38639.164 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 69.849 ms, heap usage 145.392 MB -> 111.091 MB.\n====== db-shootout (database) [default], iteration 5 completed (8496.518 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 98.838 ms, heap usage 344.008 MB -> 111.207 MB.\n====== db-shootout (database) [default], iteration 6 completed (7166.695 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 68.020 ms, heap usage 443.866 MB -> 110.524 MB.\n====== db-shootout (database) [default], iteration 7 completed (6628.162 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 75.780 ms, heap usage 407.209 MB -> 111.026 MB.\n====== db-shootout (database) [default], iteration 8 completed (6674.077 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 65.240 ms, heap usage 539.865 MB -> 110.922 MB.\n====== db-shootout (database) [default], iteration 9 completed (7651.311 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 82.499 ms, heap usage 709.679 MB -> 111.534 MB.\n====== db-shootout (database) [default], iteration 10 completed (6174.532 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 62.772 ms, heap usage 428.652 MB -> 111.485 MB.\n====== db-shootout (database) [default], iteration 11 completed (6757.281 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 68.607 ms, heap usage 195.878 MB -> 108.456 MB.\n====== db-shootout (database) [default], iteration 12 completed (7412.439 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 121.338 ms, heap usage 273.580 MB -> 108.581 MB.\n====== db-shootout (database) [default], iteration 13 completed (8415.828 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 68.725 ms, heap usage 194.978 MB -> 112.303 MB.\n====== db-shootout (database) [default], iteration 14 completed (6844.995 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :43021 spawning 4 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 82.753 ms, heap usage 755.321 MB -> 111.081 MB.\n====== finagle-http (web) [default], iteration 0 completed (11784.871 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 138.256 ms, heap usage 251.806 MB -> 114.559 MB.\n====== finagle-http (web) [default], iteration 1 completed (5425.983 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 104.780 ms, heap usage 147.295 MB -> 114.671 MB.\n====== finagle-http (web) [default], iteration 2 completed (3568.676 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 84.716 ms, heap usage 144.785 MB -> 114.792 MB.\n====== finagle-http (web) [default], iteration 3 completed (3561.822 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 78.523 ms, heap usage 144.316 MB -> 114.710 MB.\n====== finagle-http (web) [default], iteration 4 completed (3672.762 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 81.765 ms, heap usage 145.464 MB -> 114.746 MB.\n====== finagle-http (web) [default], iteration 5 completed (3549.174 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 83.277 ms, heap usage 146.812 MB -> 114.778 MB.\n====== finagle-http (web) [default], iteration 6 completed (3488.919 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 79.398 ms, heap usage 143.542 MB -> 114.740 MB.\n====== finagle-http (web) [default], iteration 7 completed (3419.612 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 85.126 ms, heap usage 143.503 MB -> 114.774 MB.\n====== finagle-http (web) [default], iteration 8 completed (3409.868 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 88.947 ms, heap usage 141.785 MB -> 114.784 MB.\n====== finagle-http (web) [default], iteration 9 completed (3502.624 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 85.200 ms, heap usage 140.860 MB -> 114.779 MB.\n====== finagle-http (web) [default], iteration 10 completed (3500.756 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 81.824 ms, heap usage 139.811 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (3401.718 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 81.842 ms, heap usage 140.306 MB -> 114.780 MB.\n====== finagle-http (web) [default], iteration 12 completed (3388.963 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 84.866 ms, heap usage 141.815 MB -> 114.775 MB.\n====== finagle-http (web) [default], iteration 13 completed (3342.611 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 80.076 ms, heap usage 141.812 MB -> 116.586 MB.\n====== finagle-http (web) [default], iteration 14 completed (3759.582 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 68.199 ms, heap usage 157.133 MB -> 115.889 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (15185.287 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.277 ms, heap usage 707.453 MB -> 116.318 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12630.825 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 80.841 ms, heap usage 680.182 MB -> 116.323 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (11864.620 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 76.104 ms, heap usage 618.273 MB -> 116.328 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (12158.928 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 75.169 ms, heap usage 658.717 MB -> 116.332 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12811.382 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 90.079 ms, heap usage 757.524 MB -> 116.305 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13854.114 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 78.056 ms, heap usage 639.387 MB -> 111.607 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (11865.609 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 92.902 ms, heap usage 637.509 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (11833.934 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 71.515 ms, heap usage 637.092 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (11997.372 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 68.026 ms, heap usage 675.963 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (11861.611 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 83.960 ms, heap usage 642.170 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (11740.871 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 83.559 ms, heap usage 719.372 MB -> 112.361 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (13741.628 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 73.529 ms, heap usage 644.886 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (12254.163 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 71.862 ms, heap usage 622.253 MB -> 112.360 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (12440.648 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 88.216 ms, heap usage 641.067 MB -> 112.358 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (12057.512 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 95.764 ms, heap usage 213.550 MB -> 125.516 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8474.153 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 161.076 ms, heap usage 194.386 MB -> 157.233 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2036.309 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 99.022 ms, heap usage 473.733 MB -> 174.852 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (1527.717 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 112.545 ms, heap usage 482.042 MB -> 158.800 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1467.679 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 88.239 ms, heap usage 441.575 MB -> 158.663 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1398.499 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 99.109 ms, heap usage 455.449 MB -> 159.006 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1387.412 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 97.075 ms, heap usage 472.301 MB -> 159.212 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1378.916 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 92.767 ms, heap usage 469.137 MB -> 159.442 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1333.623 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 145.199 ms, heap usage 423.499 MB -> 159.464 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1404.750 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 95.491 ms, heap usage 448.136 MB -> 159.732 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1338.875 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 99.833 ms, heap usage 496.132 MB -> 159.726 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1373.013 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 103.744 ms, heap usage 412.545 MB -> 159.990 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1353.239 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 102.121 ms, heap usage 470.069 MB -> 160.143 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1279.847 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 105.499 ms, heap usage 481.627 MB -> 160.157 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1234.000 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 103.984 ms, heap usage 415.991 MB -> 160.334 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1229.617 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 91.867 ms, heap usage 498.175 MB -> 140.678 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 631\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 64\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 13\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 36\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 631\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 6\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 36\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 6\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 110.19 op/s (110.19 op/s including failed)\nElapsed time: 0.73 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2316.732 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 117.581 ms, heap usage 448.307 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 426\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 631\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 13\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 6\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 36\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 6\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 319.36 op/s (319.36 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1620.055 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 115.483 ms, heap usage 503.630 MB -> 140.870 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 561\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 4\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 11\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 631\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 13\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 6\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 36\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 6\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 413.79 op/s (413.79 op/s including failed)\nElapsed time: 0.58 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1751.244 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 137.645 ms, heap usage 515.170 MB -> 140.871 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 419\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 631\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 13\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 6\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 36\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 6\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 747.66 op/s (747.66 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1498.397 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 138.412 ms, heap usage 518.846 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 442\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 631\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 13\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 6\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 36\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 843.88 op/s (843.88 op/s including failed)\nElapsed time: 0.47 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1485.473 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 131.809 ms, heap usage 517.836 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 631\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 13\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 6\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 36\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 6\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1227.62 op/s (1227.62 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1294.184 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 107.109 ms, heap usage 517.833 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 363\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 631\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 13\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 6\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 36\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 21\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1450.78 op/s (1450.78 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1330.292 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 119.205 ms, heap usage 515.905 MB -> 140.875 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 400\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 14\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 64\tmaxttc = 631\tfailed = 0\ttotal = 64\nSHORT_TRAVERSAL:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL_RO:  successful = 160\tmaxttc = 6\tfailed = 0\ttotal = 160\nOPERATION:  successful = 128\tmaxttc = 36\tfailed = 0\ttotal = 128\nOPERATION_RO:  successful = 192\tmaxttc = 21\tfailed = 0\ttotal = 192\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1531.10 op/s (1531.10 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1332.508 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 106.557 ms, heap usage 515.959 MB -> 140.877 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 361\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 72\tmaxttc = 631\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSHORT_TRAVERSAL_RO:  successful = 180\tmaxttc = 6\tfailed = 0\ttotal = 180\nOPERATION:  successful = 144\tmaxttc = 36\tfailed = 0\ttotal = 144\nOPERATION_RO:  successful = 216\tmaxttc = 21\tfailed = 0\ttotal = 216\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1951.22 op/s (1951.22 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1291.310 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 121.036 ms, heap usage 516.936 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 374\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 80\tmaxttc = 631\tfailed = 0\ttotal = 80\nSHORT_TRAVERSAL:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL_RO:  successful = 200\tmaxttc = 6\tfailed = 0\ttotal = 200\nOPERATION:  successful = 160\tmaxttc = 36\tfailed = 0\ttotal = 160\nOPERATION_RO:  successful = 240\tmaxttc = 21\tfailed = 0\ttotal = 240\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2077.92 op/s (2077.92 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1295.507 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 105.681 ms, heap usage 515.444 MB -> 140.872 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 373\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 88\tmaxttc = 631\tfailed = 0\ttotal = 88\nSHORT_TRAVERSAL:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSHORT_TRAVERSAL_RO:  successful = 220\tmaxttc = 6\tfailed = 0\ttotal = 220\nOPERATION:  successful = 176\tmaxttc = 36\tfailed = 0\ttotal = 176\nOPERATION_RO:  successful = 264\tmaxttc = 21\tfailed = 0\ttotal = 264\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2100.24 op/s (2100.24 op/s including failed)\nElapsed time: 0.42 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1292.799 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 111.082 ms, heap usage 517.649 MB -> 140.873 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 371\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 96\tmaxttc = 631\tfailed = 0\ttotal = 96\nSHORT_TRAVERSAL:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSHORT_TRAVERSAL_RO:  successful = 240\tmaxttc = 6\tfailed = 0\ttotal = 240\nOPERATION:  successful = 192\tmaxttc = 36\tfailed = 0\ttotal = 192\nOPERATION_RO:  successful = 288\tmaxttc = 21\tfailed = 0\ttotal = 288\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2400.00 op/s (2400.00 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1296.932 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 103.201 ms, heap usage 516.676 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 358\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 5\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 21\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 104\tmaxttc = 631\tfailed = 0\ttotal = 104\nSHORT_TRAVERSAL:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSHORT_TRAVERSAL_RO:  successful = 260\tmaxttc = 6\tfailed = 0\ttotal = 260\nOPERATION:  successful = 208\tmaxttc = 36\tfailed = 0\ttotal = 208\nOPERATION_RO:  successful = 312\tmaxttc = 21\tfailed = 0\ttotal = 312\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2795.70 op/s (2795.70 op/s including failed)\nElapsed time: 0.37 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1311.387 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 115.056 ms, heap usage 514.568 MB -> 140.876 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 369\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 6\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 16\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 112\tmaxttc = 631\tfailed = 0\ttotal = 112\nSHORT_TRAVERSAL:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSHORT_TRAVERSAL_RO:  successful = 280\tmaxttc = 6\tfailed = 0\ttotal = 280\nOPERATION:  successful = 224\tmaxttc = 36\tfailed = 0\ttotal = 224\nOPERATION_RO:  successful = 336\tmaxttc = 21\tfailed = 0\ttotal = 336\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2871.79 op/s (2871.79 op/s including failed)\nElapsed time: 0.39 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1282.596 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 97.337 ms, heap usage 514.680 MB -> 140.874 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 4\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 4\tmaxttc = 434\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 4\tmaxttc = 25\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 4\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 4\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 120\tmaxttc = 631\tfailed = 0\ttotal = 120\nSHORT_TRAVERSAL:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSHORT_TRAVERSAL_RO:  successful = 300\tmaxttc = 6\tfailed = 0\ttotal = 300\nOPERATION:  successful = 240\tmaxttc = 36\tfailed = 0\ttotal = 240\nOPERATION_RO:  successful = 360\tmaxttc = 21\tfailed = 0\ttotal = 360\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 2597.40 op/s (2597.40 op/s including failed)\nElapsed time: 0.46 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1348.589 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 148.341 ms, heap usage 452.275 MB -> 152.080 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (28757.463 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 125.960 ms, heap usage 545.144 MB -> 427.980 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (16046.657 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 126.982 ms, heap usage 530.899 MB -> 428.162 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (15708.858 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 153.581 ms, heap usage 645.249 MB -> 428.300 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (15390.484 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 119.725 ms, heap usage 596.655 MB -> 428.400 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (15157.333 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 113.654 ms, heap usage 455.279 MB -> 428.525 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (15079.515 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 132.375 ms, heap usage 645.026 MB -> 427.170 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (14948.829 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 130.197 ms, heap usage 497.066 MB -> 425.364 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (16022.884 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 121.215 ms, heap usage 495.879 MB -> 424.947 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (14993.032 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 129.387 ms, heap usage 744.911 MB -> 422.062 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (15394.246 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 118.439 ms, heap usage 448.619 MB -> 422.194 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (15936.975 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 119.223 ms, heap usage 523.042 MB -> 420.596 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (14731.792 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 128.730 ms, heap usage 539.103 MB -> 420.674 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (15087.963 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 106.089 ms, heap usage 439.429 MB -> 420.801 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (15253.905 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 99.474 ms, heap usage 741.456 MB -> 420.778 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (14951.152 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 127.975 ms, heap usage 343.090 MB -> 165.903 MB.\n====== als (apache-spark) [default], iteration 0 completed (17763.845 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 188.152 ms, heap usage 522.542 MB -> 191.006 MB.\n====== als (apache-spark) [default], iteration 1 completed (10305.340 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 162.926 ms, heap usage 485.994 MB -> 192.474 MB.\n====== als (apache-spark) [default], iteration 2 completed (8531.033 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 134.434 ms, heap usage 409.190 MB -> 192.854 MB.\n====== als (apache-spark) [default], iteration 3 completed (8006.763 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 134.951 ms, heap usage 482.596 MB -> 193.550 MB.\n====== als (apache-spark) [default], iteration 4 completed (7909.835 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 157.666 ms, heap usage 508.245 MB -> 194.132 MB.\n====== als (apache-spark) [default], iteration 5 completed (7778.802 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 146.595 ms, heap usage 450.334 MB -> 194.593 MB.\n====== als (apache-spark) [default], iteration 6 completed (7549.451 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.006 ms, heap usage 405.662 MB -> 195.062 MB.\n====== als (apache-spark) [default], iteration 7 completed (7546.068 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 149.508 ms, heap usage 488.345 MB -> 195.873 MB.\n====== als (apache-spark) [default], iteration 8 completed (7619.985 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 152.868 ms, heap usage 476.254 MB -> 196.260 MB.\n====== als (apache-spark) [default], iteration 9 completed (7425.627 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 146.376 ms, heap usage 368.535 MB -> 196.339 MB.\n====== als (apache-spark) [default], iteration 10 completed (7707.192 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 144.407 ms, heap usage 456.379 MB -> 196.596 MB.\n====== als (apache-spark) [default], iteration 11 completed (7566.801 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 191.022 ms, heap usage 485.157 MB -> 196.997 MB.\n====== als (apache-spark) [default], iteration 12 completed (7542.114 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 140.757 ms, heap usage 604.674 MB -> 197.384 MB.\n====== als (apache-spark) [default], iteration 13 completed (7780.687 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 147.635 ms, heap usage 691.460 MB -> 197.855 MB.\n====== als (apache-spark) [default], iteration 14 completed (7523.652 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 159.913 ms, heap usage 491.953 MB -> 177.991 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4091.599 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 150.942 ms, heap usage 383.495 MB -> 177.911 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (3966.063 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 138.704 ms, heap usage 369.524 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4175.996 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 141.312 ms, heap usage 315.406 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (3963.378 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 147.243 ms, heap usage 316.375 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3729.537 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 131.587 ms, heap usage 315.938 MB -> 177.937 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (3901.873 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 133.247 ms, heap usage 316.895 MB -> 177.939 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3983.108 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 135.623 ms, heap usage 549.955 MB -> 177.935 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4012.522 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 131.664 ms, heap usage 324.436 MB -> 177.940 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3493.565 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 132.115 ms, heap usage 316.935 MB -> 177.941 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (3909.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 120.007 ms, heap usage 428.479 MB -> 177.943 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (4066.975 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 141.223 ms, heap usage 329.997 MB -> 177.938 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4554.492 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 145.109 ms, heap usage 568.497 MB -> 177.942 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4002.568 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 124.798 ms, heap usage 315.328 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (3950.508 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 161.296 ms, heap usage 313.497 MB -> 177.934 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3918.709 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 190.352 ms, heap usage 351.371 MB -> 200.202 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (357.410 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 156.674 ms, heap usage 228.202 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (198.590 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 140.874 ms, heap usage 230.236 MB -> 200.243 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (178.579 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 138.331 ms, heap usage 230.233 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (215.789 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 134.910 ms, heap usage 260.749 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (290.557 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 139.584 ms, heap usage 321.734 MB -> 200.233 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (262.782 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 163.347 ms, heap usage 321.733 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (253.949 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 144.129 ms, heap usage 321.733 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (254.605 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 139.335 ms, heap usage 321.734 MB -> 200.234 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (266.599 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 126.122 ms, heap usage 321.734 MB -> 200.236 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (272.246 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 155.765 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (270.594 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 137.795 ms, heap usage 321.734 MB -> 200.244 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (283.981 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 129.751 ms, heap usage 321.734 MB -> 200.242 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (249.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 160.759 ms, heap usage 321.734 MB -> 200.237 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (266.696 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.963 ms, heap usage 321.734 MB -> 200.239 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (269.949 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 158.859 ms, heap usage 323.734 MB -> 179.237 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (2348.694 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 159.428 ms, heap usage 199.646 MB -> 179.157 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (1019.428 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 132.986 ms, heap usage 242.385 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (1181.516 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 134.716 ms, heap usage 365.346 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (1080.948 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 157.211 ms, heap usage 273.768 MB -> 179.165 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (1079.589 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 153.796 ms, heap usage 308.116 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (1137.287 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 144.573 ms, heap usage 333.023 MB -> 179.158 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (991.576 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 140.465 ms, heap usage 297.461 MB -> 179.161 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (1096.832 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 154.748 ms, heap usage 322.419 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (1164.211 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 133.096 ms, heap usage 377.892 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (1067.355 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 138.451 ms, heap usage 437.865 MB -> 179.163 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (1094.797 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 146.993 ms, heap usage 436.349 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (1031.368 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 173.508 ms, heap usage 297.516 MB -> 179.159 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (1020.017 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 181.989 ms, heap usage 319.353 MB -> 179.162 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (1069.884 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 137.923 ms, heap usage 466.349 MB -> 179.160 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (1114.917 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.729 ms, heap usage 342.371 MB -> 191.153 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8175.612 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.659 ms, heap usage 607.717 MB -> 273.960 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (1756.882 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 154.233 ms, heap usage 750.635 MB -> 275.012 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1526.393 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 141.502 ms, heap usage 695.864 MB -> 275.295 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1425.448 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 140.267 ms, heap usage 577.420 MB -> 275.144 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1378.696 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 148.296 ms, heap usage 677.814 MB -> 275.713 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1275.844 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 142.938 ms, heap usage 650.236 MB -> 275.788 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1207.841 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 145.595 ms, heap usage 546.182 MB -> 275.741 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1234.426 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 181.609 ms, heap usage 513.705 MB -> 275.864 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1168.411 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 140.088 ms, heap usage 753.587 MB -> 276.825 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1150.697 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 150.658 ms, heap usage 715.479 MB -> 276.929 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1154.831 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 140.794 ms, heap usage 624.240 MB -> 276.620 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1131.401 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 155.398 ms, heap usage 658.165 MB -> 277.051 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1207.794 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 139.235 ms, heap usage 808.551 MB -> 277.692 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1139.451 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 153.674 ms, heap usage 669.714 MB -> 277.422 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1164.536 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 4 (out of 4) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.369 ms, heap usage 788.732 MB -> 213.049 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (17655.648 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 177.599 ms, heap usage 307.362 MB -> 218.337 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (11884.447 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 173.083 ms, heap usage 398.981 MB -> 219.942 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (12338.734 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 186.423 ms, heap usage 589.753 MB -> 221.737 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (11147.564 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 153.589 ms, heap usage 408.473 MB -> 222.556 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (11031.428 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 169.098 ms, heap usage 515.040 MB -> 222.454 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (12357.542 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 166.635 ms, heap usage 312.961 MB -> 222.748 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (11030.168 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 171.167 ms, heap usage 338.392 MB -> 222.455 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (10744.566 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 156.198 ms, heap usage 736.581 MB -> 223.115 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (10758.257 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 197.300 ms, heap usage 316.391 MB -> 222.858 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (10525.658 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 170.719 ms, heap usage 457.315 MB -> 222.517 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (11257.901 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 169.533 ms, heap usage 312.690 MB -> 222.786 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (10854.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 157.173 ms, heap usage 747.052 MB -> 222.857 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (10388.731 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 154.057 ms, heap usage 695.658 MB -> 223.022 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (10680.910 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 185.890 ms, heap usage 413.606 MB -> 222.778 MB.\nAccuracy (validation) = 0.99556 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99778 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.99889 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99778 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 0.99889 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (10499.289 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 186.932 ms, heap usage 315.336 MB -> 214.177 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4185.904 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 164.010 ms, heap usage 352.158 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4534.474 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 151.580 ms, heap usage 349.640 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4533.643 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 150.196 ms, heap usage 343.238 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4403.413 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 152.092 ms, heap usage 349.868 MB -> 214.026 MB.\n====== mnemonics (functional) [default], iteration 4 completed (5927.559 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 154.813 ms, heap usage 343.301 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4487.661 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 164.552 ms, heap usage 349.549 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4457.112 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 178.549 ms, heap usage 343.553 MB -> 214.034 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4540.070 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 157.697 ms, heap usage 350.026 MB -> 214.029 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4475.207 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 159.028 ms, heap usage 350.077 MB -> 214.029 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4932.289 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 160.265 ms, heap usage 349.559 MB -> 214.028 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4641.786 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 156.265 ms, heap usage 343.301 MB -> 214.031 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4275.001 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 207.028 ms, heap usage 340.569 MB -> 214.026 MB.\n====== mnemonics (functional) [default], iteration 12 completed (3985.780 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 155.806 ms, heap usage 351.526 MB -> 214.029 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4566.750 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 150.978 ms, heap usage 342.890 MB -> 214.026 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4543.680 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 221.283 ms, heap usage 341.570 MB -> 216.646 MB.\n====== dotty (scala) [default], iteration 0 completed (12122.648 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 230.340 ms, heap usage 266.674 MB -> 233.238 MB.\n====== dotty (scala) [default], iteration 1 completed (5198.338 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 165.454 ms, heap usage 470.256 MB -> 233.250 MB.\n====== dotty (scala) [default], iteration 2 completed (4153.006 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 167.176 ms, heap usage 466.245 MB -> 233.264 MB.\n====== dotty (scala) [default], iteration 3 completed (3766.856 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 179.049 ms, heap usage 464.285 MB -> 233.263 MB.\n====== dotty (scala) [default], iteration 4 completed (3399.902 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 184.063 ms, heap usage 461.263 MB -> 233.289 MB.\n====== dotty (scala) [default], iteration 5 completed (3265.223 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 196.306 ms, heap usage 459.799 MB -> 233.299 MB.\n====== dotty (scala) [default], iteration 6 completed (3152.416 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 187.184 ms, heap usage 458.288 MB -> 233.296 MB.\n====== dotty (scala) [default], iteration 7 completed (2372.307 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 174.049 ms, heap usage 457.311 MB -> 233.303 MB.\n====== dotty (scala) [default], iteration 8 completed (2265.177 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 171.808 ms, heap usage 455.321 MB -> 233.310 MB.\n====== dotty (scala) [default], iteration 9 completed (2170.485 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 171.632 ms, heap usage 454.307 MB -> 233.313 MB.\n====== dotty (scala) [default], iteration 10 completed (1982.084 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 165.979 ms, heap usage 453.325 MB -> 233.320 MB.\n====== dotty (scala) [default], iteration 11 completed (1958.730 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 161.295 ms, heap usage 452.833 MB -> 233.323 MB.\n====== dotty (scala) [default], iteration 12 completed (1841.047 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.153 ms, heap usage 450.838 MB -> 233.329 MB.\n====== dotty (scala) [default], iteration 13 completed (1776.633 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 178.009 ms, heap usage 450.327 MB -> 233.331 MB.\n====== dotty (scala) [default], iteration 14 completed (1751.716 ms) ======\nMaster port: 38429\nCache ports: 34021, 35607, 46531, 34901\n====== finagle-chirper (web) [default], iteration 0 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 281.062 ms, heap usage 311.801 MB -> 226.440 MB.\n====== finagle-chirper (web) [default], iteration 0 completed (15200.291 ms) ======\n====== finagle-chirper (web) [default], iteration 1 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 186.258 ms, heap usage 332.316 MB -> 228.197 MB.\n====== finagle-chirper (web) [default], iteration 1 completed (6850.989 ms) ======\n====== finagle-chirper (web) [default], iteration 2 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 146.823 ms, heap usage 255.612 MB -> 228.338 MB.\n====== finagle-chirper (web) [default], iteration 2 completed (4091.563 ms) ======\n====== finagle-chirper (web) [default], iteration 3 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 146.627 ms, heap usage 574.512 MB -> 228.799 MB.\n====== finagle-chirper (web) [default], iteration 3 completed (3367.893 ms) ======\n====== finagle-chirper (web) [default], iteration 4 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 157.154 ms, heap usage 544.470 MB -> 228.847 MB.\n====== finagle-chirper (web) [default], iteration 4 completed (3216.073 ms) ======\n====== finagle-chirper (web) [default], iteration 5 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 152.495 ms, heap usage 502.826 MB -> 228.842 MB.\n====== finagle-chirper (web) [default], iteration 5 completed (2989.387 ms) ======\n====== finagle-chirper (web) [default], iteration 6 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 143.232 ms, heap usage 481.559 MB -> 228.853 MB.\n====== finagle-chirper (web) [default], iteration 6 completed (2919.512 ms) ======\n====== finagle-chirper (web) [default], iteration 7 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 157.282 ms, heap usage 446.464 MB -> 228.874 MB.\n====== finagle-chirper (web) [default], iteration 7 completed (3001.327 ms) ======\n====== finagle-chirper (web) [default], iteration 8 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 145.604 ms, heap usage 398.545 MB -> 227.745 MB.\n====== finagle-chirper (web) [default], iteration 8 completed (2918.001 ms) ======\n====== finagle-chirper (web) [default], iteration 9 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 169.005 ms, heap usage 394.928 MB -> 227.773 MB.\n====== finagle-chirper (web) [default], iteration 9 completed (2813.467 ms) ======\n====== finagle-chirper (web) [default], iteration 10 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 201.423 ms, heap usage 367.572 MB -> 227.367 MB.\n====== finagle-chirper (web) [default], iteration 10 completed (2967.659 ms) ======\n====== finagle-chirper (web) [default], iteration 11 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 216.555 ms, heap usage 346.408 MB -> 226.635 MB.\n====== finagle-chirper (web) [default], iteration 11 completed (2922.561 ms) ======\n====== finagle-chirper (web) [default], iteration 12 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 226.829 ms, heap usage 357.398 MB -> 226.648 MB.\n====== finagle-chirper (web) [default], iteration 12 completed (2863.724 ms) ======\n====== finagle-chirper (web) [default], iteration 13 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 152.308 ms, heap usage 360.454 MB -> 226.664 MB.\n====== finagle-chirper (web) [default], iteration 13 completed (2748.747 ms) ======\n====== finagle-chirper (web) [default], iteration 14 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 146.379 ms, heap usage 352.412 MB -> 226.686 MB.\n====== finagle-chirper (web) [default], iteration 14 completed (2638.938 ms) ======\n"
    },
    "times": [
        229639.683,
        143543.702,
        132127.348,
        126731.963,
        159398.092,
        129823.31,
        124235.275,
        122779.085,
        121934.06599999999,
        123305.7,
        122974.29,
        123313.789,
        121190.761,
        123221.238,
        120739.134
    ]
}